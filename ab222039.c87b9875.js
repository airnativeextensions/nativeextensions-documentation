(window.webpackJsonp=window.webpackJsonp||[]).push([[523],{578:function(e,n,i){"use strict";i.r(n),i.d(n,"frontMatter",(function(){return o})),i.d(n,"metadata",(function(){return t})),i.d(n,"rightToc",(function(){return d})),i.d(n,"default",(function(){return s}));var r=i(2),a=(i(0),i(854));const o={title:"OneSignal - Migrating to v10.2",sidebar_label:"Migrating to v10.2"},t={unversionedId:"pushnotifications/onesignal/migrating-to-v10.2",id:"pushnotifications/onesignal/migrating-to-v10.2",isDocsHomePage:!1,title:"OneSignal - Migrating to v10.2",description:"v10.2 brings the latest release of OneSignal:",source:"@site/docs/pushnotifications/onesignal/migrating-to-v10.2.md",slug:"/pushnotifications/onesignal/migrating-to-v10.2",permalink:"/docs/pushnotifications/onesignal/migrating-to-v10.2",version:"current",sidebar_label:"Migrating to v10.2"},d=[{value:"Update Dependencies",id:"update-dependencies",children:[]},{value:"Update Manifest Additions",id:"update-manifest-additions",children:[]}],c={rightToc:d};function s({components:e,...n}){return Object(a.b)("wrapper",Object(r.a)({},c,n,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"v10.2 brings the latest release of OneSignal:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Android v4.1.0"),Object(a.b)("li",{parentName:"ul"},"iOS v3.1.1")),Object(a.b)("p",null,"We have managed to hide any implementation changes within the native code however there are some major changes to the dependencies and to the manifest additions. "),Object(a.b)("h2",{id:"update-dependencies"},"Update Dependencies"),Object(a.b)("p",null,"You need to ensure you have the following extensions in your application. There are several new extensions included here, and please ensure you have updated all the dependencies to the same releases:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"com.distriqt.Core")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"com.distriqt.playservices.Base")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"com.distriqt.playservices.AdsIdentifier")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"com.distriqt.playservices.CloudMessaging")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"com.google.firebase.core")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"com.google.android.datatransport")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"com.google.dagger")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"com.google.guava")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"androidx.appcompat")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"androidx.browser")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"androidx.cardview")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"androidx.core")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"androidx.recyclerview")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"androidx.room")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"androidx.vectordrawable")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"androidx.work")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"com.jetbrains.kotlin"))),Object(a.b)("p",null,"See ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"onesignal#required-anes"}),"Add Required ANEs")," for more information."),Object(a.b)("h2",{id:"update-manifest-additions"},"Update Manifest Additions"),Object(a.b)("p",null,"We suggest removing any OneSignal references in your manifest and adding the following. The changes have been significant! "),Object(a.b)("p",null,"You must replace ",Object(a.b)("inlineCode",{parentName:"p"},"APPLICATION_PACKAGE")," with your AIR application's Java package name, something like ",Object(a.b)("inlineCode",{parentName:"p"},"air.com.distriqt.test"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-xml"}),'        \x3c!-- ONE SIGNAL --\x3e\n        <meta-data android:name="com.onesignal.NotificationServiceExtension" android:value="com.distriqt.extension.pushnotifications.onesignal.NotificationServiceExtension" />\n\n        <receiver\n            android:name="com.onesignal.FCMBroadcastReceiver"\n            android:permission="com.google.android.c2dm.permission.SEND" >\n\n            \x3c!-- High priority so OneSignal payloads can be filtered from other FCM receivers --\x3e\n            <intent-filter android:priority="999" >\n                <action android:name="com.google.android.c2dm.intent.RECEIVE" />\n                <category android:name="APPLICATION_PACKAGE" />\n            </intent-filter>\n        </receiver>\n\n        <service\n            android:name="com.onesignal.HmsMessageServiceOneSignal"\n            android:exported="false" >\n            <intent-filter>\n                <action android:name="com.huawei.push.action.MESSAGING_EVENT" />\n            </intent-filter>\n        </service>\n\n        <activity\n            android:name="com.onesignal.NotificationOpenedActivityHMS"\n            android:noHistory="true"\n            android:theme="@android:style/Theme.Translucent.NoTitleBar" >\n            <intent-filter>\n                <action android:name="android.intent.action.VIEW" />\n            </intent-filter>\n        </activity>\n\n        <service android:name="com.onesignal.FCMIntentService" />\n        <service\n            android:name="com.onesignal.FCMIntentJobService"\n            android:permission="android.permission.BIND_JOB_SERVICE" />\n        <service\n            android:name="com.onesignal.FocusDelaySyncService"\n            android:stopWithTask="true" />\n        <service\n            android:name="com.onesignal.FocusDelaySyncJobService"\n            android:permission="android.permission.BIND_JOB_SERVICE" />\n        <service\n            android:name="com.onesignal.SyncService"\n            android:stopWithTask="true" />\n        <service\n            android:name="com.onesignal.SyncJobService"\n            android:permission="android.permission.BIND_JOB_SERVICE" />\n\n        <activity\n            android:name="com.onesignal.PermissionsActivity"\n            android:theme="@android:style/Theme.Translucent.NoTitleBar" />\n\n        <receiver android:name="com.onesignal.NotificationDismissReceiver" />\n        <receiver android:name="com.onesignal.BootUpReceiver" >\n            <intent-filter>\n                <action android:name="android.intent.action.BOOT_COMPLETED" />\n                <action android:name="android.intent.action.QUICKBOOT_POWERON" />\n            </intent-filter>\n        </receiver>\n        <receiver android:name="com.onesignal.UpgradeReceiver" >\n            <intent-filter>\n                <action android:name="android.intent.action.MY_PACKAGE_REPLACED" />\n            </intent-filter>\n        </receiver>\n\n        <activity\n            android:name="com.onesignal.NotificationOpenedReceiver"\n            android:noHistory="true"\n            android:theme="@android:style/Theme.Translucent.NoTitleBar" />\n\n        \x3c!--\n                FirebaseMessagingService performs security checks at runtime,\n                but set to not exported to explicitly avoid allowing another app to call it.\n        --\x3e\n        <service\n            android:name="com.google.firebase.messaging.FirebaseMessagingService"\n            android:exported="false" >\n            <intent-filter android:priority="-500" >\n                <action android:name="com.google.firebase.MESSAGING_EVENT" />\n            </intent-filter>\n        </service>\n\n\n        \x3c!-- FIREBASE CORE --\x3e\n        \x3c!-- common --\x3e\n        <service\n            android:name="com.google.firebase.components.ComponentDiscoveryService"\n            android:directBootAware="true"\n            android:exported="false" >\n            <meta-data\n                android:name="com.google.firebase.components:com.google.firebase.installations.FirebaseInstallationsRegistrar"\n                android:value="com.google.firebase.components.ComponentRegistrar" />\n            <meta-data\n                android:name="com.google.firebase.components:com.google.firebase.iid.Registrar"\n                android:value="com.google.firebase.components.ComponentRegistrar" />\n            <meta-data\n                android:name="com.google.firebase.components:com.google.firebase.messaging.FirebaseMessagingRegistrar"\n                android:value="com.google.firebase.components.ComponentRegistrar" />\n            <meta-data\n                android:name="com.google.firebase.components:com.google.firebase.datatransport.TransportRegistrar"\n                android:value="com.google.firebase.components.ComponentRegistrar" />\n        </service>\n        <provider\n            android:name="com.google.firebase.provider.FirebaseInitProvider"\n            android:authorities="APPLICATION_PACKAGE.firebaseinitprovider"\n            android:exported="false"\n            android:initOrder="100" />\n\n\n        \x3c!-- iid --\x3e\n        <receiver\n            android:name="com.google.firebase.iid.FirebaseInstanceIdReceiver"\n            android:exported="true"\n            android:permission="com.google.android.c2dm.permission.SEND" >\n            <intent-filter>\n                <action android:name="com.google.android.c2dm.intent.RECEIVE" />\n            </intent-filter>\n        </receiver>\n\n\n        \x3c!-- androidx.work --\x3e\n        <provider\n            android:name="androidx.work.impl.WorkManagerInitializer"\n            android:authorities="APPLICATION_PACKAGE.workmanager-init"\n            android:directBootAware="false"\n            android:exported="false"\n            android:multiprocess="true" />\n\n        <service\n            android:name="androidx.work.impl.background.systemalarm.SystemAlarmService"\n            android:directBootAware="false"\n            android:enabled="@bool/enable_system_alarm_service_default"\n            android:exported="false" />\n        <service\n            android:name="androidx.work.impl.background.systemjob.SystemJobService"\n            android:directBootAware="false"\n            android:enabled="@bool/enable_system_job_service_default"\n            android:exported="true"\n            android:permission="android.permission.BIND_JOB_SERVICE" />\n        <service\n            android:name="androidx.work.impl.foreground.SystemForegroundService"\n            android:directBootAware="false"\n            android:enabled="@bool/enable_system_foreground_service_default"\n            android:exported="false" />\n\n        <receiver\n            android:name="androidx.work.impl.utils.ForceStopRunnable$BroadcastReceiver"\n            android:directBootAware="false"\n            android:enabled="true"\n            android:exported="false" />\n        <receiver\n            android:name="androidx.work.impl.background.systemalarm.ConstraintProxy$BatteryChargingProxy"\n            android:directBootAware="false"\n            android:enabled="false"\n            android:exported="false" >\n            <intent-filter>\n                <action android:name="android.intent.action.ACTION_POWER_CONNECTED" />\n                <action android:name="android.intent.action.ACTION_POWER_DISCONNECTED" />\n            </intent-filter>\n        </receiver>\n        <receiver\n            android:name="androidx.work.impl.background.systemalarm.ConstraintProxy$BatteryNotLowProxy"\n            android:directBootAware="false"\n            android:enabled="false"\n            android:exported="false" >\n            <intent-filter>\n                <action android:name="android.intent.action.BATTERY_OKAY" />\n                <action android:name="android.intent.action.BATTERY_LOW" />\n            </intent-filter>\n        </receiver>\n        <receiver\n            android:name="androidx.work.impl.background.systemalarm.ConstraintProxy$StorageNotLowProxy"\n            android:directBootAware="false"\n            android:enabled="false"\n            android:exported="false" >\n            <intent-filter>\n                <action android:name="android.intent.action.DEVICE_STORAGE_LOW" />\n                <action android:name="android.intent.action.DEVICE_STORAGE_OK" />\n            </intent-filter>\n        </receiver>\n        <receiver\n            android:name="androidx.work.impl.background.systemalarm.ConstraintProxy$NetworkStateProxy"\n            android:directBootAware="false"\n            android:enabled="false"\n            android:exported="false" >\n            <intent-filter>\n                <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />\n            </intent-filter>\n        </receiver>\n        <receiver\n            android:name="androidx.work.impl.background.systemalarm.RescheduleReceiver"\n            android:directBootAware="false"\n            android:enabled="false"\n            android:exported="false" >\n            <intent-filter>\n                <action android:name="android.intent.action.BOOT_COMPLETED" />\n                <action android:name="android.intent.action.TIME_SET" />\n                <action android:name="android.intent.action.TIMEZONE_CHANGED" />\n            </intent-filter>\n        </receiver>\n        <receiver\n            android:name="androidx.work.impl.background.systemalarm.ConstraintProxyUpdateReceiver"\n            android:directBootAware="false"\n            android:enabled="@bool/enable_system_alarm_service_default"\n            android:exported="false" >\n            <intent-filter>\n                <action android:name="androidx.work.impl.background.systemalarm.UpdateProxies" />\n            </intent-filter>\n        </receiver>\n        <receiver\n            android:name="androidx.work.impl.diagnostics.DiagnosticsReceiver"\n            android:directBootAware="false"\n            android:enabled="true"\n            android:exported="true"\n            android:permission="android.permission.DUMP" >\n            <intent-filter>\n                <action android:name="androidx.work.diagnostics.REQUEST_DIAGNOSTICS" />\n            </intent-filter>\n        </receiver>\n\n        \x3c!-- com.google.android.datatransport --\x3e\n        <service\n            android:name="com.google.android.datatransport.runtime.backends.TransportBackendDiscovery"\n            android:exported="false" >\n            <meta-data\n                android:name="backend:com.google.android.datatransport.cct.CctBackendFactory"\n                android:value="cct" />\n        </service>\n        <service\n            android:name="com.google.android.datatransport.runtime.scheduling.jobscheduling.JobInfoSchedulerService"\n            android:exported="false"\n            android:permission="android.permission.BIND_JOB_SERVICE" >\n        </service>\n\n        <receiver\n            android:name="com.google.android.datatransport.runtime.scheduling.jobscheduling.AlarmManagerSchedulerBroadcastReceiver"\n            android:exported="false" />\n\n        <service\n            android:name="androidx.room.MultiInstanceInvalidationService"\n            android:directBootAware="true"\n            android:exported="false" />\n')),Object(a.b)("p",null,"For more information see the detail in the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"onesignal#manifest-additions"}),"Manifest Additions")," section."))}s.isMDXComponent=!0},854:function(e,n,i){"use strict";i.d(n,"a",(function(){return m})),i.d(n,"b",(function(){return g}));var r=i(0),a=i.n(r);function o(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function t(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,r)}return i}function d(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?t(Object(i),!0).forEach((function(n){o(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):t(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function c(e,n){if(null==e)return{};var i,r,a=function(e,n){if(null==e)return{};var i,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)i=o[r],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)i=o[r],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=a.a.createContext({}),l=function(e){var n=a.a.useContext(s),i=n;return e&&(i="function"==typeof e?e(n):d(d({},n),e)),i},m=function(e){var n=l(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var i=e.components,r=e.mdxType,o=e.originalType,t=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=l(i),b=r,g=m["".concat(t,".").concat(b)]||m[b]||p[b]||o;return i?a.a.createElement(g,d(d({ref:n},s),{},{components:i})):a.a.createElement(g,d({ref:n},s))}));function g(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=i.length,t=new Array(o);t[0]=b;var d={};for(var c in n)hasOwnProperty.call(n,c)&&(d[c]=n[c]);d.originalType=e,d.mdxType="string"==typeof e?e:r,t[1]=d;for(var s=2;s<o;s++)t[s]=i[s];return a.a.createElement.apply(null,t)}return a.a.createElement.apply(null,i)}b.displayName="MDXCreateElement"}}]);