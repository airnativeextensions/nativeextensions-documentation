"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[77687],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return h}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=l(r),h=n,v=d["".concat(c,".").concat(h)]||d[h]||p[h]||i;return r?a.createElement(v,s(s({ref:t},u),{},{components:r})):a.createElement(v,s({ref:t},u))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var l=2;l<i;l++)s[l]=r[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},86026:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var a=r(83117),n=r(80102),i=(r(67294),r(3905)),s=["components"],o={title:"Peripheral Manager",sidebar_label:"Peripheral Manager"},c=void 0,l={unversionedId:"bluetoothle/peripheral-manager",id:"bluetoothle/peripheral-manager",title:"Peripheral Manager",description:"Acting as a Peripheral",source:"@site/docs/bluetoothle/peripheral-manager.md",sourceDirName:"bluetoothle",slug:"/bluetoothle/peripheral-manager",permalink:"/docs/bluetoothle/peripheral-manager",draft:!1,tags:[],version:"current",frontMatter:{title:"Peripheral Manager",sidebar_label:"Peripheral Manager"},sidebar:"bluetoothle",previous:{title:"Central Manager",permalink:"/docs/bluetoothle/central-manager"},next:{title:"Migrating to AndroidX",permalink:"/docs/bluetoothle/migrating-to-androidx"}},u={},p=[{value:"Acting as a Peripheral",id:"acting-as-a-peripheral",level:2},{value:"Set Up Services and Characteristics",id:"set-up-services-and-characteristics",level:3},{value:"Publish Services and Characteristics",id:"publish-services-and-characteristics",level:3},{value:"Advertise Services",id:"advertise-services",level:3},{value:"Read and Write Requests",id:"read-and-write-requests",level:3},{value:"Update Subscribed Centrals",id:"update-subscribed-centrals",level:3}],d={toc:p};function h(e){var t=e.components,r=(0,n.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"acting-as-a-peripheral"},"Acting as a Peripheral"),(0,i.kt)("p",null,"In the last section, you learned how to perform the most common types of Bluetooth\nlow energy tasks from the central side. Here we will go through how to perform the\ncommon Bluetooth low energy tasks from the peripheral side. The code-based examples\nthat follow will assist you in developing your app to implement the peripheral role\non your local device. Specifically, you will learn how to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#set-up-services-and-characteristics"},"Set Up Services and Characteristics")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#publish-services-and-characteristics"},"Publish Services and Characteristics")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#advertise-services"},"Advertise Services")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#read-and-write-requests"},"Read and Write Requests")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#update-subscribed-centrals"},"Update Subscribed Centrals"))),(0,i.kt)("h3",{id:"set-up-services-and-characteristics"},"Set Up Services and Characteristics"),(0,i.kt)("p",null,"The first step is to create an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"Service"),"'s, each with an array of available\n",(0,i.kt)("inlineCode",{parentName:"p"},"Characteristic"),"'s. You can consider a ",(0,i.kt)("inlineCode",{parentName:"p"},"Service")," as a group of data values or\n",(0,i.kt)("inlineCode",{parentName:"p"},"Characteristic"),"s. Each ",(0,i.kt)("inlineCode",{parentName:"p"},"Service")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Characteristic")," is uniquely defined by a ",(0,i.kt)("inlineCode",{parentName:"p"},"UUID"),"."),(0,i.kt)("p",null,"Though not all UUIDs that identify a service or characteristic are predefined by the\nBluetooth Special Interest Group (SIG), Bluetooth SIG has defined and published a\nnumber of commonly used UUIDs that have been shortened to 16-bits for convenience.\nFor example, Bluetooth SIG has predefined the 16-bit UUID that identifies a heart\nrate service as 180D. This UUID is shortened from its equivalent 128-bit UUID,\n0000180D-0000-1000-8000-00805F9B34FB, which is based on the Bluetooth base UUID\nthat is defined in the Bluetooth 4.0 specification, Volume 3, Part F, Section 3.2.1.\nWhen you use a predefined 16-bit UUID, the extension prefills the rest of 128-bit\nUUID with the Bluetooth base UUID"),(0,i.kt)("p",null,"You may have services and characteristics that are not identified by predefined\nBluetooth UUIDs. If you do, you need to generate your own 128-bit UUIDs to identify them."),(0,i.kt)("p",null,"Use the command-line utility uuidgen to easily generate 128-bit UUIDs. To get started,\nopen a window in Terminal. Next, for each service and characteristic that you need\nto identify with a UUID, type uuidgen on the command line to receive a unique 128-bit\nvalue in the form of an ASCII string that is punctuated by hyphens,\nas in the following example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ uuidgen\n90753043-6E40-4590-AFF6-5B48F6412E2F\n")),(0,i.kt)("p",null,"You can then use this UUID to create your own Service and Characteristic objects."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'var characteristic:Characteristic = new Characteristic( "E95E787B-9C88-4A8D-9A33-BA63EBC4A3A3" );\n                        \nvar service:Service = new Service();\nservice.uuid = "90753043-6E40-4590-AFF6-5B48F6412E2F";\nservice.characteristics.push( characteristic );\n')),(0,i.kt)("h3",{id:"publish-services-and-characteristics"},"Publish Services and Characteristics"),(0,i.kt)("p",null,"Once you have created your ",(0,i.kt)("inlineCode",{parentName:"p"},"Service"),"'s and ",(0,i.kt)("inlineCode",{parentName:"p"},"Characteristic"),"'s you will then need to\npublish these services to add them to the device's database of services and\ncharacteristics. This task involves calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"addService")," function of the ",(0,i.kt)("inlineCode",{parentName:"p"},"peripheralManager"),".\nAt this time it is also important to note the ",(0,i.kt)("inlineCode",{parentName:"p"},"removeAllServices")," function which can\nbe used to ensure that you don't add duplicate services at each launch of your application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'var characteristic:Characteristic = new Characteristic( "E95E787B-9C88-4A8D-9A33-BA63EBC4A3A3" );\n                        \nvar service:Service = new Service();\nservice.uuid = "90753043-6E40-4590-AFF6-5B48F6412E2F";\nservice.characteristics.push( characteristic );\n\nBluetoothLE.service.peripheralManager.addEventListener( PeripheralManagerEvent.SERVICE_ADD, peripheral_serviceAddHandler );\nBluetoothLE.service.peripheralManager.addEventListener( PeripheralManagerEvent.SERVICE_ADD_ERROR, peripheral_serviceAddErrorHandler );\n    \n// Remove all to prevent duplicate services (this only removes services added by this application)\nBluetoothLE.service.peripheralManager.removeAllServices();\nBluetoothLE.service.peripheralManager.addService( service );\n')),(0,i.kt)("p",null,"You will receive a success or failure event from the addService call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function peripheral_serviceAddHandler( event:PeripheralManagerEvent ):void\n{\n    trace( "peripheral manager service added" );\n}\n\nprivate function peripheral_serviceAddErrorHandler( event:PeripheralManagerEvent ):void\n{\n    trace( "peripheral manager service add error" );\n}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: After you publish a service and any of its associated characteristics to\nthe peripheral's database, the service is cached and you can no longer make\nchanges to it.")),(0,i.kt)("h3",{id:"advertise-services"},"Advertise Services"),(0,i.kt)("p",null,"When you have published your services and characteristics to your device's database\nof services and characteristics, you are ready to start advertising some of them\nto any centrals that may be listening. To start advertising call the\n",(0,i.kt)("inlineCode",{parentName:"p"},"startAdvertising")," function on the ",(0,i.kt)("inlineCode",{parentName:"p"},"peripheralManager"),". The first parameter is a\nlocal name to advertise for the device and the second parameter is a vector array\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"Service")," objects to advertise."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'var service:Service = ...; // A previously created and published service\n\nBluetoothLE.service.peripheralManager.addEventListener( PeripheralManagerEvent.START_ADVERTISING, peripheral_startAdvertisingHandler );\n\nBluetoothLE.service.peripheralManager.startAdvertising( "distriqt", new <Service>[ service ] );\n')),(0,i.kt)("p",null,"When you start advertising some of the data on your local peripheral, the peripheral\nmanager dispatches the ",(0,i.kt)("inlineCode",{parentName:"p"},"PeripheralManagerEvent.START_ADVERTISING")," event. Advertising\nbehavior is also affected when your app is in the background. You must make sure you\nhave correctly added the application descriptor additions to have permission to\nadvertise when in the background."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function peripheral_startAdvertisingHandler( event:PeripheralManagerEvent ):void\n{\n    trace( "peripheral manager start advertising" );\n}\n')),(0,i.kt)("p",null,"Once you begin advertising data, remote centrals can discover and initiate a connection with you."),(0,i.kt)("h3",{id:"read-and-write-requests"},"Read and Write Requests"),(0,i.kt)("p",null,"After you are connected to one or more remote centrals, you may begin receiving read\nor write requests from them. When you do, be sure to respond to those requests in an\nappropriate manner. The following examples describe how to handle such requests."),(0,i.kt)("p",null,"When a connected central requests to read the value of one of your characteristics,\nthe peripheral manager dispatches the ",(0,i.kt)("inlineCode",{parentName:"p"},"RequestEvent.READ")," event. The ",(0,i.kt)("inlineCode",{parentName:"p"},"RequestEvent")," has\na number of properties that you can use to fulfill the request."),(0,i.kt)("p",null,"When you receive a read request you should make sure that the characteristic in\nyour device's database matches the one that the remote central specified in the\noriginal read request. If the characteristics match the next step is to make sure\nthat the read request isn't asking to read from an index position that is outside\nthe bounds of your characteristic's value. If the offset is invalid you should\nrespond with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Request.INVALID_OFFSET")," flag as in the example below."),(0,i.kt)("p",null,"Assuming the request's offset is verified you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"respondToRequest")," function\non the ",(0,i.kt)("inlineCode",{parentName:"p"},"peripheralManager")," to send the data to the central. You should respect the\nread offset and send the ",(0,i.kt)("inlineCode",{parentName:"p"},"Request.SUCCESS")," flag and the requested data, as in the\nexample below."),(0,i.kt)("p",null,"Firstly add a listener for read requests:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"var characteristic:Characteristic = ...; // Some characteristic you have created and added to a published service\n\nBluetoothLE.service.peripheralManager.addEventListener( RequestEvent.READ, peripheral_readRequestHandler );\n")),(0,i.kt)("p",null,"Then process these read requests when received:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function peripheral_readRequestHandler( event:RequestEvent ):void\n{\n    //\n    //  Read requests will only have one object in the requests event\n    \n    var request:Request = event.requests[0];\n    \n    trace( "peripheral manager: read request: " + request.characteristic.uuid );\n\n    //\n    //  Handle the read request by first checking the UUID and then responding with the requested data.\n    //  You need to make sure you correctly handle the offset variable as illustrated below\n    \n    if (request.characteristic.uuid == characteristic.uuid)\n    {\n        if (request.offset > characteristic.value.length)\n        {\n            BluetoothLE.service.peripheralManager.respondToRequest( request, Request.INVALID_OFFSET );\n        }\n        else\n        {\n            characteristic.value.position = 0;\n            \n            var data:ByteArray = new ByteArray();\n            data.writeBytes( characteristic.value, request.offset, (characteristic.value.length - request.offset) );\n            \n            BluetoothLE.service.peripheralManager.respondToRequest( request, Request.SUCCESS, data );\n        }\n    }\n}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: If the characteristics' UUIDs do not match, or if the read can not be\ncompleted for any other reason, you should not attempt to fulfill the request.\nInstead, you should call the ",(0,i.kt)("inlineCode",{parentName:"p"},"respondToRequest")," function immediately with the\nappropriate result flag from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Request")," class.")),(0,i.kt)("p",null,"Handling write requests from a connected central is also straightforward.\nWhen a connected central sends a request to write the value of one or more\nof your characteristics, the peripheral manager dispatches the\n",(0,i.kt)("inlineCode",{parentName:"p"},"RequestEvent.WRITE")," event. With a write event the event may contain more\nthan one requests and you must process each request and call\n",(0,i.kt)("inlineCode",{parentName:"p"},"respondToRequest")," ",(0,i.kt)("strong",{parentName:"p"},"only once"),". Be sure to take into account the request's\noffset property when writing the value of your characteristic"),(0,i.kt)("p",null,"Add the write request listener:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"var characteristic:Characteristic = ...; // Some characteristic you have created and added to a published service\n\nBluetoothLE.service.peripheralManager.addEventListener( RequestEvent.WRITE, peripheral_writeRequestHandler );\n")),(0,i.kt)("p",null,"Then handle the request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function peripheral_writeRequestHandler( event:RequestEvent ):void\n{\n    trace( "peripheral manager: write request: " + event.requests.length );\n\n    //\n    //  Write requests may have several requests and you should process each one\n    //  before calling respondToRequest. You only need to call respondToRequest once\n    //  with the first request in the array\n    for each (var request:Request in event.requests)\n    {\n        trace( "peripheral manager: write request: " + request.characteristic.uuid +" :: [" + request.offset +"] "+ request.value.readUTFBytes( request.value.length ) );\n        \n        if (request.characteristic.uuid == characteristic.uuid)\n        {\n            if (request.offset + request.value.length > MAX_VALUE_LENGTH)\n            {\n                BluetoothLE.service.peripheralManager.respondToRequest( request, Request.INVALID_OFFSET );\n                return;\n            }\n            else\n            {\n                if (characteristic.value == null) characteristic.value = new ByteArray();\n                characteristic.value.position = 0;\n                characteristic.value.writeBytes( request.value, request.offset );\n            }\n        }\n    }\n    \n    BluetoothLE.service.peripheralManager.respondToRequest( event.requests[0], Request.SUCCESS );\n}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"You need to call ",(0,i.kt)("inlineCode",{parentName:"p"},"respondToRequest")," ",(0,i.kt)("strong",{parentName:"p"},"exactly once")," per dispatched ",(0,i.kt)("inlineCode",{parentName:"p"},"RequestEvent"),"\nno matter how many requests the event contains.")),(0,i.kt)("h3",{id:"update-subscribed-centrals"},"Update Subscribed Centrals"),(0,i.kt)("p",null,"Often, connected centrals will subscribe to one or more of your characteristic\nvalues. When they do, you are responsible for sending them notifications when\nthe value of characteristic they subscribed to changes."),(0,i.kt)("p",null,"When a connected central subscribes to the value of one of your characteristics,\nthe peripheral manager dispatches the ",(0,i.kt)("inlineCode",{parentName:"p"},"CentralEvent.SUBSCRIBE")," event and\nsimilarly the ",(0,i.kt)("inlineCode",{parentName:"p"},"CentralEvent.UNSUBSCRIBE")," when the central unsubscribes.\nYou should use these events as a cue to start/stop sending the updated values\nto centrals."),(0,i.kt)("p",null,"Make sure you are listening for the events:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"var characteristic:Characteristic = ...; // Some characteristic you have created and added to a published service\n\nBluetoothLE.service.peripheralManager.addEventListener( CentralEvent.SUBSCRIBE, peripheral_central_subscribeHandler );\nBluetoothLE.service.peripheralManager.addEventListener( CentralEvent.UNSUBSCRIBE, peripheral_central_unsubscribeHandler );\n")),(0,i.kt)("p",null,"Then process the subscription and unsubscription:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function peripheral_central_subscribeHandler( event:CentralEvent ):void\n{\n    trace( "peripheral manager: central subscribe: " + event.central.uuid  );\n    \n    // You should use this to track whether you should be periodically sending updates\n    // For the moment we\'ll just show as an example sending an update immediately\n    \n    var value:ByteArray = new ByteArray();\n    value.writeUTFBytes( "some_updated_value" );\n    \n    BluetoothLE.service.peripheralManager.updateValue( characteristic, value );\n}\n\nprivate function peripheral_central_unsubscribeHandler( event:CentralEvent ):void\n{\n    trace( "peripheral manager: central unsubscribe: " + event.central.uuid  );\n    // If there are no other centrals subscribed you can stop periodically sending updates\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"updateValue")," function returns a Boolean value that indicates whether\nthe update was successfully sent to the subscribed centrals. If the underlying\nqueue that is used to transmit the updated value is full, the method returns\n",(0,i.kt)("inlineCode",{parentName:"p"},"false")," and you should wait and try again later."))}h.isMDXComponent=!0}}]);