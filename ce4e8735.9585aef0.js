(window.webpackJsonp=window.webpackJsonp||[]).push([[608],{663:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return p}));var i=n(2),a=n(6),r=(n(0),n(821)),c={title:"Turn Based Multiplayer - Invitations",sidebar_label:"Turn Based Multiplayer - Invitations"},l={unversionedId:"gameservices/turn-based-multiplayer---invitations",id:"gameservices/turn-based-multiplayer---invitations",isDocsHomePage:!1,title:"Turn Based Multiplayer - Invitations",description:"Invitations are received when the player is invited to play a multiplayer game.",source:"@site/docs/gameservices/turn-based-multiplayer---invitations.md",slug:"/gameservices/turn-based-multiplayer---invitations",permalink:"/docs/gameservices/turn-based-multiplayer---invitations",version:"current",sidebar_label:"Turn Based Multiplayer - Invitations",sidebar:"gameservices",previous:{title:"Turn Based Multiplayer - Implementation",permalink:"/docs/gameservices/turn-based-multiplayer---implementation"},next:{title:"Quests and Events",permalink:"/docs/gameservices/quests-and-events"}},o=[{value:"Loading invitations",id:"loading-invitations",children:[]},{value:"Receiving Invites",id:"receiving-invites",children:[]},{value:"Accepting Invites",id:"accepting-invites",children:[{value:"Turn Based Invites",id:"turn-based-invites",children:[]}]},{value:"Decline Invites",id:"decline-invites",children:[]}],s={rightToc:o};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Invitations are received when the player is invited to play a multiplayer game. "),Object(r.b)("p",null,"As invitations are not specific to turn based multiplayer you will mostly be dealing\nwith the main GameServices instance (",Object(r.b)("inlineCode",{parentName:"p"},"GameServices.service"),") here."),Object(r.b)("p",null,"Invitations can be for either real-time or turn-based multiplayer games.\n(Currently only turn-based matches are supported.)"),Object(r.b)("p",null,"Invitations are supported by Google Play Services only.\nInvitations on Game Center are handled through the Game Center UI."),Object(r.b)("h2",{id:"loading-invitations"},"Loading invitations"),Object(r.b)("p",null,"You can load all the invitations that a player has received by calling ",Object(r.b)("inlineCode",{parentName:"p"},"loadInvites"),".   "),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-actionscript"}),"GameServices.service.loadInvites();\n")),Object(r.b)("p",null,"This call will dispatch one of the following events defined in the ",Object(r.b)("inlineCode",{parentName:"p"},"com.distriqt.extension.gameservices.events.MultiplayerEvent")," class:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"MultiplayerEvent.LOADINVITES_SUCCESS"),": When successful and the invitations are available for processing"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"MultiplayerEvent.LOADINVITES_FAILED"),": If loading the invitations failed"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"MultiplayerEvent.LOADINVITES_NOT_SUPPORTED"),": This is dispatched when the current service doesn't support loading of invitations. You should treat this as a success and display an alternative interface to your user")),Object(r.b)("p",null,"On success you will have an array of ",Object(r.b)("inlineCode",{parentName:"p"},"Invitation")," objects (",Object(r.b)("inlineCode",{parentName:"p"},"com.distriqt.extension.gameservices.multiplayer.Invitation"),"):"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-actionscript"}),'private function gameServices_loadInvitesSuccessHandler( event:MultiplayerEvent ):void\n{\n    for each (var invitation:Invitation in event.data)\n    {\n        trace( "INVITE: ["+invitation.id+"] from:"+invitation.inviter.displayName );\n    }\n}\n')),Object(r.b)("p",null,"You can handle these invites in your UI as you require and accept or deny them\ndepending on your users input."),Object(r.b)("h2",{id:"receiving-invites"},"Receiving Invites"),Object(r.b)("p",null,"While you application is running you can actively receive invitations by listening for the\n",Object(r.b)("inlineCode",{parentName:"p"},"MultiplayerEvent.INVITATION_RECEIVED")," event. This is dispatched whenever an invitation\nis received by the game service."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-actionscript"}),"GameServices.service.addEventListener( MultiplayerEvent.INVITATION_RECEIVED, invitationReceivedHandler );\n")),Object(r.b)("p",null,"You should handle this similarly to the load invitations:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-actionscript"}),'private function invitationReceivedHandler( event:MultiplayerEvent ):void \n{\n    var invitation:Invitation = Invitation(event.data);\n\n    trace( "INVITE: ["+invitation.id+"] from:"+invitation.inviter.displayName );\n}\n')),Object(r.b)("h2",{id:"accepting-invites"},"Accepting Invites"),Object(r.b)("p",null,"Accepting an invitation must be done through the correct handler."),Object(r.b)("p",null,"You can ascertain the type of the invitation through the ",Object(r.b)("inlineCode",{parentName:"p"},"invitation.type")," variable\nwhich can be either ",Object(r.b)("inlineCode",{parentName:"p"},"INVITATION_TYPE_REAL_TIME")," or ",Object(r.b)("inlineCode",{parentName:"p"},"INVITATION_TYPE_TURN_BASED"),"."),Object(r.b)("h3",{id:"turn-based-invites"},"Turn Based Invites"),Object(r.b)("p",null,"Accepting a turn based match uses the ",Object(r.b)("inlineCode",{parentName:"p"},"GameServices.service.turnBasedMultiplayer.acceptInvitation"),"\nfunction which will accept an available invitation to start a match."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-actionscript"}),"GameServices.service.turnBasedMultiplayer.acceptInvitation( invite );\n")),Object(r.b)("p",null,"If successful the player will receive a new match object to play this game."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"TurnBasedMatchEvent.ACCEPTINVITATION_SUCCESS"),": If successful the event will contain the match object"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"TurnBasedMatchEvent.ACCEPTINVITATION_FAILED"),": Dispatched if there was an error while accepting an invitation")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-actionscript"}),"GameServices.service.turnBasedMultiplayer.addEventListener( TurnBasedMatchEvent.ACCEPTINVITATION_SUCCESS, acceptInvitationSuccessHandler );\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-actionscript"}),"private function acceptInvitationSuccessHandler( event:TurnBasedMatchEvent ):void \n{\n    // event.match will contain the match object\n}\n")),Object(r.b)("p",null,"You can now process the match object: ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"turn-based-multiplayer---implementation"}),"Add Turn-based Multplayer Support")),Object(r.b)("h2",{id:"decline-invites"},"Decline Invites"),Object(r.b)("p",null,"If your player doesn't wish to accept the invite and play the match, they can\ndecline the invitation using the ",Object(r.b)("inlineCode",{parentName:"p"},"declineInvitation")," function."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-actionscript"}),"GameServices.service.turnBasedMultiplayer.declineInvitation( invite );\n")))}p.isMDXComponent=!0},821:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},v=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=p(n),v=i,d=u["".concat(c,".").concat(v)]||u[v]||b[v]||r;return n?a.a.createElement(d,l(l({ref:t},s),{},{components:n})):a.a.createElement(d,l({ref:t},s))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,c=new Array(r);c[0]=v;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,c[1]=l;for(var s=2;s<r;s++)c[s]=n[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}v.displayName="MDXCreateElement"}}]);