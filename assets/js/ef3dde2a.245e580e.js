(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[28793],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,h=u["".concat(l,".").concat(d)]||u[d]||f[d]||r;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},56503:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return o},toc:function(){return l},default:function(){return p}});var a=n(22122),i=n(19756),r=(n(67294),n(3905)),s={title:"Database - Offline",sidebar_label:"Offline"},o={unversionedId:"firebase/database/offline",id:"firebase/database/offline",isDocsHomePage:!1,title:"Database - Offline",description:"Write data offline",source:"@site/docs/firebase/database/offline.md",sourceDirName:"firebase/database",slug:"/firebase/database/offline",permalink:"/docs/firebase/database/offline",version:"current",sidebar_label:"Offline",frontMatter:{title:"Database - Offline",sidebar_label:"Offline"},sidebar:"firebase",previous:{title:"Database - Lists",permalink:"/docs/firebase/database/lists"},next:{title:"Database - Disconnect",permalink:"/docs/firebase/database/disconnect"}},l=[{value:"Write data offline",id:"write-data-offline",children:[]},{value:"Enabling Offline Capabilities",id:"enabling-offline-capabilities",children:[{value:"Keeping Data Fresh",id:"keeping-data-fresh",children:[]}]}],c={toc:l};function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"write-data-offline"},"Write data offline"),(0,r.kt)("p",null,"If a client loses its network connection, your app will continue functioning correctly."),(0,r.kt)("p",null,'Every client connected to a Firebase database maintains its own internal version of any\nactive data. When data is written, it\'s written to this local version first. The Firebase\nclient then synchronizes that data with the remote database servers and with other clients\non a "best-effort" basis.'),(0,r.kt)("p",null,"As a result, all writes to the database trigger local events immediately, before any data\nis written to the server. This means your app remains responsive regardless of network\nlatency or connectivity."),(0,r.kt)("p",null,"Once connectivity is reestablished, your app receives the appropriate set of events so\nthat the client syncs with the current server state, without having to write any custom code."),(0,r.kt)("h2",{id:"enabling-offline-capabilities"},"Enabling Offline Capabilities"),(0,r.kt)("p",null,"In addition, Firebase provides tools for persisting data locally, managing presence,\nand handling latency."),(0,r.kt)("p",null,"Firebase apps automatically handle temporary network interruptions. Cached data is\navailable while offline and Firebase resends any writes when network connectivity is\nrestored."),(0,r.kt)("p",null,"When you enable disk persistence, your app writes the data locally to the device so\nyour app can maintain state while offline, even if the user or operating system restarts\nthe app."),(0,r.kt)("p",null,"You can enable disk persistence with just one line of code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"FirebaseDatabase.service.setPersistenceEnabled( true );\n")),(0,r.kt)("p",null,"By enabling persistence, any data that the Firebase Realtime Database client would\nsync while online persists to disk and is available offline, even when the user or\noperating system restarts the app. This means your app works as it would online by\nusing the local data stored in the cache. Listener callbacks will continue to fire\nfor local updates."),(0,r.kt)("p",null,"The Firebase Realtime Database client automatically keeps a queue of all write\noperations that are performed while your app is offline. When persistence is\nenabled, this queue is also persisted to disk so all of your writes are available\nwhen the user or operating system restarts the app. When the app regains connectivity,\nall of the operations are sent to the Firebase Realtime Database server."),(0,r.kt)("p",null,"If your app uses Firebase Authentication, the Firebase Realtime Database client\npersists the user's authentication token across app restarts. If the auth token\nexpires while your app is offline, the client pauses write operations until your\napp re-authenticates the user, otherwise the write operations might fail due to\nsecurity rules."),(0,r.kt)("h3",{id:"keeping-data-fresh"},"Keeping Data Fresh"),(0,r.kt)("p",null,"The Firebase Realtime Database synchronizes and stores a local copy of the data\nfor active listeners. In addition, you can keep specific locations in sync."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'var ref:DatabaseReference = FirebaseDatabase.service.getReference("scores");\nref.keepSynced(true);\n')),(0,r.kt)("p",null,"The Firebase Realtime Database client automatically downloads the data at these\nlocations and keeps it in sync even if the reference has no active listeners.\nYou can turn synchronization back off with the following line of code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"ref.keepSynced(false);\n")),(0,r.kt)("p",null,"By default, 10MB of previously synced data is cached. This should be enough for\nmost applications. If the cache outgrows its configured size, the Firebase Realtime\nDatabase purges data that has been used least recently. Data that is kept in sync\nis not purged from the cache."))}p.isMDXComponent=!0}}]);