(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[61957],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return h}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),h=o,f=p["".concat(c,".").concat(h)]||p[h]||u[h]||i;return n?r.createElement(f,a(a({ref:t},l),{},{components:n})):r.createElement(f,a({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},53597:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c},default:function(){return l}});var r=n(22122),o=n(19756),i=(n(67294),n(3905)),a={title:"Add the Extension",sidebar_label:"Add the Extension"},s={unversionedId:"rootchecker/add-the-extension",id:"rootchecker/add-the-extension",isDocsHomePage:!1,title:"Add the Extension",description:"First step is always to add the extension to your development environment.",source:"@site/docs/rootchecker/add-the-extension.md",sourceDirName:"rootchecker",slug:"/rootchecker/add-the-extension",permalink:"/docs/rootchecker/add-the-extension",version:"current",sidebar_label:"Add the Extension",frontMatter:{title:"Add the Extension",sidebar_label:"Add the Extension"},sidebar:"rootchecker",previous:{title:"Root Checker",permalink:"/docs/rootchecker/"},next:{title:"Root Check",permalink:"/docs/rootchecker/root-check"}},c=[{value:"Required ANEs",id:"required-anes",children:[{value:"Core ANE",id:"core-ane",children:[]}]},{value:"Android",id:"android",children:[]},{value:"iOS",id:"ios",children:[{value:"Info Additions",id:"info-additions",children:[]}]},{value:"Checking for Support",id:"checking-for-support",children:[]}],d={toc:c};function l(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"First step is always to add the extension to your development environment.\nTo do this use the tutorial located ",(0,i.kt)("a",{parentName:"p",href:"/docs/tutorials/getting-started"},"here"),"."),(0,i.kt)("h2",{id:"required-anes"},"Required ANEs"),(0,i.kt)("h3",{id:"core-ane"},"Core ANE"),(0,i.kt)("p",null,"The Core ANE is required by this ANE. You must include and package this extension in your application."),(0,i.kt)("p",null,"The Core ANE doesn't provide any functionality in itself but provides support libraries and frameworks used by our extensions.\nIt also includes some centralised code for some common actions that can cause issues if they are implemented in each individual extension."),(0,i.kt)("p",null,"You can access this extension here: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/distriqt/ANE-Core"},"https://github.com/distriqt/ANE-Core"),"."),(0,i.kt)("h2",{id:"android"},"Android"),(0,i.kt)("p",null,"Nothing specific is required for Android."),(0,i.kt)("h2",{id:"ios"},"iOS"),(0,i.kt)("p",null,"For iOS, you will need to add ",(0,i.kt)("inlineCode",{parentName:"p"},"cydia")," to the allowed list of query schemes."),(0,i.kt)("h3",{id:"info-additions"},"Info Additions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<key>LSApplicationQueriesSchemes</key>\n<array>\n    <string>cydia</string>\n</array>\n")),(0,i.kt)("p",null,"i.e."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<iPhone>\n    <InfoAdditions><![CDATA[\n        <key>UIDeviceFamily</key>\n        <array>\n            <string>1</string>\n            <string>2</string>\n        </array>\n\n        <key>LSApplicationQueriesSchemes</key>\n        <array>\n            <string>cydia</string>\n        </array>\n\n    ]]></InfoAdditions>\n    <requestedDisplayResolution>high</requestedDisplayResolution>\n    <Entitlements>\n        <![CDATA[\n        ]]>\n    </Entitlements>\n</iPhone>\n")),(0,i.kt)("h2",{id:"checking-for-support"},"Checking for Support"),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isSupported")," flag to determine if this extension is supported on the current platform and device."),(0,i.kt)("p",null,"This allows you to react to whether the functionality is available on the device and provide an alternative solution if not."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"if (RootChecker.isSupported)\n{\n    // Functionality here\n}\n")))}l.isMDXComponent=!0}}]);