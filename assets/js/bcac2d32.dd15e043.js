"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[8862],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),l=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},v=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),v=l(n),d=r,f=v["".concat(s,".").concat(d)]||v[d]||u[d]||o;return n?i.createElement(f,a(a({ref:t},p),{},{components:n})):i.createElement(f,a({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=v;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var l=2;l<o;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}v.displayName="MDXCreateElement"},2097:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var i=n(83117),r=n(80102),o=(n(67294),n(3905)),a=["components"],c={title:"Orientation Events",sidebar_label:"Orientation Events"},s=void 0,l={unversionedId:"application/device-information/orientation-events",id:"application/device-information/orientation-events",title:"Orientation Events",description:"The orientation of the device is sometimes important to applications, irrespective of the orientation of the UI. The DeviceOrientationEvent will give you information about the orientation of the device even if your UI doesn't change.",source:"@site/docs/application/device-information/orientation-events.md",sourceDirName:"application/device-information",slug:"/application/device-information/orientation-events",permalink:"/docs/application/device-information/orientation-events",draft:!1,tags:[],version:"current",frontMatter:{title:"Orientation Events",sidebar_label:"Orientation Events"},sidebar:"application",previous:{title:"Operating System",permalink:"/docs/application/device-information/operating-system"},next:{title:"Phone Number",permalink:"/docs/application/device-information/phone-number"}},p={},u=[{value:"Accessing the current orientation",id:"accessing-the-current-orientation",level:2},{value:"Listening for orientation changes",id:"listening-for-orientation-changes",level:2},{value:"Starting orientation events",id:"starting-orientation-events",level:2}],v={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The orientation of the device is sometimes important to applications, irrespective of the orientation of the UI. The ",(0,o.kt)("inlineCode",{parentName:"p"},"DeviceOrientationEvent")," will give you information about the orientation of the device even if your UI doesn't change. "),(0,o.kt)("p",null,"This can be useful in situations when you have locked your UI to an aspect ratio but still want to react to the user rotating their device. "),(0,o.kt)("h2",{id:"accessing-the-current-orientation"},"Accessing the current orientation"),(0,o.kt)("p",null,"You can access the current orientation of the device by checking the ",(0,o.kt)("inlineCode",{parentName:"p"},"deviceOrientation")," flag of the ",(0,o.kt)("inlineCode",{parentName:"p"},"device")," instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"var currentOrientation:String = Application.service.device.deviceOrientation;\n")),(0,o.kt)("p",null,"This will return one of the ",(0,o.kt)("inlineCode",{parentName:"p"},"DeviceOrientation")," constants."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: The ",(0,o.kt)("inlineCode",{parentName:"p"},"DeviceOrientation.UNKNOWN")," orientation will be returned if the device is flat on a desk ie. when there is no distinct orientation of the device.")),(0,o.kt)("h2",{id:"listening-for-orientation-changes"},"Listening for orientation changes"),(0,o.kt)("p",null,"Listening for changes is as simple as adding a listener for the ",(0,o.kt)("inlineCode",{parentName:"p"},"DeviceOrientationEvent.CHANGED")," event."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"Application.service.device.addEventListener( DeviceOrientationEvent.CHANGED, orientationChangedHandler );\n")),(0,o.kt)("p",null,"Then in your event handler you can respond to the orientation change appropriately:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function orientationChangedHandler( event:DeviceOrientationEvent ):void\n{\n    trace( "orientationChangedHandler(): " + event.orientation );\n    switch (event.orientation)\n    {\n        case DeviceOrientation.DEFAULT:\n        case DeviceOrientation.UPSIDE_DOWN:\n        case DeviceOrientation.ROTATED_LEFT:\n        case DeviceOrientation.ROTATED_RIGHT:\n            break;\n    }\n}\n')),(0,o.kt)("h2",{id:"starting-orientation-events"},"Starting orientation events"),(0,o.kt)("p",null,"By default orientation events are not dispatched. This is due to a small amount of monitoring that is\nrequired to detect these changes."),(0,o.kt)("p",null,"To start generating orientation events you must call the ",(0,o.kt)("inlineCode",{parentName:"p"},"startGeneratingDeviceOrientationEvents")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"Application.service.device.startGeneratingDeviceOrientationEvents();\n")),(0,o.kt)("p",null,"Conversely if you wish to stop the events you can call ",(0,o.kt)("inlineCode",{parentName:"p"},"stopGeneratingDeviceOrientationEvents"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"Application.service.device.stopGeneratingDeviceOrientationEvents();\n")))}d.isMDXComponent=!0}}]);