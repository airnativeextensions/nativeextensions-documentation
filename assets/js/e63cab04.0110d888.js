(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[7544],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,h=p["".concat(c,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},47430:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var r=n(22122),o=n(19756),i=(n(67294),n(3905)),a={title:"Silent Switch",sidebar_label:"Silent Switch"},l={unversionedId:"volume/silent-switch",id:"volume/silent-switch",isDocsHomePage:!1,title:"Silent Switch",description:"Currently this is only available for the iOS silent switch. It does not work with the",source:"@site/docs/volume/silent-switch.md",sourceDirName:"volume",slug:"/volume/silent-switch",permalink:"/docs/volume/silent-switch",version:"current",sidebar_label:"Silent Switch",frontMatter:{title:"Silent Switch",sidebar_label:"Silent Switch"},sidebar:"volume",previous:{title:"Streams",permalink:"/docs/volume/streams"},next:{title:"changelog",permalink:"/docs/volume/changelog"}},c=[{value:"Monitor the mute state",id:"monitor-the-mute-state",children:[]},{value:"Most Recent Mute state",id:"most-recent-mute-state",children:[]},{value:"Listening for changes",id:"listening-for-changes",children:[]}],s={toc:c};function u(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Currently this is only available for the iOS silent switch. It does not work with the\nAndroid muted states."),(0,i.kt)("h2",{id:"monitor-the-mute-state"},"Monitor the mute state"),(0,i.kt)("p",null,"In order to be sure that you have the correct mute state registered you must monitor\nthe mute state. Monitoring the mute state periodically starts a process that checks\nwhether mute has been enabled on the device."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"Volume.service.monitorMuteState( true );\n")),(0,i.kt)("p",null,"You can stop this at any time:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"Volume.service.monitorMuteState( false );\n")),(0,i.kt)("h2",{id:"most-recent-mute-state"},"Most Recent Mute state"),(0,i.kt)("p",null,"The most recently detected mute state can be retrieved using the ",(0,i.kt)("inlineCode",{parentName:"p"},"isMuted()")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"var isMuted:Boolean = Volume.service.isMuted();\n")),(0,i.kt)("h2",{id:"listening-for-changes"},"Listening for changes"),(0,i.kt)("p",null,"Once you are monitoring the mute state, change events will be dispatched. You can\nreact in your event handlers as you see fit. There are two events, ",(0,i.kt)("inlineCode",{parentName:"p"},"MUTED")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"UNMUTED"),"\nrepresenting the change to mute and unmuted respectively."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"Volume.service.addEventListener( VolumeEvent.MUTED, mutedHandler );\nVolume.service.addEventListener( VolumeEvent.UNMUTED, unmutedHandler );\n")))}u.isMDXComponent=!0}}]);