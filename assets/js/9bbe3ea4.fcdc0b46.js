"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[43085],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(t),f=r,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||i;return t?a.createElement(m,o(o({ref:n},p),{},{components:t})):a.createElement(m,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[d]="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},8413:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var a=t(87462),r=(t(67294),t(3905));const i={title:"Database - Disconnect",sidebar_label:"Disconnect"},o=void 0,c={unversionedId:"firebase/database/disconnect",id:"firebase/database/disconnect",title:"Database - Disconnect",description:"On Disconnect",source:"@site/docs/firebase/database/disconnect.md",sourceDirName:"firebase/database",slug:"/firebase/database/disconnect",permalink:"/docs/firebase/database/disconnect",draft:!1,tags:[],version:"current",frontMatter:{title:"Database - Disconnect",sidebar_label:"Disconnect"},sidebar:"firebase",previous:{title:"Offline",permalink:"/docs/firebase/database/offline"},next:{title:"Introduction",permalink:"/docs/firebase/firestore/introduction"}},s={},l=[{value:"On Disconnect",id:"on-disconnect",level:2},{value:"Managing Presence",id:"managing-presence",level:3},{value:"How onDisconnect Works",id:"how-ondisconnect-works",level:3},{value:"Cancel",id:"cancel",level:3}],p={toc:l},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"on-disconnect"},"On Disconnect"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"OnDisconnect")," class is used to manage operations that will be run on the server when this client disconnects.\nIt can be used to add or remove data based on a client's connection status.\nIt is very useful in applications looking for 'presence' functionality. "),(0,r.kt)("h3",{id:"managing-presence"},"Managing Presence"),(0,r.kt)("p",null,"In realtime applications it is often useful to detect when clients connect and disconnect.\nFor example, you may want to mark a user as 'offline' when their client disconnects."),(0,r.kt)("p",null,"Firebase Database clients provide simple primitives that you can use to write to the database\nwhen a client disconnects from the Firebase Database servers. These updates occur whether the\nclient disconnects cleanly or not, so you can rely on them to clean up data even if a connection\nis dropped or a client crashes. All write operations, including setting, updating, and removing,\ncan be performed upon a disconnection."),(0,r.kt)("p",null,"Here is a simple example of writing data upon disconnection by using the onDisconnect primitive:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'var presenceRef:DatabaseReference = FirebaseDatabase.service.getReference( "disconnectmessage" );\n\n// Write a string when this client loses connection\npresenceRef.onDisconnect().setValue("I disconnected!");\n')),(0,r.kt)("h3",{id:"how-ondisconnect-works"},"How onDisconnect Works"),(0,r.kt)("p",null,"When you establish an ",(0,r.kt)("inlineCode",{parentName:"p"},"onDisconnect()")," operation, the operation lives on the Firebase Realtime Database server.\nThe server checks security to make sure the user can perform the write event requested, and informs the your\napp if it is invalid. The server then monitors the connection. If at any point the connection times out, or\nis actively closed by the Realtime Database client, the server checks security a second time (to make sure\nthe operation is still valid) and then invokes the event."),(0,r.kt)("h3",{id:"cancel"},"Cancel"),(0,r.kt)("p",null,"An onDisconnect event can also be canceled by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"cancel()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"presenceRef.onDisconnect().cancel();\n")))}u.isMDXComponent=!0}}]);