(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{75:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(6),i=(a(0),a(808)),c={title:"Turn Based Multiplayer - Implementation",sidebar_label:"Turn Based Multiplayer - Implementation"},l={unversionedId:"gameservices/turn-based-multiplayer---implementation",id:"gameservices/turn-based-multiplayer---implementation",isDocsHomePage:!1,title:"Turn Based Multiplayer - Implementation",description:"Adding Turn-based Multiplayer Support",source:"@site/docs/gameservices/turn-based-multiplayer---implementation.md",slug:"/gameservices/turn-based-multiplayer---implementation",permalink:"/docs/gameservices/turn-based-multiplayer---implementation",version:"current",sidebar_label:"Turn Based Multiplayer - Implementation",sidebar:"gameservices",previous:{title:"Turn Based Multiplayer - Implementation Overview",permalink:"/docs/gameservices/turn-based-multiplayer---implementation-overview"},next:{title:"Turn Based Multiplayer - Invitations",permalink:"/docs/gameservices/turn-based-multiplayer---invitations"}},s=[{value:"Creating a match",id:"creating-a-match",children:[{value:"Player Selection",id:"player-selection",children:[]},{value:"Create Match",id:"create-match",children:[]},{value:"Taking the first turn",id:"taking-the-first-turn",children:[]}]},{value:"Loading Matches",id:"loading-matches",children:[]},{value:"Match Data",id:"match-data",children:[]},{value:"Taking Turns",id:"taking-turns",children:[]},{value:"Match Updates",id:"match-updates",children:[]},{value:"Leaving a Match",id:"leaving-a-match",children:[]},{value:"Completing a Match",id:"completing-a-match",children:[]}],o={rightToc:s};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"adding-turn-based-multiplayer-support"},"Adding Turn-based Multiplayer Support"),Object(i.b)("p",null,"Before you start to code your turn-based multiplayer game:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Make sure to enable turn-based multiplayer support for your game in the Google Play Developer Console.")),Object(i.b)("p",null,"Sections:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#creating-a-match"}),"Creating a Match")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#loading-matches"}),"Loading Matches")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#match-data"}),"Match Data")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#taking-turns"}),"Taking Turns")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#match-updates"}),"Match Updates")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#leaving-a-match"}),"Leaving a Match")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#completing-a-match"}),"Completing a Match"))),Object(i.b)("h2",{id:"creating-a-match"},"Creating a match"),Object(i.b)("h3",{id:"player-selection"},"Player Selection"),Object(i.b)("p",null,"The process of creating a match works slightly differently on the platforms however the\nbest cross-platform way to create a match is to first call ",Object(i.b)("inlineCode",{parentName:"p"},"displayCreateMatchUI"),". "),Object(i.b)("p",null,"This will display some form of UI that will ask the user to select players to invite,\nand then end in a create match event."),Object(i.b)("p",null,"This call allows a few options for you to guide how many players, minimum, maximum and\nwhether auto matching is allowed, through the ",Object(i.b)("inlineCode",{parentName:"p"},"PlayerSelectionOptions")," class."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"var options:PlayerSelectionOptions = new PlayerSelectionOptions();\noptions.minPlayers = 1;\noptions.maxPlayers = 3;\noptions.allowAutomatch = false;\n\nGameServices.service.turnBasedMultiplayer.displayCreateMatchUI( options );\n")),Object(i.b)("p",null,"This will then dispatch one of the following events:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TurnBasedMultiplayerEvent.CREATEMATCH_UI_SUCCESS"),": Dispatched when the player selects oponents for the match"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TurnBasedMultiplayerEvent.CREATEMATCH_UI_ERROR"),": Dispatched if there was an error during the create match UI"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TurnBasedMultiplayerEvent.CREATEMATCH_UI_CANCEL"),": Dispatched when the player cancels the create match UI"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TurnBasedMatchEvent.CREATE_SUCCESS"),": Dispatched when the match is created")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"GameServices.service.turnBasedMultiplayer.addEventListener( TurnBasedMultiplayerEvent.CREATEMATCH_UI_SUCCESS, createMatchUISuccessHandler );\nGameServices.service.turnBasedMultiplayer.addEventListener( TurnBasedMultiplayerEvent.CREATEMATCH_UI_CANCEL, createMatchUICancelHandler );\nGameServices.service.turnBasedMultiplayer.addEventListener( TurnBasedMultiplayerEvent.CREATEMATCH_UI_ERROR, createMatchUIErrorHandler );\n\nGameServices.service.turnBasedMultiplayer.addEventListener( TurnBasedMatchEvent.CREATE_SUCCESS, matchCreateHandler );\n")),Object(i.b)("h3",{id:"create-match"},"Create Match"),Object(i.b)("p",null,"You can handle the cancel and errors as your application requires. The success event will contain\ninformation about the selected players and allow you to create a match:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),'private function createMatchUISuccessHandler( event:TurnBasedMultiplayerEvent ):void\n{\n    //\n    //  This event is fired when the create match ui is completed and we need\n    //  to manually call create match.\n    //\n    //  This is not needed on GameCenter as you will immediately get a CREATE MATCH \n    //  event.\n    \n    var config:TurnBasedMatchConfig = event.data;\n    message( " --- INVITED PLAYERS" );\n    for each (var id:String in config.invitedPlayers)\n        message( " P: " + id );\n    message( " --- " );\n    \n    GameServices.service.turnBasedMultiplayer.createMatch( config );\n}\n')),Object(i.b)("p",null,"Then when the match is created you will receive the ",Object(i.b)("inlineCode",{parentName:"p"},"TurnBasedMatchEvent.CREATE_SUCCESS")," event\nwhich will contain the ",Object(i.b)("inlineCode",{parentName:"p"},"TurnBasedMatch")," reference for the match: "),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"private function matchCreateHandler( event:TurnBasedMatchEvent ):void \n{\n    //  You should store the match for usage in your game\n    //  This forms the main interface for turn based matches.\n    var match:TurnBasedMatch = event.match;\n}\n")),Object(i.b)("p",null,"At this point it's good practice to initialise the ",Object(i.b)("inlineCode",{parentName:"p"},"match")," with some initial game data.\nThe ",Object(i.b)("inlineCode",{parentName:"p"},"match")," object contains a ",Object(i.b)("inlineCode",{parentName:"p"},"data")," ByteArray that you use to store information about\nthe game state. "),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"// Use match.data to write some initial data state\n")),Object(i.b)("h3",{id:"taking-the-first-turn"},"Taking the first turn"),Object(i.b)("p",null,"Once you have created the match you can now have your player take their first turn\nexecuting your game play as you see fit. The result of the players actions should\nbe then written to the match data and then you should call ",Object(i.b)("inlineCode",{parentName:"p"},"takeTurn")," specifying\nthe next participant. See Taking Turns for more information on using ",Object(i.b)("inlineCode",{parentName:"p"},"takeTurn"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"It is very important that your player takes the first turn.")," "),Object(i.b)("p",null,"Until the player takes the first turn the match will not be in a state that will\ntrigger notifications to other players and they won't receive invitations to the game or match."),Object(i.b)("h2",{id:"loading-matches"},"Loading Matches"),Object(i.b)("p",null,"To load matches currently in progress for the current player you can call the ",Object(i.b)("inlineCode",{parentName:"p"},"loadMatches"),"\nfunction."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"GameServices.service.turnBasedMultiplayer.loadMatches();\n")),Object(i.b)("p",null,"You can also specify loading matches that are in a particular turn status for the player\nby passing an array of statuses to the loadMatches call. For example, to load all matches\nthat it is currently the players turn:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"GameServices.service.turnBasedMultiplayer.loadMatches( [ TurnBasedMatchStatus.MATCH_TURN_STATUS_MY_TURN ] );\n")),Object(i.b)("p",null,"The call will dispatch an event when complete, being either:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TurnBasedMultiplayerEvent.LOADMATCHES_SUCCESS"),": When successful. The event will contain the loaded matches"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TurnBasedMultiplayerEvent.LOADMATCHES_FAILED"),": If an error occurred.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"GameServices.service.turnBasedMultiplayer.addEventListener( TurnBasedMultiplayerEvent.LOADMATCHES_SUCCESS, loadMatchesSuccessHandler );\nGameServices.service.turnBasedMultiplayer.addEventListener( TurnBasedMultiplayerEvent.LOADMATCHES_FAILED, loadMatchesFailedHandler );\n")),Object(i.b)("p",null,"On success the matches are available through the event payload. You can immediately start\nusing these match objects, listening for updates or taking turns as required."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),'private function loadMatchesSuccessHandler( event:TurnBasedMultiplayerEvent ):void \n{\n    for each (var match:TurnBasedMatch in event.data)\n    {\n        message( "MATCH :: ["+match.matchId+"] "+match.status );\n        \n        // Display matches to user or process as required by your application\n    }\n}\n')),Object(i.b)("h2",{id:"match-data"},"Match Data"),Object(i.b)("p",null,"The match data is a ",Object(i.b)("inlineCode",{parentName:"p"},"ByteArray")," object that you can use as requried to store data,\nhowever it is size limited so you should take efforts to minimise the size of the\ndata required by your game. "),Object(i.b)("p",null,"Some general strategies of encoding the data include:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Encode only player actions"),": In this design, your match data simply consists of the moves made by the players. For example, in chess, you know that white goes first, moves always alternate, and a piece moves from one board position to another. This makes it easy for you to encode each move as the starting and ending position of the piece moved. The rest of the data (who made the moves) can be completely inferred. When your game loads the match data, it quickly replays the moves to generate the current board position.\nThis strategy works best for games with a small number of possible kinds of actions and a small number of moves per match. Also, with this model, it is very possible for your game to replay the moves in its user interface, allowing players to see exactly what moves other opponents made to get the board into the new state. Showing a player these moves makes it very easy for a player to understand how the game got to the current state.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Encode only the current state of the match"),": For very complex games, the actual state required to encode the game could be very large. In this case, you may need to encode the current state of the match without worrying about the actions that generated that match data. This is particularly true for very complex games where the list of moves might grow too large to fit in the available storage space. This strategy is recommended as a last resort. Players lose all context of what happened on previous turns of the match. For games with long timeouts between turns, players may grow bored or frustrated if they cannot remember the state of a match they were playing. This is particularly true when players participate in multiple matches simultaneously.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Encode the current state of the match and a set of recent player actions"),": This is a hybrid strategy that borrows elements from the other two strategies. Essentially, the match data stored on Game Center consists of a recent snapshot of the match plus other data that encodes recent actions since that last snapshot was taken. When the data that records the actions grows too large, your game replays some of those moves to update the match snapshot and then deletes those moves from its list of actions."))),Object(i.b)("p",null,"The size of the match data is limited to:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"64kb on Game Center"),Object(i.b)("li",{parentName:"ul"},"128kb on Google Play Games ")),Object(i.b)("h2",{id:"taking-turns"},"Taking Turns"),Object(i.b)("p",null,"To take a turn you will be updating the data in the ",Object(i.b)("inlineCode",{parentName:"p"},"match")," object and then calling\n",Object(i.b)("inlineCode",{parentName:"p"},"takeTurn")," specifying the next participant."),Object(i.b)("p",null,"The next participant can be any of the participants in the match which are available\nthrough the ",Object(i.b)("inlineCode",{parentName:"p"},"match.participants")," array of ",Object(i.b)("inlineCode",{parentName:"p"},"Participant")," objects or you can specify\nnull if you wish for an auto matched player to take the next turn."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"// Update the match data\nmatch.data.writeInt(  ... );\n\n// Determine your next player based on your game rules\nvar next:Participant = ...;\n\n// Call takeTurn to end the turn and move play to next participant\nmatch.takeTurn( next );\n")),Object(i.b)("p",null,"The local player will also be indexed in the match participants so it is sometimes\nuseful to find the index of the local player in the participants."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"var localPlayer:Player = GameServices.service.getPlayer();\n\nfor (var j:int = 0; j < match.participants.length; ++j)\n{\n    if (Participant(match.participants[j]).player.id == localPlayer.id)\n    {\n        localPlayerIndex = j;\n    }\n}\n")),Object(i.b)("p",null,"So for example your game might just iterate through the participants in turn\norder:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"//  Take the next player in the participants \nvar nextIndex:int = (localPlayerIndex + 1 >= match.participants.length) ? 0 : localPlayerIndex + 1 ;\n\n// If this is an auto-match game, then there may only be one player, in which case\n//  you will want to pass a mull value for the next participant allowing an auto match\n//  player to take their turn.\n\nvar next:Participant = null;\nif (nextIndex != localPlayerIndex)\n    next = _match.participants[ nextIndex ];\n")),Object(i.b)("p",null,"The call to ",Object(i.b)("inlineCode",{parentName:"p"},"takeTurn")," will dispatch an event on completion:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TurnBasedMatchEvent.TAKETURN_SUCCESS"),": If the call is successful"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TurnBasedMatchEvent.TAKETURN_FAILED"),": If there was an error taking the turn, you should try the call again later.")),Object(i.b)("h2",{id:"match-updates"},"Match Updates"),Object(i.b)("p",null,"When another participant changes the state of the match your application will\nreceive the ",Object(i.b)("inlineCode",{parentName:"p"},"MATCH_UPDATED")," event. "),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"GameServices.service.turnBasedMultiplayer.addEventListener( TurnBasedMatchEvent.MATCH_UPDATED, matchUpdatedHandler );\n")),Object(i.b)("p",null,"When you receive this event you should update your application with the match in the event\nThe updated ",Object(i.b)("inlineCode",{parentName:"p"},"match")," will contain the latest match status and data."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"private function matchUpdatedHandler( event:TurnBasedMatchEvent ):void \n{\n    updateMatch( event.match );\n}\n")),Object(i.b)("p",null,"For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"private function updateMatch( match:TurnBasedMatch ):void\n{\n    // Clear out the old match reference if you are holding onto one\n    if (_match)\n    {\n        _match.removeEventListener( TurnBasedMatchEvent.TAKETURN_SUCCESS, match_takeTurnSuccessHandler );\n        // ... \n    }\n\n    // Update with the new reference\n    _match = match;\n    if (_match)\n    {\n        _match.addEventListener( TurnBasedMatchEvent.TAKETURN_SUCCESS, match_takeTurnSuccessHandler );\n        // ...\n\n        // You should now process the match state checking if the status has changed \n        // and the turn status to see which player is now active\n        processMatchState();\n    }\n}\n")),Object(i.b)("p",null,"If you have multiple matches you should also use the ",Object(i.b)("inlineCode",{parentName:"p"},"matchId")," to distinguish between\nthe different matches in progress. "),Object(i.b)("h2",{id:"leaving-a-match"},"Leaving a Match"),Object(i.b)("p",null,"If a player wishes to leave a match you should call ",Object(i.b)("inlineCode",{parentName:"p"},"leaveMatchDuringTurn")," if it is the\nplayers turn or ",Object(i.b)("inlineCode",{parentName:"p"},"leaveMatch")," if not. If it is the players turn it is important that\nyou call ",Object(i.b)("inlineCode",{parentName:"p"},"leaveMatchDuringTurn")," and specify the player that will take the next turn\nbased on your game logic, so that the match may continue for the other players."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"if (match.turnStatus == TurnBasedMatchStatus.MATCH_TURN_STATUS_MY_TURN)\n{\n    // Determine the next participant based on your game logic\n    var next:Participant = ...;\n    \n    match.leaveMatchDuringTurn( next );\n}\nelse\n{\n    match.leaveMatch();\n}\n")),Object(i.b)("p",null,"Calling these functions will result in one of the following events:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TurnBasedMatchEvent.LEAVE_SUCCESS"),": Dispatched if the leave call was successful and the player is no longer an active participant."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TurnBasedMatchEvent.LEAVE_FAILED"),": Dispatched if the leave call failed. Check the error for details.")),Object(i.b)("h2",{id:"completing-a-match"},"Completing a Match"),Object(i.b)("p",null,"Completing or finishing a match involves calling ",Object(i.b)("inlineCode",{parentName:"p"},"finishMatch")," and specifying the result.\nThis should be called by the player taking the last turn in the match and call this method\ninstead of ",Object(i.b)("inlineCode",{parentName:"p"},"takeTurn"),". "),Object(i.b)("p",null,"The result of the match is specified by an Array of ",Object(i.b)("inlineCode",{parentName:"p"},"ParticipantResult")," objects for each\nof the participants in the match that require a result. If there is simply a winner, then\nyou can use a single ",Object(i.b)("inlineCode",{parentName:"p"},"ParticipantResult")," in this Array."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"var winner:ParticipantResult = new ParticipantResult();\nwinner.result       = ParticipantResult.MATCH_RESULT_WIN;\nwinner.participant  = ...; // Participant from match.participants array that has won\nwinner.placing      = 1;\n\nmatch.finishMatch( [ winner ] );\n")),Object(i.b)("p",null,"The call to ",Object(i.b)("inlineCode",{parentName:"p"},"finishMatch")," will dispatch one of the following events:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TurnBasedMatchEvent.FINISH_SUCCESS"),": Dispatched when ",Object(i.b)("inlineCode",{parentName:"li"},"finishMatch")," is successful "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TurnBasedMatchEvent.FINISH_FAILED"),": Dispatched when ",Object(i.b)("inlineCode",{parentName:"li"},"finishMatch")," has failed, you should attempt the call again later ")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-actionscript"}),"match.addEventListener( TurnBasedMatchEvent.FINISH_SUCCESS, finishSuccessHandler );\n\nprivate function finishSuccessHandler( event:TurnBasedMatchEvent ):void \n{\n    // Match will now be complete\n}\n")))}p.isMDXComponent=!0},808:function(e,t,a){"use strict";a.d(t,"a",(function(){return h})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},h=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),h=p(a),b=n,m=h["".concat(c,".").concat(b)]||h[b]||u[b]||i;return a?r.a.createElement(m,l(l({ref:t},o),{},{components:a})):r.a.createElement(m,l({ref:t},o))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,c=new Array(i);c[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var o=2;o<i;o++)c[o]=a[o];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);