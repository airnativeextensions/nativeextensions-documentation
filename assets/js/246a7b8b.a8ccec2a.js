"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[28370],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),u=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=u(e.components);return i.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},v=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),v=r,f=d["".concat(c,".").concat(v)]||d[v]||p[v]||o;return n?i.createElement(f,a(a({ref:t},l),{},{components:n})):i.createElement(f,a({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=v;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:r,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}v.displayName="MDXCreateElement"},16424:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var i=n(87462),r=(n(67294),n(3905));const o={title:"Register for notifications",sidebar_label:"Register for notifications"},a=void 0,s={unversionedId:"pushnotifications/register-for-notifications",id:"pushnotifications/register-for-notifications",title:"Register for notifications",description:"Now that you have authorisation to access push notifications you can register your user's device.",source:"@site/docs/pushnotifications/register-for-notifications.md",sourceDirName:"pushnotifications",slug:"/pushnotifications/register-for-notifications",permalink:"/docs/pushnotifications/register-for-notifications",draft:!1,tags:[],version:"current",frontMatter:{title:"Register for notifications",sidebar_label:"Register for notifications"},sidebar:"pushnotifications",previous:{title:"Request Authorisation",permalink:"/docs/pushnotifications/request-authorisation"},next:{title:"Topics",permalink:"/docs/pushnotifications/topics"}},c={},u=[{value:"Current Tokens",id:"current-tokens",level:3}],l={toc:u},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Now that you have authorisation to access push notifications you can register your user's device.\nRegistration involves a call to the server to obtain a registration id or device token.\nThis is initiated by calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"register()")," function. "),(0,r.kt)("p",null,"The token may change at any time so you should also listen for the ",(0,r.kt)("inlineCode",{parentName:"p"},"CHANGED")," event and update your server as your application requires."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"PushNotifications.service.addEventListener( RegistrationEvent.REGISTERING, registeringHandler );\nPushNotifications.service.addEventListener( RegistrationEvent.REGISTER_SUCCESS, registerSuccessHandler );\nPushNotifications.service.addEventListener( RegistrationEvent.CHANGED, registrationChangedHandler );\nPushNotifications.service.addEventListener( RegistrationEvent.REGISTER_FAILED, registerFailedHandler );\nPushNotifications.service.addEventListener( RegistrationEvent.ERROR, errorHandler );\n\nPushNotifications.service.register();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'function registeringHandler( event:RegistrationEvent ):void\n{\n    trace( "Registration started" );\n}\n\nfunction registerSuccessHandler( event:RegistrationEvent ):void\n{\n    trace( "Registration succeeded with ID: " + event.data  );\n    var deviceTokenOrRegistrationId:String = event.data;\n}\n\nfunction registrationChangedHandler( event:RegistrationEvent ):void\n{\n    trace( "Registration ID has changed: " + event.data );\n    var deviceTokenOrRegistrationId:String = event.data;\n}\n\nfunction registerFailedHandler( event:RegistrationEvent ):void\n{\n    trace( "Registration failed" );\n}\n\nfunction errorHandler( event:RegistrationEvent ):void\n{\n    trace( "Registration error: "+event.data );\n}\n')),(0,r.kt)("h3",{id:"current-tokens"},"Current Tokens"),(0,r.kt)("p",null,"Once registered you can access the current registration id / device token at any time by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"getDeviceToken()")," function. This will return the same string as the registration id / device token returned in either the  ",(0,r.kt)("inlineCode",{parentName:"p"},"REGISTER_SUCCESS")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"CHANGED")," event."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"var deviceTokenOrRegistrationId:String = PushNotifications.service.getDeviceToken();\n")),(0,r.kt)("p",null,"Additionally some services may have a secondary service identifier that the service server returned for this device. For example the OneSignal or Azure identifier. This can be retrieved by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"getServiceToken()")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"var serviceToken:String = PushNotifications.service.getServiceToken();\n")),(0,r.kt)("p",null,"Depending on the service you are using you may have to use the device token or the service token to send notifications to the device."))}p.isMDXComponent=!0}}]);