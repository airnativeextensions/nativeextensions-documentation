(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{185:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return u}));var a=n(2),r=n(6),i=(n(0),n(876)),c={title:"Change a Purchase",sidebar_label:"Change a Purchase"},o={unversionedId:"inappbilling/change-a-purchase",id:"inappbilling/change-a-purchase",isDocsHomePage:!1,title:"Change a Purchase",description:"You can offer users different subscription tiers, such as a base tier and a premium tier in some billing services (such as Google Play Billing).",source:"@site/docs/inappbilling/change-a-purchase.md",slug:"/inappbilling/change-a-purchase",permalink:"/docs/inappbilling/change-a-purchase",version:"current",sidebar_label:"Change a Purchase",sidebar:"inappbilling",previous:{title:"Consuming Purchases",permalink:"/docs/inappbilling/consuming-purchases"},next:{title:"Promotions",permalink:"/docs/inappbilling/promotions"}},l=[{value:"Support",id:"support",children:[]},{value:"Changing a Purchase",id:"changing-a-purchase",children:[]},{value:"Set proration mode",id:"set-proration-mode",children:[]},{value:"Application Username",id:"application-username",children:[]},{value:"Further Reading",id:"further-reading",children:[]}],s={rightToc:l};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"You can offer users different subscription tiers, such as a base tier and a premium tier in some billing services (such as Google Play Billing)."),Object(i.b)("p",null,"If your application provides different teirs of subscriptions a user should be able to upgrade and downgrade a subscription by purchasing a different tier subscription."),Object(i.b)("h2",{id:"support"},"Support"),Object(i.b)("p",null,"Not every service supports changing purchases, so you should check the ",Object(i.b)("inlineCode",{parentName:"p"},"isChangePurchaseSupported")," flag before attempting any of the following functionality:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-actionscript"}),"if (InAppBilling.service.isChangePurchaseSupported)\n{\n    // changing purchases is supported on the current platform and service\n}\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note: only call this after ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"billing-service"}),"setting up your billing service"),".")),Object(i.b)("h2",{id:"changing-a-purchase"},"Changing a Purchase"),Object(i.b)("p",null,"You should present a screen with the available subscriptions for a user and then if required trigger the upgrade / downgrade process by calling the ",Object(i.b)("inlineCode",{parentName:"p"},"changePurchase()")," method. "),Object(i.b)("p",null,"When upgrading or downgrading, you pass information about the current purchase including the product id and transaction id (i.e. Google Play purchase token) for the current subscription and the product id for the new (upgraded or downgraded) subscription:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-actionscript"}),'var request:PurchaseChangeRequest = new PurchaseChangeRequest()\n        .setCurrentDetails( "current_product_id", "current_purchase_transaction_id" )\n        .setNewProductId( "new_product_id" );\n\nvar success:Boolean = InAppBilling.service.changePurchase( request );\n')),Object(i.b)("p",null,"Similar to making a purchase you should listen for the ",Object(i.b)("inlineCode",{parentName:"p"},"PurchaseEvent.PURCHASES_UPDATED")," and ",Object(i.b)("inlineCode",{parentName:"p"},"PurchaseEvent.PURCHASE_FAILED")," events to handle the result from the purchase change."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-actionscript"}),"InAppBilling.service.addEventListener( PurchaseEvent.PURCHASES_UPDATED, purchases_updatedHandler );\nInAppBilling.service.addEventListener( PurchaseEvent.PURCHASE_FAILED, purchase_failedHandler );\n")),Object(i.b)("h2",{id:"set-proration-mode"},"Set proration mode"),Object(i.b)("p",null,"When upgrading or downgrading a subscription, you can call ",Object(i.b)("inlineCode",{parentName:"p"},"setProrationMode()")," in the ",Object(i.b)("inlineCode",{parentName:"p"},"PurchaseChangeRequest")," class to provide details about the proration that will be applied when the subscription changes:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-actionscript"}),'var request:PurchaseChangeRequest = new PurchaseChangeRequest()\n        .setCurrentDetails( "current_product_id", "current_purchase_transaction_id" )\n        .setNewProductId( "new_product_id" )\n        .setProrationMode( PurchaseChangeRequest.IMMEDIATE_WITH_TIME_PRORATION );\n')),Object(i.b)("p",null,"The following table lists all of the proration modes."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null})))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"PurchaseChangeRequest.IMMEDIATE_WITH_TIME_PRORATION")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Replacement takes effect immediately, and the new expiration time will be prorated and credited or charged to the user. This is the current default behavior.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"PurchaseChangeRequest.IMMEDIATE_AND_CHARGE_PRORATED_PRICE")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Replacement takes effect immediately, and the billing cycle remains the same. The price for the remaining period will be charged.  ",Object(i.b)("strong",{parentName:"td"},"Note: This option is only available for subscription upgrade."))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"PurchaseChangeRequest.IMMEDIATE_WITHOUT_PRORATION")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Replacement takes effect immediately, and the new price will be charged on next recurrence time. The billing cycle stays the same.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"PurchaseChangeRequest.DEFERRED")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Replacement takes effect on the next recurrence time.")))),Object(i.b)("h2",{id:"application-username"},"Application Username"),Object(i.b)("p",null,"Similar to a purchase, you can attach an obfuscated username or account id to a purchase. You can set this during the change purchase process by calling ",Object(i.b)("inlineCode",{parentName:"p"},"setApplicationUsername()")," on your purchase change request."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-actionscript"}),'var request:PurchaseChangeRequest = new PurchaseChangeRequest()\n        .setCurrentDetails( "current_product_id", "current_purchase_transaction_id" )\n        .setNewProductId( "new_product_id" )\n        .setApplicationUsername( "..." );\n')),Object(i.b)("h2",{id:"further-reading"},"Further Reading"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Google Play Billing: ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://developer.android.com/google/play/billing/subs#change"}),"https://developer.android.com/google/play/billing/subs#change"))))}u.isMDXComponent=!0},876:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),u=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,h=p["".concat(c,".").concat(d)]||p[d]||b[d]||i;return n?r.a.createElement(h,o(o({ref:t},s),{},{components:n})):r.a.createElement(h,o({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,c=new Array(i);c[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var s=2;s<i;s++)c[s]=n[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);