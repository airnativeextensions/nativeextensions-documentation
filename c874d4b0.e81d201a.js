(window.webpackJsonp=window.webpackJsonp||[]).push([[583],{639:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(2),i=n(6),o=(n(0),n(815)),c={title:"Windows WNS Payload",sidebar_label:"Windows WNS Payload"},s={unversionedId:"pushnotifications/windows-wns-payload",id:"pushnotifications/windows-wns-payload",isDocsHomePage:!1,title:"Windows WNS Payload",description:"The payload for the WNS notificaiton contains a Windows Toast XML structure.",source:"@site/docs/pushnotifications/windows-wns-payload.md",slug:"/pushnotifications/windows-wns-payload",permalink:"/docs/pushnotifications/windows-wns-payload",version:"current",sidebar_label:"Windows WNS Payload",sidebar:"pushnotifications",previous:{title:"FCM-GCM Payload",permalink:"/docs/pushnotifications/fcm-gcm-payload"},next:{title:"Pushy Payload",permalink:"/docs/pushnotifications/pushy-payload"}},l=[{value:"Text",id:"text",children:[]},{value:"Images",id:"images",children:[]},{value:"Actions",id:"actions",children:[]},{value:"Example",id:"example",children:[]}],r={rightToc:l};function p(e){var t=e.components,c=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},r,c,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The payload for the WNS notificaiton contains a Windows Toast XML structure."),Object(o.b)("p",null,"There are a couple of important fields you will need to specify in order that the notification works correctly with the Push Notifications extension. "),Object(o.b)("p",null,"The simplest structure is a simple text notification, containing a single line of text:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-xml"}),"<toast launch='payload=PAYLOADFORTHENOTIFICATION'>\n  <visual lang='en-US'>\n    <binding template='ToastGeneric'>\n    <text>Test Notification</text>\n    </binding>\n  </visual>\n</toast>\n")),Object(o.b)("p",null,"The important thing to note in all notifications in the ",Object(o.b)("inlineCode",{parentName:"p"},"launch")," attribute of the root ",Object(o.b)("inlineCode",{parentName:"p"},"toast")," node. This must contain your payload."),Object(o.b)("p",null,"You can either specify it as a url encoded parameters as above incuding the ",Object(o.b)("inlineCode",{parentName:"p"},"payload")," parameter, or if this isn't included the entire value of the ",Object(o.b)("inlineCode",{parentName:"p"},"launch")," attribute will be returned as the payload. We recommend the parameter approach as it matches up with actions."),Object(o.b)("h3",{id:"text"},"Text"),Object(o.b)("p",null,"You can include multiple lines of text, each wrapped in a ",Object(o.b)("inlineCode",{parentName:"p"},"text")," node, eg:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-xml"}),"<toast launch='payload=%7B%22test%22%3A%22value%22%7D'>\n  <visual lang='en-US'>\n    <binding template='ToastGeneric'>\n    <text>Test Notification</text>\n    <text>A notification sent via WNS</text>\n    </binding>\n  </visual>\n</toast>\n")),Object(o.b)("p",null,"The first will be used as a title for the notification and subsequent lines will be used as the content of the notification."),Object(o.b)("h3",{id:"images"},"Images"),Object(o.b)("p",null,"To add an image to your notification add an ",Object(o.b)("inlineCode",{parentName:"p"},"image")," node to your ",Object(o.b)("inlineCode",{parentName:"p"},"visual")," component, alongside the ",Object(o.b)("inlineCode",{parentName:"p"},"text")," nodes."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-xml"}),"<toast launch='payload=%7B%22test%22%3A%22value%22%7D'>\n  <visual lang='en-US'>\n    <binding template='ToastGeneric'>\n    <image src='ms-appx:///assets/notifications/bigImage.png' placement='inline' />\n    <text>Test Notification</text>\n    <text>A notification sent via WNS</text>\n    </binding>\n  </visual>\n</toast>\n")),Object(o.b)("p",null,"You can specify their ",Object(o.b)("inlineCode",{parentName:"p"},"placement")," as one of the following:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"appLogoOverride"),": Acts as a large icon for the notification, appearing beside the text;"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"inline"),": Adds the image into the content of the notification;"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"hero"),': Adds the image at the top of the notification as a "hero" image (only supported on recent versions of Windows);')),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-xml"}),"<image src='https://airnativeextensions.com/images/extensions/icons/ane-pushnotifications-icon.png' placement='appLogoOverride' />\n<image src='ms-appx:///assets/notifications/bigImage.png' placement='inline' />\n<image src='ms-appx:///assets/notifications/bigImage3.png' placement='hero' />\n")),Object(o.b)("p",null,"The source of the notification as either a url or an application packaged asset."),Object(o.b)("p",null,"To specify a url, use the complete url of the file as the ",Object(o.b)("inlineCode",{parentName:"p"},"src")," attribute."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-xml"}),"<image src='https://airnativeextensions.com/images/extensions/icons/ane-pushnotifications-icon.png' placement='appLogoOverride' />\n")),Object(o.b)("p",null,"To specify a packaged asset, use the relative path to the asset in your application package, prefixed by ",Object(o.b)("inlineCode",{parentName:"p"},"ms-appx:///"),". For example to use an asset packaged as ",Object(o.b)("inlineCode",{parentName:"p"},"assets/notifications/bigImage.png"),", you would use ",Object(o.b)("inlineCode",{parentName:"p"},"ms-appx:///assets/notifications/bigImage.png")," as the ",Object(o.b)("inlineCode",{parentName:"p"},"src"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-xml"}),"<image src='ms-appx:///assets/notifications/bigImage.png' placement='inline' />\n")),Object(o.b)("h3",{id:"actions"},"Actions"),Object(o.b)("p",null,"Actions are added to a notification in an ",Object(o.b)("inlineCode",{parentName:"p"},"actions")," node alongside the ",Object(o.b)("inlineCode",{parentName:"p"},"visual")," node:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-xml"}),"<toast>\n    <visual>\n    </visual>\n    <actions>\n    </actions>\n</toast>\n")),Object(o.b)("p",null,Object(o.b)("img",{src:n(836).default})),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"actions")," node contains a series of ",Object(o.b)("inlineCode",{parentName:"p"},"action")," nodes, each specifying an action button the user can press."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-xml"}),"<toast launch='payload=%7B%22test%22%3A%22value%22%7D'>\n  <visual lang='en-US'>\n    <binding template='ToastGeneric'>\n    <text>Test Notification</text>\n    </binding>\n  </visual>\n  <actions>\n    <action \n        content='Accept' \n        activationType='foreground' \n        arguments='action=ACCEPT_IDENTIFIER&amp;payload=%7B%22test%22%3A%22value%22%2C%20%22action%22%3A%22accept%22%7D' />\n  </actions>\n</toast>\n")),Object(o.b)("p",null,"An action has the following attributes:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"content"),": The label on the action button;"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"activationType"),": Must be ",Object(o.b)("inlineCode",{parentName:"li"},"foreground"),";"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"arguments"),": The arguments need to be in a url encoded paramaters format in order that the extension can correctly process the user interaction with the action, and they must include:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"action"),": The value being the identifier of the action returned in the ",Object(o.b)("inlineCode",{parentName:"li"},"ACTION")," event (",Object(o.b)("inlineCode",{parentName:"li"},"ACCEPT_IDENTIFER")," in the above example);"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"payload"),": the payload of the notification returned in the ",Object(o.b)("inlineCode",{parentName:"li"},"ACTION")," event, this can be different or the same as the main notification payload in the ",Object(o.b)("inlineCode",{parentName:"li"},"launch")," parameter, but must be duplicated here. The above example contains a json string (url encoded):",Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{ \n    "test": "value",\n    "action": "accept"\n}\n')))))),Object(o.b)("h3",{id:"example"},"Example"),Object(o.b)("p",null,"The following is an example of a payload containing all of the above features:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-xml"}),"<toast launch='payload=%7B%22test%22%3A%22value%22%7D'>\n  <visual lang='en-US'>\n    <binding template='ToastGeneric'>\n        <image src='https://airnativeextensions.com/images/extensions/icons/ane-pushnotifications-icon.png' placement='appLogoOverride' />\n        <image src='ms-appx:///assets/notifications/bigImage.png' placement='inline' />\n        <image src='ms-appx:///assets/notifications/bigImage3.png' placement='hero' />\n        <text>Test Notification</text>\n        <text>A notification sent via WNS</text>\n    </binding>\n  </visual>\n  <actions>\n    <action content='Accept' arguments='action=ACCEPT_IDENTIFIER&amp;payload=%7B%22test%22%3A%22value%22%2C%20%22action%22%3A%22accept%22%7D' activationType='foreground' />\n    <action content='Delete' arguments='action=DELETE_IDENTIFIER&amp;payload=%7B%22test%22%3A%22value%22%2C%20%22action%22%3A%22delete%22%7D' activationType='foreground' />\n  </actions>\n</toast>\n")),Object(o.b)("p",null,"References: "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.microsoft.com/en-us/windows/uwp/design/shell/tiles-and-notifications/adaptive-interactive-toasts"}),"https://docs.microsoft.com/en-us/windows/uwp/design/shell/tiles-and-notifications/adaptive-interactive-toasts")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.microsoft.com/en-au/uwp/schemas/tiles/toastschema/schema-root"}),"https://docs.microsoft.com/en-au/uwp/schemas/tiles/toastschema/schema-root"))))}p.isMDXComponent=!0},815:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=i.a.createContext({}),p=function(e){var t=i.a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=p(e.components);return i.a.createElement(r.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,r=l(e,["components","mdxType","originalType","parentName"]),b=p(n),d=a,m=b["".concat(c,".").concat(d)]||b[d]||u[d]||o;return n?i.a.createElement(m,s(s({ref:t},r),{},{components:n})):i.a.createElement(m,s({ref:t},r))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var r=2;r<o;r++)c[r]=n[r];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},836:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/windows-actions-f40d4a036c362429a4909da87c973acf.png"}}]);