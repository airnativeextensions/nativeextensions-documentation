"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[16754],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),p=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(r.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,f=u["".concat(r,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(f,s(s({ref:t},c),{},{components:n})):a.createElement(f,s({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l[u]="string"==typeof e?e:i,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},99016:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const o={title:"Windows WNS Payload",sidebar_label:"Windows WNS Payload"},s=void 0,l={unversionedId:"pushnotifications/windows/windows-wns-payload",id:"pushnotifications/windows/windows-wns-payload",title:"Windows WNS Payload",description:"The payload for the WNS notificaiton contains a Windows Toast XML structure.",source:"@site/docs/pushnotifications/windows/windows-wns-payload.md",sourceDirName:"pushnotifications/windows",slug:"/pushnotifications/windows/windows-wns-payload",permalink:"/docs/pushnotifications/windows/windows-wns-payload",draft:!1,tags:[],version:"current",frontMatter:{title:"Windows WNS Payload",sidebar_label:"Windows WNS Payload"},sidebar:"pushnotifications",previous:{title:"FCM-GCM Payload",permalink:"/docs/pushnotifications/firebase/fcm-gcm-payload"},next:{title:"Pushy Payload",permalink:"/docs/pushnotifications/pushy/pushy-payload"}},r={},p=[{value:"Text",id:"text",level:3},{value:"Images",id:"images",level:3},{value:"Actions",id:"actions",level:3},{value:"Example",id:"example",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...o}=e;return(0,i.kt)(u,(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The payload for the WNS notificaiton contains a Windows Toast XML structure."),(0,i.kt)("p",null,"There are a couple of important fields you will need to specify in order that the notification works correctly with the Push Notifications extension. "),(0,i.kt)("p",null,"The simplest structure is a simple text notification, containing a single line of text:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<toast launch='payload=PAYLOADFORTHENOTIFICATION'>\n  <visual lang='en-US'>\n    <binding template='ToastGeneric'>\n    <text>Test Notification</text>\n    </binding>\n  </visual>\n</toast>\n")),(0,i.kt)("p",null,"The important thing to note in all notifications in the ",(0,i.kt)("inlineCode",{parentName:"p"},"launch")," attribute of the root ",(0,i.kt)("inlineCode",{parentName:"p"},"toast")," node. This must contain your payload."),(0,i.kt)("p",null,"You can either specify it as a url encoded parameters as above incuding the ",(0,i.kt)("inlineCode",{parentName:"p"},"payload")," parameter, or if this isn't included the entire value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"launch")," attribute will be returned as the payload. We recommend the parameter approach as it matches up with actions."),(0,i.kt)("h3",{id:"text"},"Text"),(0,i.kt)("p",null,"You can include multiple lines of text, each wrapped in a ",(0,i.kt)("inlineCode",{parentName:"p"},"text")," node, eg:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<toast launch='payload=%7B%22test%22%3A%22value%22%7D'>\n  <visual lang='en-US'>\n    <binding template='ToastGeneric'>\n    <text>Test Notification</text>\n    <text>A notification sent via WNS</text>\n    </binding>\n  </visual>\n</toast>\n")),(0,i.kt)("p",null,"The first will be used as a title for the notification and subsequent lines will be used as the content of the notification."),(0,i.kt)("h3",{id:"images"},"Images"),(0,i.kt)("p",null,"To add an image to your notification add an ",(0,i.kt)("inlineCode",{parentName:"p"},"image")," node to your ",(0,i.kt)("inlineCode",{parentName:"p"},"visual")," component, alongside the ",(0,i.kt)("inlineCode",{parentName:"p"},"text")," nodes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<toast launch='payload=%7B%22test%22%3A%22value%22%7D'>\n  <visual lang='en-US'>\n    <binding template='ToastGeneric'>\n    <image src='ms-appx:///assets/notifications/bigImage.png' placement='inline' />\n    <text>Test Notification</text>\n    <text>A notification sent via WNS</text>\n    </binding>\n  </visual>\n</toast>\n")),(0,i.kt)("p",null,"You can specify their ",(0,i.kt)("inlineCode",{parentName:"p"},"placement")," as one of the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"appLogoOverride"),": Acts as a large icon for the notification, appearing beside the text;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"inline"),": Adds the image into the content of the notification;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hero"),': Adds the image at the top of the notification as a "hero" image (only supported on recent versions of Windows);')),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<image src='https://airnativeextensions.com/images/extensions/icons/ane-pushnotifications-icon.png' placement='appLogoOverride' />\n<image src='ms-appx:///assets/notifications/bigImage.png' placement='inline' />\n<image src='ms-appx:///assets/notifications/bigImage3.png' placement='hero' />\n")),(0,i.kt)("p",null,"The source of the notification as either a url or an application packaged asset."),(0,i.kt)("p",null,"To specify a url, use the complete url of the file as the ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," attribute."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<image src='https://airnativeextensions.com/images/extensions/icons/ane-pushnotifications-icon.png' placement='appLogoOverride' />\n")),(0,i.kt)("p",null,"To specify a packaged asset, use the relative path to the asset in your application package, prefixed by ",(0,i.kt)("inlineCode",{parentName:"p"},"ms-appx:///"),". For example to use an asset packaged as ",(0,i.kt)("inlineCode",{parentName:"p"},"assets/notifications/bigImage.png"),", you would use ",(0,i.kt)("inlineCode",{parentName:"p"},"ms-appx:///assets/notifications/bigImage.png")," as the ",(0,i.kt)("inlineCode",{parentName:"p"},"src"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<image src='ms-appx:///assets/notifications/bigImage.png' placement='inline' />\n")),(0,i.kt)("h3",{id:"actions"},"Actions"),(0,i.kt)("p",null,"Actions are added to a notification in an ",(0,i.kt)("inlineCode",{parentName:"p"},"actions")," node alongside the ",(0,i.kt)("inlineCode",{parentName:"p"},"visual")," node:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<toast>\n    <visual>\n    </visual>\n    <actions>\n    </actions>\n</toast>\n")),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(24507).Z,width:"371",height:"157"})),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"actions")," node contains a series of ",(0,i.kt)("inlineCode",{parentName:"p"},"action")," nodes, each specifying an action button the user can press."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<toast launch='payload=%7B%22test%22%3A%22value%22%7D'>\n  <visual lang='en-US'>\n    <binding template='ToastGeneric'>\n    <text>Test Notification</text>\n    </binding>\n  </visual>\n  <actions>\n    <action \n        content='Accept' \n        activationType='foreground' \n        arguments='action=ACCEPT_IDENTIFIER&amp;payload=%7B%22test%22%3A%22value%22%2C%20%22action%22%3A%22accept%22%7D' />\n  </actions>\n</toast>\n")),(0,i.kt)("p",null,"An action has the following attributes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"content"),": The label on the action button;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"activationType"),": Must be ",(0,i.kt)("inlineCode",{parentName:"li"},"foreground"),";"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"arguments"),": The arguments need to be in a url encoded paramaters format in order that the extension can correctly process the user interaction with the action, and they must include:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"action"),": The value being the identifier of the action returned in the ",(0,i.kt)("inlineCode",{parentName:"li"},"ACTION")," event (",(0,i.kt)("inlineCode",{parentName:"li"},"ACCEPT_IDENTIFER")," in the above example);"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"payload"),": the payload of the notification returned in the ",(0,i.kt)("inlineCode",{parentName:"li"},"ACTION")," event, this can be different or the same as the main notification payload in the ",(0,i.kt)("inlineCode",{parentName:"li"},"launch")," parameter, but must be duplicated here. The above example contains a json string (url encoded):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{ \n    "test": "value",\n    "action": "accept"\n}\n')))))),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"The following is an example of a payload containing all of the above features:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<toast launch='payload=%7B%22test%22%3A%22value%22%7D'>\n  <visual lang='en-US'>\n    <binding template='ToastGeneric'>\n        <image src='https://airnativeextensions.com/images/extensions/icons/ane-pushnotifications-icon.png' placement='appLogoOverride' />\n        <image src='ms-appx:///assets/notifications/bigImage.png' placement='inline' />\n        <image src='ms-appx:///assets/notifications/bigImage3.png' placement='hero' />\n        <text>Test Notification</text>\n        <text>A notification sent via WNS</text>\n    </binding>\n  </visual>\n  <actions>\n    <action content='Accept' arguments='action=ACCEPT_IDENTIFIER&amp;payload=%7B%22test%22%3A%22value%22%2C%20%22action%22%3A%22accept%22%7D' activationType='foreground' />\n    <action content='Delete' arguments='action=DELETE_IDENTIFIER&amp;payload=%7B%22test%22%3A%22value%22%2C%20%22action%22%3A%22delete%22%7D' activationType='foreground' />\n  </actions>\n</toast>\n")),(0,i.kt)("p",null,"References: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/windows/uwp/design/shell/tiles-and-notifications/adaptive-interactive-toasts"},"https://docs.microsoft.com/en-us/windows/uwp/design/shell/tiles-and-notifications/adaptive-interactive-toasts")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-au/uwp/schemas/tiles/toastschema/schema-root"},"https://docs.microsoft.com/en-au/uwp/schemas/tiles/toastschema/schema-root"))))}d.isMDXComponent=!0},24507:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/windows-actions-f40d4a036c362429a4909da87c973acf.png"}}]);