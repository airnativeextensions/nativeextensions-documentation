"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[5256],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,y=p["".concat(l,".").concat(d)]||p[d]||h[d]||o;return n?a.createElement(y,i(i({ref:t},c),{},{components:n})):a.createElement(y,i({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7774:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const o={title:"Authorisation",sidebar_label:"Authorisation"},i=void 0,s={unversionedId:"health/authorisation",id:"health/authorisation",title:"Authorisation",description:"Request Authorisation",source:"@site/docs/health/authorisation.md",sourceDirName:"health",slug:"/health/authorisation",permalink:"/docs/health/authorisation",draft:!1,tags:[],version:"current",frontMatter:{title:"Authorisation",sidebar_label:"Authorisation"},sidebar:"health",previous:{title:"Availablility & Updates",permalink:"/docs/health/check-for-updates"},next:{title:"Querying Data",permalink:"/docs/health/queries"}},l={},u=[{value:"Request Authorisation",id:"request-authorisation",level:2},{value:"Authorisation Status",id:"authorisation-status",level:2},{value:"Users",id:"users",level:2}],c={toc:u},p="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"request-authorisation"},"Request Authorisation"),(0,r.kt)("p",null,"In order to access the user's health data you must first request authorisation."),(0,r.kt)("p",null,"To request access call the ",(0,r.kt)("inlineCode",{parentName:"p"},"requestAuthorisation()")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'Health.instance.requestAuthorisation(\n        new <HealthType> [],\n        new <HealthType> [ HealthType.STEP_COUNT ],\n        function ( success:Boolean, error:Error ):void\n        {\n            trace( "requestAuthorisation:complete( " + success + " )" );\n        }\n);\n')),(0,r.kt)("p",null,"The first parameter is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Vector.<HealthType>")," reqpresenting the write / share types you require access to and the second is similarly for the read types. "),(0,r.kt)("p",null,"The third parameter is a callback function that will be called once the authorisation process is complete. It must be of the form ",(0,r.kt)("inlineCode",{parentName:"p"},"function( success:Boolean, error:Error ):void"),"."),(0,r.kt)("h2",{id:"authorisation-status"},"Authorisation Status"),(0,r.kt)("p",null,"You can check the authorisation status by calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"authorisationStatus()")," method. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'Health.instance.authorisationStatus(\n        HealthType.STEP_COUNT,\n        function( status:String ):void\n        {\n            trace( "authorisationStatus: " + status );\n        }\n);\n')),(0,r.kt)("p",null,"The first parameter is the ",(0,r.kt)("inlineCode",{parentName:"p"},"HealthType")," you wish to query and the second is a callback function that will be called once the authorisation status has been determined (if possible). This function takes one parameter being the status string as defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthorisationStatus")," class."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"On iOS there are certain limitations around the data this will return. Particularly Apple has decided not to return the read status for health data.\nInstead they suggest you request access whenever you require it and only attempt a read after you have successfully completed that process.")),(0,r.kt)("h2",{id:"users"},"Users"),(0,r.kt)("p",null,"If you are using the Google Fitness API you will need to authenticate your user using their Google account. This will give you access to the fit api and their data."),(0,r.kt)("p",null,"Follow the ",(0,r.kt)("a",{parentName:"p",href:"/docs/googleidentity/"},"Google Identity extension")," integration guide, you will just need to ensure that you add the Fitness API scope to your sign-in options:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'var options:GoogleIdentityOptions = new GoogleIdentityOptionsBuilder()\n        .addScope( "https://www.googleapis.com/auth/fitness.activity.read" )\n        .build();\n\nGoogleIdentity.service.setup( options );\n')),(0,r.kt)("p",null,"More information on the scopes is available ",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/fit/datatypes/activity"},"here"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This is only required to access the Google Fitness API and isn't required for the other services")),(0,r.kt)("p",null,"If your user isn't signed in, all queries will fail."))}h.isMDXComponent=!0}}]);