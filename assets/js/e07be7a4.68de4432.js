"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[82585],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=d(t),m=o,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||r;return t?a.createElement(f,l(l({ref:n},c),{},{components:t})):a.createElement(f,l({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var d=2;d<r;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},58862:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var a=t(87462),o=t(63366),r=(t(67294),t(3905)),l=["components"],i={title:"Storage - Download Files",sidebar_label:"Download Files"},s=void 0,d={unversionedId:"firebase/storage/download-files",id:"firebase/storage/download-files",title:"Storage - Download Files",description:"Download Files",source:"@site/docs/firebase/storage/download-files.md",sourceDirName:"firebase/storage",slug:"/firebase/storage/download-files",permalink:"/docs/firebase/storage/download-files",tags:[],version:"current",frontMatter:{title:"Storage - Download Files",sidebar_label:"Download Files"},sidebar:"firebase",previous:{title:"Upload Files",permalink:"/docs/firebase/storage/upload-files"},next:{title:"File Metadata",permalink:"/docs/firebase/storage/file-metadata"}},c=[{value:"Download Files",id:"download-files",children:[],level:2},{value:"Download Files",id:"download-files-1",children:[],level:2},{value:"Download in memory",id:"download-in-memory",children:[],level:2},{value:"Download to a local file",id:"download-to-a-local-file",children:[],level:2},{value:"Monitor Download Progress",id:"monitor-download-progress",children:[],level:2},{value:"Manage Downloads",id:"manage-downloads",children:[],level:2}],p={toc:c};function u(e){var n=e.components,t=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"download-files"},"Download Files"),(0,r.kt)("p",null,"To download a file, first create a Firebase Storage reference to the file you want to download."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'var reference:StorageReference = FirebaseStorage.service.getReference().child( "downloads/example.png" );\n')),(0,r.kt)("h2",{id:"download-files-1"},"Download Files"),(0,r.kt)("p",null,"Once you have a reference, you can download files from Firebase Storage by calling\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"getBytes()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"getFile()"),". You can also download the file directly from the URL\nusing a standard AS3 loader."),(0,r.kt)("h2",{id:"download-in-memory"},"Download in memory"),(0,r.kt)("p",null,"Download the file to a ",(0,r.kt)("inlineCode",{parentName:"p"},"ByteArray")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"getBytes()")," method. This is the easiest way\nto download a file, but it must load the entire contents of your file into memory. "),(0,r.kt)("p",null,"If you request a file larger than your app's available memory, your app will crash.\nTo protect against memory issues, ",(0,r.kt)("inlineCode",{parentName:"p"},"getBytes()")," takes a maximum amount of bytes to\ndownload. Set the maximum size to something you know your app can handle, or use\nanother download method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"var task:DownloadTask = reference.getBytes( 1024*1024 );\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: ",(0,r.kt)("inlineCode",{parentName:"p"},"DownloadTask")," retrieved from ",(0,r.kt)("inlineCode",{parentName:"p"},"getBytes")," cannot be paused or canceled and\nwill not dispatch the equivalent progress or paused events.")),(0,r.kt)("p",null,"To get access to the byte data you should listen for the ",(0,r.kt)("inlineCode",{parentName:"p"},"SUCCESS")," event:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"task.addEventListener( DownloadTaskEvent.SUCCESS, downloadSuccessHandler );\n")),(0,r.kt)("p",null,"In your handler you will have access to the byte data via the ",(0,r.kt)("inlineCode",{parentName:"p"},"taskSnapshot"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"private function downloadSuccessHandler( event:DownloadTaskEvent ):void \n{\n    var data:ByteArray = event.taskSnapshot.bytes; \n}\n")),(0,r.kt)("h2",{id:"download-to-a-local-file"},"Download to a local file"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"getFile()")," method downloads a file directly to a local device. "),(0,r.kt)("p",null,"Use this if your users want to have access to the file while offline or to share\nthe file in a different app. ",(0,r.kt)("inlineCode",{parentName:"p"},"getFile()")," returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"DownloadTask")," which you can use\nto manage your download and monitor the status of the download."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'var file:File = File.applicationStorageDirectory.resolvePath( "downloads/test.png" );\n\nvar task:DownloadTask = reference.getFile( file );\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A ",(0,r.kt)("inlineCode",{parentName:"p"},"DownloadTask")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"getFile")," will have access to all the functionality defined\nincluding progress and paused events.")),(0,r.kt)("h2",{id:"monitor-download-progress"},"Monitor Download Progress"),(0,r.kt)("p",null,"A download task dispatches ",(0,r.kt)("inlineCode",{parentName:"p"},"DownloadTaskEvent"),"s to indicate completion, progress, and errors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"task.addEventListener( DownloadTaskEvent.SUCCESS, downloadSuccessHandler );\ntask.addEventListener( DownloadTaskEvent.ERROR, downloadErrorHandler );\n")),(0,r.kt)("p",null,"Events are dispatched with a ",(0,r.kt)("inlineCode",{parentName:"p"},"DownloadTaskSnapshot")," object.\nThis object is an immutable view of the task at the time the event occurred."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"private function downloadSuccessHandler( event:DownloadTaskEvent ):void \n{\n    // event.taskSnapshot contains details about the completed download\n}\n\nprivate function downloadErrorHandler( event:DownloadTaskEvent ):void \n{\n    // Handle unsuccessful download\n    // event.errorMessage contains the reason for the error\n}\n")),(0,r.kt)("h2",{id:"manage-downloads"},"Manage Downloads"),(0,r.kt)("p",null,"In addition to starting downloads, you can pause, resume, and cancel uploads\nusing the ",(0,r.kt)("inlineCode",{parentName:"p"},"pause()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"resume()"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"cancel()")," methods. Pause and resume\nevents raise pause and progress state changes respectively. Canceling a\ndownload causes the download to fail with an error indicating that the download\nwas canceled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"// Pause the download\ntask.pause();\n\n// Resume the download\ntask.resume();\n\n// Cancel the download\ntask.cancel();\n")))}u.isMDXComponent=!0}}]);