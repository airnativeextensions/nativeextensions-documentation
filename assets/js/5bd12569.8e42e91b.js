"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[71506],{3905:function(t,e,n){n.d(e,{Zo:function(){return l},kt:function(){return d}});var r=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var c=r.createContext({}),u=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},l=function(t){var e=u(t.components);return r.createElement(c.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},h=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,c=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),h=u(n),d=o,f=h["".concat(c,".").concat(d)]||h[d]||p[d]||i;return n?r.createElement(f,a(a({ref:e},l),{},{components:n})):r.createElement(f,a({ref:e},l))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},26104:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return h}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],s={title:"Request Authorisation",sidebar_label:"Request Authorisation"},c=void 0,u={unversionedId:"contacts/request-authorisation",id:"contacts/request-authorisation",title:"Request Authorisation",description:"When you are going to be accessing the user's contacts you must check that your application has",source:"@site/docs/contacts/request-authorisation.md",sourceDirName:"contacts",slug:"/contacts/request-authorisation",permalink:"/docs/contacts/request-authorisation",tags:[],version:"current",frontMatter:{title:"Request Authorisation",sidebar_label:"Request Authorisation"},sidebar:"contacts",previous:{title:"Add the Extension",permalink:"/docs/contacts/add-the-extension"},next:{title:"Retrieving the Contact List",permalink:"/docs/contacts/retrieving-the-contact-list"}},l=[],p={toc:l};function h(t){var e=t.components,n=(0,o.Z)(t,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When you are going to be accessing the user's contacts you must check that your application has\nbeen allowed access. To this end the extension provides several helpers to check and request\naccess to the contact list. Normal permission rules apply here."),(0,i.kt)("p",null,"On Android these permissions are listed through the manifest additions. On older versions of\nAndroid these permissions are accepted when the user installs the application. More modern\nversions (Marshmallow 6 ","[v23]","+) require that you request the permissions similar to iOS.\nYou will still need to list them in your manifest and then follow the same code below as\nfor iOS, except that on Android you will be able to ask multiple times. You should respect\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"SHOULD_EXPLAIN")," status by displaying additional information to your user about why\nyou require this functionality."),(0,i.kt)("p",null,"On iOS the user must be asked at runtime, which you only get one chance to ask, after which\nyou must direct the user to manually change the permissions in the settings."),(0,i.kt)("p",null,"The following code will work across both platforms:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"Contacts.service.addEventListener( AuthorisationEvent.CHANGED, contacts_authorisationChangedHandler );\n\n\nswitch (Contacts.service.authorisationStatus())\n{\n    case AuthorisationStatus.SHOULD_EXPLAIN:\n    case AuthorisationStatus.NOT_DETERMINED:\n        // REQUEST ACCESS: This will display the permission dialog\n        Contacts.service.requestAccess();\n        return;\n    \n    case AuthorisationStatus.DENIED:\n    case AuthorisationStatus.UNKNOWN:\n    case AuthorisationStatus.RESTRICTED:\n        // ACCESS DENIED: You should inform your user appropriately\n        return;\n        \n    case AuthorisationStatus.AUTHORISED:\n        // AUTHORISED: Contacts will be available\n        break;                      \n}\n\n\nfunction contacts_authorisationChangedHandler( event:AuthorisationEvent ):void\n{\n    // Check event.status\n}\n")))}h.isMDXComponent=!0}}]);