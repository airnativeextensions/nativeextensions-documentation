(window.webpackJsonp=window.webpackJsonp||[]).push([[371],{427:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return l}));var r=t(2),o=t(6),a=(t(0),t(825)),i={title:"Google Cloud Message",sidebar_label:"Google Cloud Message"},c={unversionedId:"pushnotifications/gcm/google-cloud-message",id:"pushnotifications/gcm/google-cloud-message",isDocsHomePage:!1,title:"Google Cloud Message",description:"There are many ways to send notifications to your devices.",source:"@site/docs/pushnotifications/gcm/google-cloud-message.md",slug:"/pushnotifications/gcm/google-cloud-message",permalink:"/docs/pushnotifications/gcm/google-cloud-message",version:"current",sidebar_label:"Google Cloud Message"},s=[{value:"PHP Example",id:"php-example",children:[]}],p={rightToc:s};function l(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"There are many ways to send notifications to your devices."),Object(a.b)("p",null,"The basic procedure is once your application has sent the device token (registration id) to your server,\nyour server will send a message to the appropriate service (APNS/GCM) which will deliver the notification\nto the registered device."),Object(a.b)("h3",{id:"php-example"},"PHP Example"),Object(a.b)("p",null,"The following is a very basic PHP example, sending a message to a single device."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-php"}),"<?php\n/**\n * This is a test script to send a message to an GCM Android device, i.e. an Android device using Google Cloud Messaging. \n * \n * To use this script you need to set the following pieces of information\n *  - device registration id\n *  - api key (this is the browser API key)\n * \n * Then run it using php: \n * <code> php gcm_simplepush.php </code> \n *\n */\n// Put your device token here (without spaces):\n$registrationId = 'DEVICE_ID';\n// GCM API Key\n$apiKey = \"GCM_API_KEY\";\n\n$dataPayload = array(\n    'notification' => array(\n        'icon' => 'ic_stat_distriqt_default',\n        'alert' => 'You have a notification', \n        'title' => 'You have a notification', \n        'body' => \"The body of the notification\",\n        'sound' => 'default',\n        'vibrate' => 'true',\n    ),\n    'user_custom' => 'some-custom-value'\n);\n\n$response = sendNotification( \n    $apiKey, \n    array($registrationId), \n    $dataPayload,\n    null\n);\n\necho $response;\necho \"\\ncomplete...\\n\";\n////////////////////////////////////////////////////////////////////////////////\n//  \n//\n/**\n * The following function will send a GCM notification using curl.\n * \n * @param $apiKey               [string]    The Browser API key string for your GCM account\n * @param $registrationIdsArray [array]     An array of registration ids to send this notification to\n * @param $messageData          [array]     A named array of data to send as the notification data payload\n * @param $notification         [array]     A named array of data to send as the notification information\n */\nfunction sendNotification( $apiKey, $registrationIdsArray, $customData, $notification  )\n{\n    print_r($messageData);\n    print_r($registrationIdsArray);\n    $headers = array(\"Content-Type:\" . \"application/json\", \"Authorization:\" . \"key=\" . $apiKey);\n    $data = array(\n        'registration_ids' => $registrationIdsArray,\n    );\n    if ($customData != null)    $data['data'] = $customData;\n    if ($notification != null)  $data['notification'] = $notification;\n    $post = json_encode($data);\n    \n    print( $post );\n    $ch = curl_init();\n    curl_setopt( $ch, CURLOPT_HTTPHEADER, $headers ); \n    curl_setopt( $ch, CURLOPT_URL, \"https://android.googleapis.com/gcm/send\" );\n    curl_setopt( $ch, CURLOPT_SSL_VERIFYHOST, 0 );\n    curl_setopt( $ch, CURLOPT_SSL_VERIFYPEER, 0 );\n    curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true );\n    curl_setopt( $ch, CURLOPT_POSTFIELDS, $post );\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n")),Object(a.b)("p",null,Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://gist.github.com/marchbold/0377f398092c0d4874f9"}),"Source gist")),Object(a.b)("p",null,"You run these scripts using php:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"php script.php\n")))}l.isMDXComponent=!0},825:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return g}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=o.a.createContext({}),l=function(e){var n=o.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=l(e.components);return o.a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},f=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),f=r,g=u["".concat(i,".").concat(f)]||u[f]||d[f]||a;return t?o.a.createElement(g,c(c({ref:n},p),{},{components:t})):o.a.createElement(g,c({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<a;p++)i[p]=t[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);