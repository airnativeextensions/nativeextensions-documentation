(window.webpackJsonp=window.webpackJsonp||[]).push([[409],{465:function(e,n,i){"use strict";i.r(n),i.d(n,"frontMatter",(function(){return r})),i.d(n,"metadata",(function(){return s})),i.d(n,"rightToc",(function(){return d})),i.d(n,"default",(function(){return l}));var o=i(2),t=i(6),a=(i(0),i(807)),r={title:"OneSignal",sidebar_label:"OneSignal"},s={unversionedId:"pushnotifications/onesignal",id:"pushnotifications/onesignal",isDocsHomePage:!1,title:"OneSignal",description:"This ANE implements the OneSignal iOS and Android SDKs for usage in your mobile AIR applications.",source:"@site/docs/pushnotifications/onesignal.md",slug:"/pushnotifications/onesignal",permalink:"/docs/pushnotifications/onesignal",version:"current",sidebar_label:"OneSignal",sidebar:"pushnotifications",previous:{title:"Firebase Cloud Messaging",permalink:"/docs/pushnotifications/firebase-cloud-messaging"},next:{title:"Windows Notification Service",permalink:"/docs/pushnotifications/windows-notification-service"}},d=[{value:"Required For Setup",id:"required-for-setup",children:[]},{value:"Required ANEs",id:"required-anes",children:[{value:"Android Support",id:"android-support",children:[]},{value:"Google Play Services",id:"google-play-services",children:[]},{value:"Firebase",id:"firebase",children:[]}]},{value:"Extension IDs",id:"extension-ids",children:[]},{value:"Info Additions and Entitlements",id:"info-additions-and-entitlements",children:[]},{value:"Manifest Additions",id:"manifest-additions",children:[{value:"MultiDex Applications",id:"multidex-applications",children:[]}]}],c={rightToc:d};function l(e){var n=e.components,i=Object(t.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},c,i,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"This ANE implements the OneSignal iOS and Android SDKs for usage in your mobile AIR applications."),Object(a.b)("p",null,"OneSignal is a high volume and reliable push notification service for websites and mobile applications. They support all major native and mobile platforms by providing dedicated SDKs for each platform, a RESTful server API, and an online dashboard for marketers to design and send push notifications."),Object(a.b)("p",null,"OneSignal provides a simple interface to push notifications, letting content creators focus on quality user engagement instead of complex implementation. "),Object(a.b)("h2",{id:"required-for-setup"},"Required For Setup"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://onesignal.com/"}),"A OneSignal Account")," if you do not already have one"),Object(a.b)("li",{parentName:"ul"},"Your OneSignal App ID, available in ",Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://documentation.onesignal.com/docs/accounts-and-keys#section-app-id"}),"Keys & IDs"))),Object(a.b)("h2",{id:"required-anes"},"Required ANEs"),Object(a.b)("p",null,"To use this service add the ",Object(a.b)("inlineCode",{parentName:"p"},"com.distriqt.PushNotifications.OneSignal.ane")," variant of the extension to your project in place of  ",Object(a.b)("inlineCode",{parentName:"p"},"com.distriqt.PushNotifications.ane"),". You should only add one of the variants to your project. If you need to support multiple services please use the All Services variant."),Object(a.b)("p",null,"All variants of the Push Notifications extension have the same extension id: ",Object(a.b)("inlineCode",{parentName:"p"},"com.distriqt.PushNotifications")," so you should add this to your extensions list in your application descriptor:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),"<extensions>\n    ...\n    \n    <extensionID>com.distriqt.PushNotifications</extensionID>\n    \n    ...\n</extensions>\n")),Object(a.b)("p",null,"Make sure you have added the common ANEs from the ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"add-the-extension"}),"Add the Extension")," section first. This includes the Core and AndroidX ANEs."),Object(a.b)("h3",{id:"android-support"},"Android Support"),Object(a.b)("p",null,"The Android Support libraries encompass the Android Support, Android X and common Google libraries. "),Object(a.b)("p",null,"These libraries are specific to Android. There are no issues including these on all platforms, they are just ",Object(a.b)("strong",{parentName:"p"},"required")," for Android."),Object(a.b)("p",null,"This extension requires the following extensions:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://github.com/distriqt/ANE-AndroidSupport/raw/master/lib/androidx.cardview.ane"}),"androidx.cardview.ane"))),Object(a.b)("p",null,"You can access these extensions here: ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/distriqt/ANE-AndroidSupport"}),"https://github.com/distriqt/ANE-AndroidSupport"),"."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note"),": if you have been using the older ",Object(a.b)("inlineCode",{parentName:"p"},"com.distriqt.androidsupport.*")," (Android Support) extensions you should remove these extensions and replace it with the ",Object(a.b)("inlineCode",{parentName:"p"},"androidx")," extensions listed above. This is the new version of the android support libraries and moving forward all our extensions will require AndroidX.")),Object(a.b)("h3",{id:"google-play-services"},"Google Play Services"),Object(a.b)("p",null,"This ANE requires usage of certain aspects of the Google Play Services client library.\nThe client library is available as a series of ANEs that you add into your applications packaging options.\nEach separate ANE provides a component from the Play Services client library and are used by different ANEs.\nThese client libraries aren't packaged with this ANE as they are used by multiple ANEs and separating them\nwill avoid conflicts, allowing you to use multiple ANEs in the one application."),Object(a.b)("p",null,"This ANE requires the following Google Play Services:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://github.com/distriqt/ANE-GooglePlayServices/raw/master/lib/com.distriqt.playservices.Base.ane"}),"com.distriqt.playservices.Base.ane"))),Object(a.b)("p",null,"Optional:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://github.com/distriqt/ANE-GooglePlayServices/raw/master/lib/com.distriqt.playservices.Analytics.ane"}),"com.distriqt.playservices.Analytics.ane")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://github.com/distriqt/ANE-GooglePlayServices/raw/master/lib/com.distriqt.playservices.Location.ane"}),"com.distriqt.playservices.Location.ane"))),Object(a.b)("p",null,"You must include the above native extensions in your application along with this extension,\nand you need to ensure they are packaged with your application."),Object(a.b)("p",null,"You can access the Google Play Services client library extensions here: ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/distriqt/ANE-GooglePlayServices"}),"https://github.com/distriqt/ANE-GooglePlayServices"),"."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"If you have used an older version of this ANE you should remove the Play Services GCM ANE. It is no longer required. ")),Object(a.b)("h3",{id:"firebase"},"Firebase"),Object(a.b)("p",null,"To use Firebase Cloud Messaging you must include the core Firebase libraries. The core libraries are available in the ",Object(a.b)("inlineCode",{parentName:"p"},"com.google.firebase.core")," extension alongside the Google Play Services:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://github.com/distriqt/ANE-GooglePlayServices/raw/master/lib/com.google.firebase.core.ane"}),"com.google.firebase.core.ane"))),Object(a.b)("p",null,"You do not need to initialise or configure this "),Object(a.b)("h2",{id:"extension-ids"},"Extension IDs"),Object(a.b)("p",null,"The following should be added to your ",Object(a.b)("inlineCode",{parentName:"p"},"extensions")," node in your application descriptor to identify all the required ANEs in your application:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),"<extensions>\n    <extensionID>com.distriqt.PushNotifications</extensionID>\n\n    <extensionID>com.distriqt.Core</extensionID>\n\n    <extensionID>com.distriqt.playservices.Base</extensionID>\n\n    <extensionID>com.google.firebase.core</extensionID>\n    <extensionID>com.google.android.datatransport</extensionID>\n    <extensionID>com.google.dagger</extensionID>\n    <extensionID>androidx.core</extensionID>\n    <extensionID>androidx.browser</extensionID>\n    <extensionID>androidx.cardview</extensionID>\n</extensions>\n")),Object(a.b)("h1",{id:"ios"},"iOS"),Object(a.b)("p",null,"Firstly make sure you have generated your iOS Push Certificates. You can follow the guide by OneSignal: "),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://documentation.onesignal.com/docs/generate-an-ios-push-certificate"}),"Generate an iOS Push Certificate")," ")),Object(a.b)("h2",{id:"info-additions-and-entitlements"},"Info Additions and Entitlements"),Object(a.b)("p",null,"Push notifications require a few additions to the Info plist and Entitlements section\nof your application to correctly configure your application for push notifications. "),Object(a.b)("p",null,"You should add the listing below to application descriptor iPhone node."),Object(a.b)("p",null,"You must replace the ",Object(a.b)("inlineCode",{parentName:"p"},"BUNDLE_SEED_ID")," and ",Object(a.b)("inlineCode",{parentName:"p"},"BUNDLE_IDENTIFIER")," with the information you\ngathered when setting up your application. Also make sure you set the environment\ncorrectly either using production or development, both are shown in the example\nbelow with the production version commented out. More on this below."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),"<iPhone>\n    <InfoAdditions><![CDATA[\n        <key>UIPrerenderedIcon</key>\n        <true/>\n        \n        <key>UIDeviceFamily</key>\n        <array>\n            <string>1</string>\n            <string>2</string>\n        </array>\n        \n        <key>MinimumOSVersion</key>\n        <string>9.0</string>\n\n        <key>UIBackgroundModes</key>\n        <array>\n            <string>remote-notification</string>\n        </array>\n        \n    ]]></InfoAdditions>\n    <requestedDisplayResolution>high</requestedDisplayResolution>\n    <Entitlements><![CDATA[\n        \n        \x3c!-- DEVELOPMENT --\x3e\n        <key>get-task-allow</key>\n        <true/>\n        <key>aps-environment</key>\n        <string>development</string>\n        \n        \x3c!-- PRODUCTION --\x3e\n        \x3c!--\n        <key>get-task-allow</key>\n        <false/>\n        <key>aps-environment</key>\n        <string>production</string>\n        --\x3e\n        \n        <key>application-identifier</key>\n        <string>BUNDLE_SEED_ID.BUNDLE_IDENTIFIER</string>\n        <key>keychain-access-groups</key>\n        <array>\n            <string>BUNDLE_SEED_ID.*</string>\n        </array>\n        \n    ]]></Entitlements>\n</iPhone>\n")),Object(a.b)("p",null,"The first entitlement field is the ",Object(a.b)("inlineCode",{parentName:"p"},"aps-environment"),". This field indicates whether\nwe are using the development or the production environment. It must be either\n",Object(a.b)("inlineCode",{parentName:"p"},"development")," or ",Object(a.b)("inlineCode",{parentName:"p"},"production")," and depends on which configuration you are using.\nIf you are running a debug build you should use development. If you are looking\nto publish the application to the AppStore, you should use production."),Object(a.b)("p",null,"You should have noted the ",Object(a.b)("inlineCode",{parentName:"p"},"BUNDLE_SEED_ID")," (or App ID Prefix) and ",Object(a.b)("inlineCode",{parentName:"p"},"BUNDLE_IDENTIFIER"),"\nwhen you were setting up your application in the iOS developer center.\nThe seed id should be a unique ten character string and the identifier should be\nsimilar to your AIR application id."),Object(a.b)("h1",{id:"android"},"Android"),Object(a.b)("p",null,"Firstly make sure you have generated your Google Service API Key. You can follow the guide by OneSignal: "),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://documentation.onesignal.com/docs/generate-a-google-server-api-key"}),"Generate a Google Server API Key")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://documentation.onesignal.com/docs/firebase-cloud-messaging-fcm#section-sender-id-server-key"}),"Use an existing Firebase project"))),Object(a.b)("h2",{id:"manifest-additions"},"Manifest Additions"),Object(a.b)("p",null,"You must add all the OneSignal related manifest additions along with several additions for Cloud Messaging. This includes all the manifest additions required for Firebase core / analytics implementation."),Object(a.b)("p",null,"The following shows the complete manifest additions node. You must replace ",Object(a.b)("inlineCode",{parentName:"p"},"APPLICATION_PACKAGE")," with your\nAIR application's Java package name, something like ",Object(a.b)("inlineCode",{parentName:"p"},"air.com.distriqt.test"),".\nGenerally this is your AIR application id prefixed by ",Object(a.b)("inlineCode",{parentName:"p"},"air.")," unless you have specified no air flair in your build options."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),'<manifest android:installLocation="auto">\n    \n    <uses-permission android:name="android.permission.INTERNET" />\n    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />\n    <uses-permission android:name="android.permission.WAKE_LOCK" />\n    <uses-permission android:name="android.permission.VIBRATE" />\n    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />\n\n    <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />\n    <permission android:name="APPLICATION_PACKAGE.permission.C2D_MESSAGE" android:protectionLevel="signature" />\n    <uses-permission android:name="APPLICATION_PACKAGE.permission.C2D_MESSAGE" />\n    <uses-permission android:name="com.google.android.finsky.permission.BIND_GET_INSTALL_REFERRER_SERVICE" />\n\n\n    \x3c!-- Samsung --\x3e\n    <uses-permission android:name="com.sec.android.provider.badge.permission.READ" />\n    <uses-permission android:name="com.sec.android.provider.badge.permission.WRITE" /> \n    \x3c!-- HTC --\x3e\n    <uses-permission android:name="com.htc.launcher.permission.READ_SETTINGS" />\n    <uses-permission android:name="com.htc.launcher.permission.UPDATE_SHORTCUT" /> \n    \x3c!-- Sony --\x3e\n    <uses-permission android:name="com.sonyericsson.home.permission.BROADCAST_BADGE" />\n    <uses-permission android:name="com.sonymobile.home.permission.PROVIDER_INSERT_BADGE" /> \n    \x3c!-- Apex --\x3e\n    <uses-permission android:name="com.anddoes.launcher.permission.UPDATE_COUNT" /> \n    \x3c!-- Solid --\x3e\n    <uses-permission android:name="com.majeur.launcher.permission.UPDATE_BADGE" /> \n    \x3c!-- Huawei --\x3e\n    <uses-permission android:name="com.huawei.android.launcher.permission.CHANGE_BADGE" />\n    <uses-permission android:name="com.huawei.android.launcher.permission.READ_SETTINGS" />\n    <uses-permission android:name="com.huawei.android.launcher.permission.WRITE_SETTINGS" /> \n    \x3c!-- ZUK --\x3e\n    <uses-permission android:name="android.permission.READ_APP_BADGE" /> \n    \x3c!-- OPPO --\x3e\n    <uses-permission android:name="com.oppo.launcher.permission.READ_SETTINGS" />\n    <uses-permission android:name="com.oppo.launcher.permission.WRITE_SETTINGS" /> \n    \x3c!-- EvMe --\x3e\n    <uses-permission android:name="me.everything.badger.permission.BADGE_COUNT_READ" />\n    <uses-permission android:name="me.everything.badger.permission.BADGE_COUNT_WRITE" />\n    \n\n    <application>\n        <meta-data android:name="com.google.android.gms.version" android:value="@integer/google_play_services_version" />\n\n        <activity android:name="com.google.android.gms.common.api.GoogleApiActivity"\n            android:theme="@android:style/Theme.Translucent.NoTitleBar"\n            android:exported="false"/>\n\n\n        <provider\n            android:name="com.distriqt.extension.pushnotifications.content.FileProvider"\n            android:authorities="APPLICATION_PACKAGE.pushnotificationsfileprovider"\n            android:grantUriPermissions="true"\n            android:exported="false">\n            <meta-data \n                android:name="android.support.FILE_PROVIDER_PATHS" \n                android:resource="@xml/distriqt_pushnotifications_paths" />\n        </provider>\n\n\n        \x3c!-- ONE SIGNAL --\x3e\n                    <meta-data\n                        android:name="onesignal_app_id"\n                        android:value="" /> \x3c!-- Deprecated - Pulled from OneSignal dashboard. --\x3e\n                    <meta-data\n                        android:name="onesignal_google_project_number"\n                        android:value="str:REMOTE" />\n\n                    <receiver\n                        android:name="com.onesignal.GcmBroadcastReceiver"\n                        android:permission="com.google.android.c2dm.permission.SEND" >\n\n                        \x3c!-- High priority so OneSignal payloads can be filtered from other GCM receivers if filterOtherGCMReceivers is enabled. --\x3e\n                        <intent-filter android:priority="999" >\n                            <action android:name="com.google.android.c2dm.intent.RECEIVE" />\n\n                            <category android:name="APPLICATION_PACKAGE" />\n                        </intent-filter>\n                    </receiver>\n                    <receiver android:name="com.onesignal.NotificationOpenedReceiver" />\n\n                    <service android:name="com.onesignal.GcmIntentService" />\n                    <service\n                        android:name="com.onesignal.GcmIntentJobService"\n                        android:permission="android.permission.BIND_JOB_SERVICE" />\n                    <service\n                        android:name="com.onesignal.RestoreJobService"\n                        android:permission="android.permission.BIND_JOB_SERVICE" />\n                    <service\n                        android:name="com.onesignal.RestoreKickoffJobService"\n                        android:permission="android.permission.BIND_JOB_SERVICE" />\n                    <service\n                        android:name="com.onesignal.SyncService"\n                        android:stopWithTask="true" />\n                    <service\n                        android:name="com.onesignal.SyncJobService"\n                        android:permission="android.permission.BIND_JOB_SERVICE" />\n\n                    <activity\n                        android:name="com.onesignal.PermissionsActivity"\n                        android:theme="@android:style/Theme.Translucent.NoTitleBar" />\n\n                    <service android:name="com.onesignal.NotificationRestoreService" />\n\n                    <receiver android:name="com.onesignal.BootUpReceiver" >\n                        <intent-filter>\n                            <action android:name="android.intent.action.BOOT_COMPLETED" />\n                            <action android:name="android.intent.action.QUICKBOOT_POWERON" />\n                        </intent-filter>\n                    </receiver>\n                    <receiver android:name="com.onesignal.UpgradeReceiver" >\n                        <intent-filter>\n                            <action android:name="android.intent.action.MY_PACKAGE_REPLACED" />\n                        </intent-filter>\n                    </receiver>\n                    \x3c!--\n                         FirebaseMessagingService performs security checks at runtime,\n                         but set to not exported to explicitly avoid allowing another app to call it.\n                    --\x3e\n                    <service\n                        android:name="com.google.firebase.messaging.FirebaseMessagingService"\n                        android:exported="false" >\n                        <intent-filter android:priority="-500" >\n                            <action android:name="com.google.firebase.MESSAGING_EVENT" />\n                        </intent-filter>\n                    </service>\n\n\n                    \x3c!-- FIREBASE CORE --\x3e\n                    \x3c!-- common --\x3e\n                    <service\n                        android:name="com.google.firebase.components.ComponentDiscoveryService"\n                        android:directBootAware="true"\n                        android:exported="false" >\n                        <meta-data\n                            android:name="com.google.firebase.components:com.google.firebase.analytics.connector.internal.AnalyticsConnectorRegistrar"\n                            android:value="com.google.firebase.components.ComponentRegistrar" />\n                        <meta-data\n                            android:name="com.google.firebase.components:com.google.firebase.installations.FirebaseInstallationsRegistrar"\n                            android:value="com.google.firebase.components.ComponentRegistrar" />\n                        <meta-data\n                            android:name="com.google.firebase.components:com.google.firebase.iid.Registrar"\n                            android:value="com.google.firebase.components.ComponentRegistrar" />\n\n\n                        <meta-data\n                            android:name="com.google.firebase.components:com.google.firebase.messaging.FirebaseMessagingRegistrar"\n                            android:value="com.google.firebase.components.ComponentRegistrar" />\n                        <meta-data\n                            android:name="com.google.firebase.components:com.google.firebase.datatransport.TransportRegistrar"\n                            android:value="com.google.firebase.components.ComponentRegistrar" />\n                    </service>\n                    <provider\n                        android:name="com.google.firebase.provider.FirebaseInitProvider"\n                        android:authorities="APPLICATION_PACKAGE.firebaseinitprovider"\n                        android:exported="false"\n                        android:initOrder="100" />\n\n\n\n                    \x3c!-- analytics --\x3e\n                    <receiver\n                        android:name="com.google.android.gms.measurement.AppMeasurementReceiver"\n                        android:enabled="true"\n                        android:exported="false" >\n                    </receiver>\n                    <receiver\n                        android:name="com.google.android.gms.measurement.AppMeasurementInstallReferrerReceiver"\n                        android:enabled="true"\n                        android:exported="true"\n                        android:permission="android.permission.INSTALL_PACKAGES" >\n                        <intent-filter>\n                            <action android:name="com.android.vending.INSTALL_REFERRER" />\n                        </intent-filter>\n                    </receiver>\n\n                    <service\n                        android:name="com.google.android.gms.measurement.AppMeasurementService"\n                        android:enabled="true"\n                        android:exported="false" />\n                    <service\n                        android:name="com.google.android.gms.measurement.AppMeasurementJobService"\n                        android:enabled="true"\n                        android:exported="false"\n                        android:permission="android.permission.BIND_JOB_SERVICE" />\n\n\n                    \x3c!-- iid --\x3e\n                    <receiver\n                        android:name="com.google.firebase.iid.FirebaseInstanceIdReceiver"\n                        android:exported="true"\n                        android:permission="com.google.android.c2dm.permission.SEND" >\n                        <intent-filter>\n                            <action android:name="com.google.android.c2dm.intent.RECEIVE" />\n                        </intent-filter>\n                    </receiver>\n\n\n                    <service\n                        android:name="com.google.android.datatransport.runtime.backends.TransportBackendDiscovery"\n                        android:exported="false" >\n                        <meta-data\n                            android:name="backend:com.google.android.datatransport.cct.CctBackendFactory"\n                            android:value="cct" />\n                    </service>\n                    <service\n                        android:name="com.google.android.datatransport.runtime.scheduling.jobscheduling.JobInfoSchedulerService"\n                        android:exported="false"\n                        android:permission="android.permission.BIND_JOB_SERVICE" >\n                    </service>\n\n                    <receiver\n                        android:name="com.google.android.datatransport.runtime.scheduling.jobscheduling.AlarmManagerSchedulerBroadcastReceiver"\n                        android:exported="false" />\n\n\n    </application>\n    \n</manifest>\n')),Object(a.b)("h3",{id:"multidex-applications"},"MultiDex Applications"),Object(a.b)("p",null,"If you have a large application and are supporting Android 4.x then you will need to ensure you enable your application to correctly support MultiDex to allow the application to be broken up into smaller dex packages."),Object(a.b)("p",null,"This is enabled by default with releases of AIR v25+, except in the Android 4.x case where you need to change the manifest additions for the application tag to match the following and use the ",Object(a.b)("inlineCode",{parentName:"p"},"MultiDexApplication"),"."),Object(a.b)("h4",{id:"using-androidx"},"Using AndroidX"),Object(a.b)("p",null,"This will require the addition of the ",Object(a.b)("inlineCode",{parentName:"p"},"androidx.multidex")," extension which contains the ",Object(a.b)("inlineCode",{parentName:"p"},"androidx.multidex.MultiDexApplication")," implementation."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),'<manifest android:installLocation="auto">\n    \x3c!-- PERMISSIONS --\x3e\n\n    <application android:name="androidx.multidex.MultiDexApplication">\n\n        \x3c!-- ACTIVITIES / RECEIVERS / SERVICES --\x3e\n\n    </application>\n</manifest>\n')))}l.isMDXComponent=!0},807:function(e,n,i){"use strict";i.d(n,"a",(function(){return p})),i.d(n,"b",(function(){return b}));var o=i(0),t=i.n(o);function a(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,o)}return i}function s(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){a(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function d(e,n){if(null==e)return{};var i,o,t=function(e,n){if(null==e)return{};var i,o,t={},a=Object.keys(e);for(o=0;o<a.length;o++)i=a[o],n.indexOf(i)>=0||(t[i]=e[i]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)i=a[o],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(t[i]=e[i])}return t}var c=t.a.createContext({}),l=function(e){var n=t.a.useContext(c),i=n;return e&&(i="function"==typeof e?e(n):s(s({},n),e)),i},p=function(e){var n=l(e.components);return t.a.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.a.createElement(t.a.Fragment,{},n)}},u=t.a.forwardRef((function(e,n){var i=e.components,o=e.mdxType,a=e.originalType,r=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=l(i),u=o,b=p["".concat(r,".").concat(u)]||p[u]||m[u]||a;return i?t.a.createElement(b,s(s({ref:n},c),{},{components:i})):t.a.createElement(b,s({ref:n},c))}));function b(e,n){var i=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=i.length,r=new Array(a);r[0]=u;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var c=2;c<a;c++)r[c]=i[c];return t.a.createElement.apply(null,r)}return t.a.createElement.apply(null,i)}u.displayName="MDXCreateElement"}}]);