(window.webpackJsonp=window.webpackJsonp||[]).push([[334],{1165:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/adcolony-setup_new_app-a9a086c813d40182c137512a222bd508.png"},1166:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/adcolony-test-ce2442672c1dbf886e5b2ff84f524c6a.png"},390:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return d})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return c}));var o=n(2),a=n(6),i=(n(0),n(899)),r={title:"AdColony",sidebar_label:"AdColony"},d={unversionedId:"adverts/mediation/adcolony",id:"adverts/mediation/adcolony",isDocsHomePage:!1,title:"AdColony",description:"This guide is intended for publishers who want to use the Google Mobile Ads SDK to load and display ads from AdColony through Open Bidding or waterfall mediation. It covers how to add AdColony ads to an ad unit's mediation configuration, and how to integrate the AdColony SDK and adapter into an AIR app.",source:"@site/docs/adverts/mediation/adcolony.md",slug:"/adverts/mediation/adcolony",permalink:"/docs/adverts/mediation/adcolony",version:"current",sidebar_label:"AdColony"},s=[{value:"Step 1: Set up AdColony",id:"step-1-set-up-adcolony",children:[]},{value:"Step 2: Configure mediation settings for your AdMob ad unit",id:"step-2-configure-mediation-settings-for-your-admob-ad-unit",children:[]},{value:"Step 3: Import the AdColony SDK and adapter ANE",id:"step-3-import-the-adcolony-sdk-and-adapter-ane",children:[{value:"Core ANE",id:"core-ane",children:[]}]},{value:"Step 4: Additional code required",id:"step-4-additional-code-required",children:[{value:"Android",id:"android",children:[]},{value:"iOS",id:"ios",children:[]}]},{value:"Step 5: Test your implementation",id:"step-5-test-your-implementation",children:[]},{value:"Optional steps",id:"optional-steps",children:[{value:"EU Consent and GDPR",id:"eu-consent-and-gdpr",children:[]},{value:"Permissions",id:"permissions",children:[]}]},{value:"Further information",id:"further-information",children:[]}],l={rightToc:s};function c(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This guide is intended for publishers who want to use the Google Mobile Ads SDK to load and display ads from AdColony through Open Bidding or waterfall mediation. It covers how to add AdColony ads to an ad unit's mediation configuration, and how to integrate the AdColony SDK and adapter into an AIR app."),Object(i.b)("h2",{id:"step-1-set-up-adcolony"},"Step 1: Set up AdColony"),Object(i.b)("p",null,Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://clients.adcolony.com/signup"}),"Sign up")," or ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://clients.adcolony.com/login"}),"log in")," to your AdColony account.  Add your app to the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://clients.adcolony.com/apps"}),"AdColony publisher dashboard")," by clicking the ",Object(i.b)("strong",{parentName:"p"},"Setup New App")," button."),Object(i.b)("p",null,Object(i.b)("img",{src:n(1165).default})),Object(i.b)("p",null,"Continue following the guide on the AdMob site:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(o.a)({parentName:"li"},{href:"https://developers.google.com/admob/android/mediation/adcolony#step_1_set_up_adcolony"}),"Android")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(o.a)({parentName:"li"},{href:"https://developers.google.com/admob/ios/mediation/adcolony#step_1_set_up_adcolony"}),"iOS"))),Object(i.b)("h2",{id:"step-2-configure-mediation-settings-for-your-admob-ad-unit"},"Step 2: Configure mediation settings for your AdMob ad unit"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(o.a)({parentName:"li"},{href:"https://developers.google.com/admob/android/mediation/adcolony#step_2_configure_mediation_settings_for_your_ad_unit"}),"Android")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(o.a)({parentName:"li"},{href:"https://developers.google.com/admob/ios/mediation/adcolony#step_2_configure_mediation_settings_for_your_ad_unit"}),"iOS"))),Object(i.b)("h2",{id:"step-3-import-the-adcolony-sdk-and-adapter-ane"},"Step 3: Import the AdColony SDK and adapter ANE"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"com.distriqt.admob.AdColony")," ANE includes the AdColony SDK and the AdMob AdColony mediation adapter. This is everything you need to get AdColony mediation working in your application."),Object(i.b)("p",null,"To add the ANE download it from the repository and add it to your application:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(o.a)({parentName:"li"},{href:"https://github.com/distriqt/ANE-Adverts-Mediation/raw/master/lib/adcolony/com.distriqt.admob.AdColony.ane"}),"com.distriqt.admob.AdColony.ane"))),Object(i.b)("p",null,"Add the extension id to your application descriptor:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),"<extensions>\n    \x3c!-- OTHER EXTENSIONS --\x3e\n\n    <extensionID>com.distriqt.admob.AdColony</extensionID>\n</extensions>\n")),Object(i.b)("p",null,"More information on adding ANEs in this ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/tutorials/getting-started"}),"tutorial")),Object(i.b)("h3",{id:"core-ane"},"Core ANE"),Object(i.b)("p",null,"Note all our extensions rely on the Core ANE. Even if you are using this mediation adapter with another providers ANEs you must include the Core ANE."),Object(i.b)("p",null,"The Core ANE doesn't provide any functionality in itself but provides support libraries and frameworks used by our extensions. It also includes some centralised code for some common actions that can cause issues if they are implemented in each individual extension."),Object(i.b)("p",null,"You can access this extension here: ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/distriqt/ANE-Core"}),"https://github.com/distriqt/ANE-Core"),"."),Object(i.b)("h2",{id:"step-4-additional-code-required"},"Step 4: Additional code required"),Object(i.b)("h3",{id:"android"},"Android"),Object(i.b)("p",null,"Add the following to your manifest additions inside the ",Object(i.b)("inlineCode",{parentName:"p"},"application")," tag:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),'\x3c!-- AD COLONY --\x3e\n<activity\n    android:name="com.adcolony.sdk.AdColonyInterstitialActivity"\n    android:configChanges="keyboardHidden|orientation|screenSize"\n    android:hardwareAccelerated="true" />\n<activity\n    android:name="com.adcolony.sdk.AdColonyAdViewActivity"\n    android:configChanges="keyboardHidden|orientation|screenSize"\n    android:hardwareAccelerated="true" />\n')),Object(i.b)("h3",{id:"ios"},"iOS"),Object(i.b)("p",null,"Add the following to your info additions. If you already have an ",Object(i.b)("inlineCode",{parentName:"p"},"SKAdNetworkItems")," then append the ",Object(i.b)("inlineCode",{parentName:"p"},"dict")," items to the ",Object(i.b)("inlineCode",{parentName:"p"},"array"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),"<key>SKAdNetworkItems</key>\n<array>\n    <dict>\n        <key>SKAdNetworkIdentifier</key>\n        <string>4pfyvq9l8r.skadnetwork</string>\n    </dict>\n    <dict>\n        <key>SKAdNetworkIdentifier</key>\n        <string>6g9af3uyq4.skadnetwork</string>\n    </dict>\n</array>\n")),Object(i.b)("p",null,"Also check each ad network partner's documentation for any additional ",Object(i.b)("inlineCode",{parentName:"p"},"SKAdNetworkIdentifier")," values that they require:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(o.a)({parentName:"li"},{href:"https://support.adcolony.com/helpdesk/network-ids-for-skadnetwork-ios-only/"}),"AdColony"))),Object(i.b)("h2",{id:"step-5-test-your-implementation"},"Step 5: Test your implementation"),Object(i.b)("p",null,"To enable test ads on AdColony, go to your AdColony dashboard and navigate to Monetization > Apps. Select your Zone for which you would like to enable test ads under the Ad Zones section of your app. Test ads can be enabled by checking Yes to Show test ads only? under the Development section."),Object(i.b)("p",null,Object(i.b)("img",{src:n(1166).default})),Object(i.b)("h2",{id:"optional-steps"},"Optional steps"),Object(i.b)("h3",{id:"eu-consent-and-gdpr"},"EU Consent and GDPR"),Object(i.b)("p",null,"Under the Google EU User Consent Policy, you must ensure that certain disclosures are given to, and consents obtained from, users in the European Economic Area (EEA) regarding the use of device identifiers and personal data. This policy reflects the requirements of the EU ePrivacy Directive and the General Data Protection Regulation (GDPR). When seeking consent, you must identify each ad network in your mediation chain that may collect, receive, or use personal data and provide information about each network's use. Google currently is unable to pass the user's consent choice to such networks automatically."),Object(i.b)("p",null,"The section below shows you how to enable or disable personalized ads for AdColony."),Object(i.b)("p",null,"The AdColony adapter provides the ",Object(i.b)("inlineCode",{parentName:"p"},"AdColony.instance.getAppOptions()")," method to customize parameters to be sent to AdColony's SDK. Two methods relevant to GDPR on these options are ",Object(i.b)("inlineCode",{parentName:"p"},"setPrivacyFrameworkRequired()")," and ",Object(i.b)("inlineCode",{parentName:"p"},"setPrivacyConsentString()"),", added in AdColony SDK 4.2.0. The following sample code demonstrates how to pass these parameters to the AdColony adapter, which are then used in AdColony\u2019s initialization method. These options must be set before you initialize mobile ads to ensure they get forwarded properly to AdColony's SDK:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-actionscript"}),'AdColony.instance.getAppOptions()\n        .setPrivacyFrameworkRequired( AdColonyAppOptions.GDPR, true )\n        .setPrivacyConsentString( AdColonyAppOptions.GDPR, "1" );\n')),Object(i.b)("p",null,"See ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/AdColony/AdColony-Android-SDK/wiki/Privacy-Laws#gdpr"}),"AdColony\u2019s GDPR implementation details")," for more information about what values may be provided in these methods."),Object(i.b)("h3",{id:"permissions"},"Permissions"),Object(i.b)("p",null,"For optimal performance, AdColony recommends adding the following optional permissions to your app's manifest additions:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),'<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />\n<uses-permission android:name="android.permission.VIBRATE" />\n')),Object(i.b)("h2",{id:"further-information"},"Further information"),Object(i.b)("p",null,"See the Google AdColony Mediation guide:"),Object(i.b)("p",null,Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://developers.google.com/admob/android/mediation/adcolony"}),"https://developers.google.com/admob/android/mediation/adcolony")))}c.isMDXComponent=!0},899:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var o=n(0),a=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),c=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},p=function(e){var t=c(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(n),b=o,m=p["".concat(r,".").concat(b)]||p[b]||u[b]||i;return n?a.a.createElement(m,d(d({ref:t},l),{},{components:n})):a.a.createElement(m,d({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=b;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d.mdxType="string"==typeof e?e:o,r[1]=d;for(var l=2;l<i;l++)r[l]=n[l];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);