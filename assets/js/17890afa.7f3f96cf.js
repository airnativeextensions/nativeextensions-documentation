"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[24949],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,c=function(e,t){if(null==e)return{};var n,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,c=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),f=c,v=d["".concat(s,".").concat(f)]||d[f]||p[f]||a;return n?r.createElement(v,o(o({ref:t},u),{},{components:n})):r.createElement(v,o({ref:t},u))}));function f(e,t){var n=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var a=n.length,o=new Array(a);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:c,o[1]=i;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},40073:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var r=n(87462),c=n(63366),a=(n(67294),n(3905)),o=["components"],i={title:"Contact Picker UI",sidebar_label:"Contact Picker UI"},s=void 0,l={unversionedId:"contacts/contact-picker-ui",id:"contacts/contact-picker-ui",title:"Contact Picker UI",description:"This functionality allows you to display a native contact picker UI to allow the user to select a",source:"@site/docs/contacts/contact-picker-ui.md",sourceDirName:"contacts",slug:"/contacts/contact-picker-ui",permalink:"/docs/contacts/contact-picker-ui",draft:!1,tags:[],version:"current",frontMatter:{title:"Contact Picker UI",sidebar_label:"Contact Picker UI"},sidebar:"contacts",previous:{title:"Contact Images",permalink:"/docs/contacts/contact-images"},next:{title:"Migrating to v5.1",permalink:"/docs/contacts/migrating-to-v5.1"}},u={},p=[],d={toc:p};function f(e){var t=e.components,n=(0,c.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This functionality allows you to display a native contact picker UI to allow the user to select a\ncontact. If you require a user selection of a contact then this is often the best, fastest and\nsimplest solution."),(0,a.kt)("p",null,"You should listen for 4 potential events from the picker:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CONTACT_SELECTED"),": Dispatched when the user selected a contact"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CONTACTPICKER_CANCEL"),": Dispatched if the user cancelled the picker"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CONTACTPICKER_CLOSED"),": Dispatched after the picker is closed, this is dispatched after both a selected and a cancelled event"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CONTACTPICKER_ERROR"),": Dispatched if there was an error showing the picker. The picker will not be displayed if this error event is dispatched.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'Contacts.service.addEventListener( ContactsEvent.CONTACT_SELECTED,      contactSelectedHandler );\nContacts.service.addEventListener( ContactsEvent.CONTACTPICKER_CANCEL,  contactPickerCancelHandler );\nContacts.service.addEventListener( ContactsEvent.CONTACTPICKER_CLOSED,  contactPickerClosedHandler );\nContacts.service.addEventListener( ContactsEvent.CONTACTPICKER_ERROR,   contactPickerErrorHandler );\n\nif (!Contacts.service.showContactPicker())\n{\n    trace( "Access to contacts list denied by user" );\n}\n')),(0,a.kt)("p",null,"Then you can respond to the selection in the event handlers: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function contactSelectedHandler( event:ContactsEvent ):void\n{\n    trace("Contact selected");\n    if (event.data)\n    {\n        var contact:Contact = event.data[0];\n        \n        trace("Got contact: " + contact.contactId);\n        trace("Name: " + contact.fullName);\n        trace("FName: " + contact.firstName);\n        trace("Org: " + contact.organisation.name + " -- " + contact.organisation.title);\n        for each (var p:Object in contact.phoneNumbers)\n        {\n            trace(p.label + " -- " + p.value);\n        }\n        for each (var e:Object in contact.emailAddresses)\n        {\n            trace(e.label + " -- " + e.value);\n        }\n    }\n}\n\nprivate function contactPickerCancelHandler( event:ContactsEvent ):void\n{\n    trace( "Picker cancelled" );\n}\n\nprivate function contactPickerClosedHandler( event:ContactsEvent ):void\n{\n    trace( "Picker closed" );\n}\n\nprivate function contactPickerErrorHandler( event:ContactsEvent ):void\n{\n    trace( "An error occurred with the picker: "+event.message );\n}\n')))}f.isMDXComponent=!0}}]);