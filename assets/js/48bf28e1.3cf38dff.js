"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[26651],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),h=p(n),d=i,f=h["".concat(c,".").concat(d)]||h[d]||u[d]||a;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},10948:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=n(83117),i=n(80102),a=(n(67294),n(3905)),o=["components"],s={title:"Get Purchases",sidebar_label:"Get Purchases"},c=void 0,p={unversionedId:"inappbilling/get-purchases",id:"inappbilling/get-purchases",title:"Get Purchases",description:"On services where you can directly query the service for user purchases you can call the getPurchases() function to retrieve them directly from the service.",source:"@site/docs/inappbilling/get-purchases.md",sourceDirName:"inappbilling",slug:"/inappbilling/get-purchases",permalink:"/docs/inappbilling/get-purchases",draft:!1,tags:[],version:"current",frontMatter:{title:"Get Purchases",sidebar_label:"Get Purchases"},sidebar:"inappbilling",previous:{title:"Restore Purchases",permalink:"/docs/inappbilling/restore-purchases"},next:{title:"Consuming Purchases",permalink:"/docs/inappbilling/consuming-purchases"}},l={},u=[{value:"Application Receipt Variant",id:"application-receipt-variant",level:3}],h={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"On services where you can directly query the service for user purchases you can call the ",(0,a.kt)("inlineCode",{parentName:"p"},"getPurchases()")," function to retrieve them directly from the service."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"This is not supported on services like Apple's InAppPurchases where the only method of retrieving purchases is through a user initiated restore purchases process or via a server. See ",(0,a.kt)("a",{parentName:"p",href:"/docs/inappbilling/restore-purchases"},"Restore Purchases")," for more on user initiated purchases restoring."),(0,a.kt)("p",{parentName:"admonition"},'There is an exception to this, in the situation where you are using the application receipt variant of the extension. In that variant this functionality will extract all the purchase information from the "application receipt" by decoding the receipt locally on the device. ')),(0,a.kt)("p",null,"To query the purchases, simply call ",(0,a.kt)("inlineCode",{parentName:"p"},"getPurchases")," and wait for one of the following events:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PurchaseEvent.GET_PURCHASES_COMPLETE"),": Dispatched when the purchases have been retrieved successfully"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PurchaseEvent.GET_PURCHASES_FAILED"),": Dispatched when there was an error")),(0,a.kt)("p",null,"If the call is not supported it will return ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("p",null,"You can also check the ",(0,a.kt)("inlineCode",{parentName:"p"},"isGetPurchasesSupported")," flag to determine if the functionality is supported\non the current service."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"if (InAppBilling.service.isGetPurchasesSupported)\n{\n    InAppBilling.service.addEventListener( PurchaseEvent.GET_PURCHASES_COMPLETE, getPurchasesCompleteHandler );\n    InAppBilling.service.addEventListener( PurchaseEvent.GET_PURCHASES_FAILED, getPurchasesFailedHandler );\n\n    InAppBilling.service.getPurchases();\n}\nelse \n{\n    // Not supported - you should use restore purchases and track purchases in your app\n}\n\nfunction getPurchasesCompleteHandler( event:PurchaseEvent ):void\n{\n    for each (var purchase:Purchase in event.data)\n    {\n        processPurchase( purchase );\n    }\n} \n\nfunction getPurchasesFailedHandler( event:PurchaseEvent ):void \n{\n    // getPurchases failed\n}\n\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"During your ",(0,a.kt)("inlineCode",{parentName:"p"},"processPurchase")," implementation you should be sure to check the ",(0,a.kt)("inlineCode",{parentName:"p"},"purchase.transactionState"),". Only purchases in the state ",(0,a.kt)("inlineCode",{parentName:"p"},"Purchase.STATE_PURCHASED")," should be delivered to your user. You may find there are deferred states on some platforms.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"// Check the purchase state\nif (purchase.transactionState == Purchase.STATE_PURCHASED)\n{\n    //  Deliver product to user\n}\n")),(0,a.kt)("h3",{id:"application-receipt-variant"},"Application Receipt Variant"),(0,a.kt)("p",null,'A small note for the iOS application receipt variant. This variant uses the "application receipt" which is encoded data provided by the App Store for your application. There are certain circumstances where it may be out-of-date or not available, eg initial install on the iOS simulator.'),(0,a.kt)("p",null,"When it is not available get purchases will fail. "),(0,a.kt)("p",null,"It will be updated any time you interact with the App Store, eg via making a purchase or restoring purchases, or you can manually refresh it using the ",(0,a.kt)("inlineCode",{parentName:"p"},"InAppBilling.service.applicationReceipt.refresh()")," method. "),(0,a.kt)("p",null,"If you wish you can manually decode the receipt for more information. Access it via ",(0,a.kt)("inlineCode",{parentName:"p"},"InAppBilling.service.applicationReceipt.getAppReceipt()"),". "),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Decoding this receipt is beyond the scope of our support.")))}d.isMDXComponent=!0}}]);