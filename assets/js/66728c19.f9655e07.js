"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[91096],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return y}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),y=a,v=u["".concat(s,".").concat(y)]||u[y]||d[y]||i;return r?n.createElement(v,o(o({ref:t},p),{},{components:r})):n.createElement(v,o({ref:t},p))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},7925:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var n=r(87462),a=r(63366),i=(r(67294),r(3905)),o={title:"Media Player - Playback Events",sidebar_label:"Media Player - Playback Events"},l=void 0,s={unversionedId:"mediaplayer/media-player---playback-events",id:"mediaplayer/media-player---playback-events",isDocsHomePage:!1,title:"Media Player - Playback Events",description:"There are 3 main types of events associated with the media player: status, progress and errors.",source:"@site/docs/mediaplayer/media-player---playback-events.md",sourceDirName:"mediaplayer",slug:"/mediaplayer/media-player---playback-events",permalink:"/docs/mediaplayer/media-player---playback-events",tags:[],version:"current",frontMatter:{title:"Media Player - Playback Events",sidebar_label:"Media Player - Playback Events"},sidebar:"mediaplayer",previous:{title:"Media Player - Control Playback",permalink:"/docs/mediaplayer/media-player---control-playback"},next:{title:"Audio Player",permalink:"/docs/mediaplayer/audio-player"}},c=[{value:"Status Events",id:"status-events",children:[]},{value:"Progress Events",id:"progress-events",children:[]},{value:"Error Events",id:"error-events",children:[]}],p={toc:c};function d(e){var t=e.components,r=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"There are 3 main types of events associated with the media player: status, progress and errors."),(0,i.kt)("h3",{id:"status-events"},"Status Events"),(0,i.kt)("p",null,"Status events are dispatched using the ",(0,i.kt)("inlineCode",{parentName:"p"},"MediaPlayerEvent")," class. These events include playback status, (playing, paused, stopped etc), player ready event, completion event, and fullscreen events."),(0,i.kt)("p",null,"You add a listener to your ",(0,i.kt)("inlineCode",{parentName:"p"},"MediaPlayerView")," instance to receive these events, for example to register for the ",(0,i.kt)("inlineCode",{parentName:"p"},"READY")," events:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'var player:MediaPlayerView = ...;\n\nplayer.addEventListener( MediaPlayerEvent.READY, readyHandler );\n\nfunction readyHandler( event:MediaPlayerEvent ):void \n{\n    trace( "ready" );\n}\n')),(0,i.kt)("h3",{id:"progress-events"},"Progress Events"),(0,i.kt)("p",null,"Progress events are dispatched using the ",(0,i.kt)("inlineCode",{parentName:"p"},"MediaProgressEvent")," class. This class includes the current playback position and the total time of the media. "),(0,i.kt)("p",null,"It's dispatched approximately 5 times a second."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'player.addEventListener( MediaProgressEvent.PROGRESS, progressHandler );\n\nfunction progressHandler( event:MediaProgressEvent ):void\n{\n    trace( "progress: " + event.current + " / " +event.total );\n}\n')),(0,i.kt)("h3",{id:"error-events"},"Error Events"),(0,i.kt)("p",null,"Error events are dispatched using the ",(0,i.kt)("inlineCode",{parentName:"p"},"MediaErrorEvent")," class. "),(0,i.kt)("p",null,"This event will contain more information on the error, but generally it's either due to incorrect file path or a network problem (for network streamed media)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'player.addEventListener( MediaErrorEvent.ERROR, errorHandler );\n\nfunction errorHandler( event:MediaErrorEvent ):void\n{\n    trace( "error: "+ event.code + "::"+event.description );\n}\n')))}d.isMDXComponent=!0}}]);