"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[59632],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},80479:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),a=["components"],s={title:"AppExtension - Share Extension",sidebar_label:"AppExtension - Share Extension"},l=void 0,c={unversionedId:"share/appextension---share-extension",id:"share/appextension---share-extension",title:"AppExtension - Share Extension",description:"Share Extension Functionality",source:"@site/docs/share/appextension---share-extension.md",sourceDirName:"share",slug:"/share/appextension---share-extension",permalink:"/docs/share/appextension---share-extension",draft:!1,tags:[],version:"current",frontMatter:{title:"AppExtension - Share Extension",sidebar_label:"AppExtension - Share Extension"},sidebar:"share",previous:{title:"AppExtension - Setup",permalink:"/docs/share/appextension---setup"},next:{title:"Migrating from Message",permalink:"/docs/share/migrating-from-message"}},u={},p=[{value:"Share Extension Functionality",id:"share-extension-functionality",level:2}],d={toc:p};function m(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"share-extension-functionality"},"Share Extension Functionality"),(0,i.kt)("p",null,"TODO::"),(0,i.kt)("p",null,"Some code for your main App Extension file:"),(0,i.kt)("p",null,"Your view controller should look something like the following to start:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objc"},"@interface ShareViewController ()\n\n@end\n\n@implementation ShareViewController\n\n- (BOOL)isContentValid {\n    // Do validation of contentText and/or NSExtensionContext attachments here\n    return YES;\n}\n\n- (void)didSelectPost {\n    // This is called after the user selects Post. Do the upload of contentText and/or NSExtensionContext attachments.\n    \n    // Inform the host that we're done, so it un-blocks its UI. Note: Alternatively you could call super's -didSelectPost, which will similarly complete the extension context.\n    [self.extensionContext completeRequestReturningItems:@[] completionHandler:nil];\n}\n\n- (NSArray *)configurationItems {\n    // To add configuration options via table cells at the bottom of the sheet, return an array of SLComposeSheetConfigurationItem here.\n    return @[];\n}\n\n@end\n")),(0,i.kt)("p",null,"This is just a rough dump of some code I was playing with to get a url to share "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objc"},'@implementation ShareViewController\n{\n    NSUInteger _itemCount;\n    NSString* _invokeArgs;\n}\n\n\n- (BOOL) isContentValid\n{\n    // Do validation of contentText and/or NSExtensionContext attachments here\n    return YES;\n}\n\n- (void) didSelectPost\n{\n    // This is called after the user selects Post. Do the upload of contentText and/or NSExtensionContext attachments.\n    NSLog( @"distriqt:SHAREEXTENSION:didSelectPost" );\n    \n    NSLog( @"distriqt:SHAREEXTENSION:%@", self.contentText );\n    \n    NSExtensionItem* item = self.extensionContext.inputItems.firstObject;\n\n    _invokeArgs = NULL;\n    _itemCount = item.attachments.count;\n    \n    for (NSItemProvider* itemProvider in item.attachments)\n    {\n        if ([itemProvider hasItemConformingToTypeIdentifier: (NSString*)kUTTypeURL])\n        {\n            NSLog( @"distriqt:SHAREEXTENSION:item is url" );\n            [itemProvider loadItemForTypeIdentifier: (NSString*)kUTTypeURL\n                                            options: nil\n                                  completionHandler:^(id<NSSecureCoding>  _Nullable item, NSError * _Null_unspecified error)\n            {\n                NSURL* url = (NSURL*)item;\n                NSLog( @"distriqt:SHAREEXTENSION:loaded:%@", url );\n                if ([url.absoluteString rangeOfString: @"youtube"].location == NSNotFound)\n                {\n                    \n                }\n                else\n                {\n                    \n                }\n                [self invokeApp: url.absoluteString];\n            }];\n        }\n        else if ([itemProvider hasItemConformingToTypeIdentifier: (NSString*)kUTTypeImage])\n        {\n            NSLog( @"distriqt:SHAREEXTENSION:item is image" );\n            [itemProvider loadItemForTypeIdentifier: (NSString*)kUTTypeImage\n                                            options: nil\n                                  completionHandler:^(id<NSSecureCoding>  _Nullable item, NSError * _Null_unspecified error)\n            {\n                [self invokeApp: @""];\n            }];\n        }\n    }\n\n}\n\n\n- (NSArray *) configurationItems\n{\n    // To add configuration options via table cells at the bottom of the sheet, return an array of SLComposeSheetConfigurationItem here.\n    return @[];\n}\n\n\n- (void) invokeApp: (NSString *)invokeArgs\n{\n    // Prepare the URL request\n    // this will use the custom url scheme of your app\n    // and the paths to the photos you want to share:\n    NSString * urlString = [NSString stringWithFormat: @"%@://%@", @"distriqt-test", ( NULL == invokeArgs ? @"" : invokeArgs ) ];\n    NSURL * url = [NSURL URLWithString: urlString];\n    \n    NSString *className = @"UIApplication";\n    if (NSClassFromString( className ))\n    {\n        id object = [ NSClassFromString(className) performSelector: @selector(sharedApplication) ];\n        [object performSelector: @selector(openURL:) withObject: url];\n    }\n    \n    // Now let the host app know we are done, so that it unblocks its UI:\n    [super didSelectPost];\n}\n\n@end\n')),(0,i.kt)("p",null,"This code uses a custom url scheme to launch the application so you'll need to add the following to your InfoAdditions in your application descriptor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"    <key>CFBundleURLTypes</key>\n    <array>\n        <dict>\n            <key>CFBundleURLSchemes</key>\n            <array>\n                <string>distriqt-test</string>\n            </array>\n        </dict>\n    </array>\n")))}m.isMDXComponent=!0}}]);