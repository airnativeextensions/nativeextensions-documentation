"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[4845],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>v});var i=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=i.createContext({}),p=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=p(e.components);return i.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),f=o,v=u["".concat(c,".").concat(f)]||u[f]||d[f]||a;return n?i.createElement(v,r(r({ref:t},l),{},{components:n})):i.createElement(v,r({ref:t},l))}));function v(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<a;p++)r[p]=n[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2992:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var i=n(87462),o=(n(67294),n(3905));const a={title:"Receiving notifications",sidebar_label:"Receiving notifications"},r=void 0,s={unversionedId:"pushnotifications/receiving-notifications",id:"pushnotifications/receiving-notifications",title:"Receiving notifications",description:"There are several events that can be dispatched by a notification.",source:"@site/docs/pushnotifications/receiving-notifications.md",sourceDirName:"pushnotifications",slug:"/pushnotifications/receiving-notifications",permalink:"/docs/pushnotifications/receiving-notifications",draft:!1,tags:[],version:"current",frontMatter:{title:"Receiving notifications",sidebar_label:"Receiving notifications"},sidebar:"pushnotifications",previous:{title:"InApp Messaging",permalink:"/docs/pushnotifications/inapp-messaging"},next:{title:"Icons",permalink:"/docs/pushnotifications/icons"}},c={},p=[],l={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"There are several events that can be dispatched by a notification."),(0,o.kt)("p",null,"The most important is the ",(0,o.kt)("inlineCode",{parentName:"p"},"PushNotificationEvent.NOTIFICATION")," event. This event is dispatched as soon as possible after a notification is received. The exact timing of this event depends on the platform, the application settings (such as background modes) and the application state. See the notification scenarios section for more information."),(0,o.kt)("p",null,"Next is the ",(0,o.kt)("inlineCode",{parentName:"p"},"PushNotificationEvent.NOTIFICATION_SELECTED")," event. This event is dispatched when a user clicks a displayed notification. It will not be dispatched if the user dismisses or otherwise removes the notification without directly clicking on the notification."),(0,o.kt)("p",null,"On Android, you additionally have the ",(0,o.kt)("inlineCode",{parentName:"p"},"PushNotificationGroupEvent.GROUP_SELECTED")," event.\nThis event is very similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"NOTIFICATION_SELECTED")," event in that it is dispatched when the user clicks the notification, however as this notification was a group of notifications it is dispatched as a single event with an array of payloads indicating each of the individual events contained in the group."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"PushNotificationEvent.ACTION")," is dispatched when a user clicks an action on a notification.\nThis event currently is missed on iOS when the application is not running (background, suspended and foreground states operate correctly). This is due to an issue with AIR not allowing AIR application to launch into the background."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},'// Previously called init, setup and checked authorisation\n\nPushNotifications.service.addEventListener( PushNotificationEvent.NOTIFICATION, notificationHandler );\nPushNotifications.service.addEventListener( PushNotificationEvent.NOTIFICATION_SELECTED, notificationHandler );\nPushNotifications.service.addEventListener( PushNotificationEvent.ACTION, actionHandler );\nPushNotifications.service.addEventListener( PushNotificationGroupEvent.GROUP_SELECTED, groupSelectedHandler );\n\nPushNotifications.service.register();\n\n\nfunction notificationHandler( event:PushNotificationEvent ):void\n{\n    trace( "Notification: ["+event.type+"] state="+event.applicationState+" startup="+event.startup );\n    trace( event.payload );\n}\n\nfunction actionHandler( event:PushNotificationEvent ):void\n{\n    trace( "Action: ["+event.type+"] identifier="+event.identifier+" state="+event.applicationState+" startup="+event.startup );\n    trace( event.payload );\n}\n\nfunction groupSelectedHandler( event:PushNotificationGroupEvent ):void\n{\n    trace( "Group Selected: ["+event.type+"] groupKey="+event.groupKey+" state="+event.applicationState+" startup="+event.startup );\n    for each (var payload:String in event.payloads)\n    {\n        trace( "PAYLOAD: "+ payload );\n    }\n}\n')))}d.isMDXComponent=!0}}]);