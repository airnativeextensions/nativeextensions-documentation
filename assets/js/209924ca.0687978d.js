"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[80317],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},w="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),w=p(n),u=r,m=w["".concat(l,".").concat(u)]||w[u]||c[u]||o;return n?i.createElement(m,a(a({ref:t},d),{},{components:n})):i.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[w]="string"==typeof e?e:r,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},70153:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var i=n(87462),r=(n(67294),n(3905));const o={title:"Browser View",sidebar_label:"Browser View"},a=void 0,s={unversionedId:"nativewebview/browser-view",id:"nativewebview/browser-view",title:"Browser View",description:"The browser view is the simplest method of displaying a full page website in your application.",source:"@site/docs/nativewebview/browser-view.md",sourceDirName:"nativewebview",slug:"/nativewebview/browser-view",permalink:"/docs/nativewebview/browser-view",draft:!1,tags:[],version:"current",frontMatter:{title:"Browser View",sidebar_label:"Browser View"},sidebar:"nativewebview",previous:{title:"Removing the WebView",permalink:"/docs/nativewebview/removing-the-webview"},next:{title:"Migrating to v5.4",permalink:"/docs/nativewebview/migrating-to-v5.4"}},l={},p=[{value:"Support",id:"support",level:2},{value:"Android Additions",id:"android-additions",level:2},{value:"Preparing the Browser View",id:"preparing-the-browser-view",level:2},{value:"Open a URL",id:"open-a-url",level:2},{value:"Imports",id:"imports",level:2},{value:"Options",id:"options",level:2},{value:"Colours",id:"colours",level:3},{value:"Animations",id:"animations",level:3}],d={toc:p},w="wrapper";function c(e){let{components:t,...o}=e;return(0,r.kt)(w,(0,i.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The browser view is the simplest method of displaying a full page website in your application.\nThis is perfect for displaying external links such as news articles or website information."),(0,r.kt)("p",null,"The browser view is implemented as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Chrome Custom Tabs")," on Android (",(0,r.kt)("a",{parentName:"li",href:"https://developer.chrome.com/multidevice/android/customtabs"},"docs"),");"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Safari View Controller")," on iOS (",(0,r.kt)("a",{parentName:"li",href:"https://developer.apple.com/reference/safariservices/sfsafariviewcontroller"},"docs"),")")),(0,r.kt)("p",null,"These views are intended to be used to simply load content external to your application."),(0,r.kt)("p",null,"The WebView is good solution if you are hosting your own content inside your app.\nIf your app directs people to URLs outside your domain, we recommend that you use\nthe Browser View for the following reasons:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Simplicity"),(0,r.kt)("li",{parentName:"ul"},"Security"),(0,r.kt)("li",{parentName:"ul"},"Performance optimisations"),(0,r.kt)("li",{parentName:"ul"},"Shared cookie and permissions"),(0,r.kt)("li",{parentName:"ul"},"Autocomplete"),(0,r.kt)("li",{parentName:"ul"},"Latest browser implementations")),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(1340).Z,width:"360",height:"640"}),"\n",(0,r.kt)("img",{src:n(32829).Z,width:"360",height:"640"})),(0,r.kt)("h2",{id:"support"},"Support"),(0,r.kt)("p",null,"You can check if the current device supports the browser view by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"NativeWebView.service.browserView.isSupported"),". This will check the device version and required components to make sure the browser view can be presented."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"if (NativeWebView.service.browserView.isSupported)\n{\n    // Browser view available\n}\n")),(0,r.kt)("p",null,"This may return ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," if :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You are on an unsupported device (eg desktop machine);"),(0,r.kt)("li",{parentName:"ul"},"Android: The ",(0,r.kt)("inlineCode",{parentName:"li"},"androidx.browser")," dependency is missing;"),(0,r.kt)("li",{parentName:"ul"},"Android 30+: The ",(0,r.kt)("inlineCode",{parentName:"li"},"queries")," tags in the manifest are missing;"),(0,r.kt)("li",{parentName:"ul"},"iOS: The ",(0,r.kt)("inlineCode",{parentName:"li"},"SFSafariViewController")," is unavailable (generally only on iOS < 9);")),(0,r.kt)("h2",{id:"android-additions"},"Android Additions"),(0,r.kt)("p",null,"To make sure this functionality works on Android you must add the ",(0,r.kt)("inlineCode",{parentName:"p"},"androidx.browser")," to your application. See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/nativewebview/add-the-extension"},"Add the Extension")," section for information on including this ANE."),(0,r.kt)("h2",{id:"preparing-the-browser-view"},"Preparing the Browser View"),(0,r.kt)("p",null,"In order for the browser view to correctly receive events you must call ",(0,r.kt)("inlineCode",{parentName:"p"},"prepare")," before attempting to display any web content. Preparing is a simple process of calling ",(0,r.kt)("inlineCode",{parentName:"p"},"prepare()")," and then waiting for the ",(0,r.kt)("inlineCode",{parentName:"p"},"BrowserViewEvent.READY")," event. "),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"if (NativeWebView.service.browserView.isSupported)\n{\n    NativeWebView.service.browserView.addEventListener( BrowserViewEvent.READY, browserView_readyHandler );\n    NativeWebView.service.browserView.prepare();\n}\n\nfunction browserView_readyHandler( event:BrowserViewEvent ):void\n{\n    NativeWebView.service.browserView.removeEventListener( BrowserViewEvent.READY, browserView_readyHandler );\n    // Browser views are now ready to be used in your application\n}\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This is not 100% required however if you don't do this before opening a url you may\nfind you don't receive any of the ",(0,r.kt)("inlineCode",{parentName:"p"},"BrowserViewEvent"),"s. If you don't need those\nevents then you can skip this process.")),(0,r.kt)("h2",{id:"open-a-url"},"Open a URL"),(0,r.kt)("p",null,"This is the important part, simply opening a url for display."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'NativeWebView.service.browserView.openWithUrl( "http://airnativeextensions.com" );\n')),(0,r.kt)("p",null,"This call will create and display the browser view and load the specified url."),(0,r.kt)("p",null,"You can listen to the events dispatched by the view:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'NativeWebView.service.browserView.addEventListener( BrowserViewEvent.CLOSED, browserView_eventHandler );\nNativeWebView.service.browserView.addEventListener( BrowserViewEvent.OPENED, browserView_eventHandler );\nNativeWebView.service.browserView.addEventListener( BrowserViewEvent.LOADED, browserView_eventHandler );\nNativeWebView.service.browserView.addEventListener( BrowserViewEvent.ERROR, browserView_eventHandler );\n\nfunction browserView_eventHandler( event:BrowserViewEvent ):void\n{\n    trace( "browserView_eventHandler( " +event.type + " )");\n}\n')),(0,r.kt)("p",null,"These events are dispatched when various events occur in the browser view. See the ",(0,r.kt)("inlineCode",{parentName:"p"},"BrowserViewEvent"),"\ndocumentation for details."),(0,r.kt)("h2",{id:"imports"},"Imports"),(0,r.kt)("p",null,"When using the Browser view you will be interacting with several classes and interfaces.\nThe main functionality is defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"BrowserView")," interface and you will be listening\nfor the ",(0,r.kt)("inlineCode",{parentName:"p"},"BrowserViewEvent")," as described."),(0,r.kt)("p",null,"To use these classes you will need the following import statements:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"import com.distriqt.extension.nativewebview.browser.BrowserView;\nimport com.distriqt.extension.nativewebview.events.BrowserViewEvent;\n")),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("p",null,"You can specify options when opening a browser view by creating an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"BrowserViewOptions")," class and passing that as the second parameter to the ",(0,r.kt)("inlineCode",{parentName:"p"},"openWithUrl")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'var options:BrowserViewOptions = new BrowserViewOptions();\n\nNativeWebView.service.browserView.openWithUrl( "http://airnativeextensions.com", options );\n')),(0,r.kt)("h3",{id:"colours"},"Colours"),(0,r.kt)("p",null,"You can change the background colour of the browser view tool bar by specifying the primary colour:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"options.primaryColour = 0xFF0000;\n")),(0,r.kt)("p",null,"The primary colour is used on iOS 10+ and Android as the background colour of the toolbar."),(0,r.kt)("p",null,"You can change the text in the toolbar by specifying the secondary colour. This is currently only supported on iOS 10+."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"options.secondaryColour = 0x000000;\n")),(0,r.kt)("h3",{id:"animations"},"Animations"),(0,r.kt)("p",null,"On Android you can select the in and out animations by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"animationIn")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"animationOut")," properties."),(0,r.kt)("p",null,"These animations control how the browser view is shown and hidden. For example to slide the browser view in from the bottom and back out to the bottom:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"options.animationIn = BrowserViewOptions.SLIDE_BOTTOM;\noptions.animationOut = BrowserViewOptions.SLIDE_TOP;\n")),(0,r.kt)("p",null,"The out animation is easier thought of as the direction your application will animate in rather than the view out, so in the above, the browser view would slide in from the bottom and then when closing the application will slide in from the top pushing the browser view out the bottom."),(0,r.kt)("p",null,"Potential values are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SLIDE_LEFT")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SLIDE_RIGHT")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SLIDE_BOTTOM")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SLIDE_TOP"))),(0,r.kt)("p",null,"The defaults are ",(0,r.kt)("inlineCode",{parentName:"p"},"SLIDE_LEFT")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"SLIDE_RIGHT")," for the ",(0,r.kt)("inlineCode",{parentName:"p"},"animationIn")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"animationOut")," properties respectively, so that the view will slide in from the left and back out towards the left."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("strong",{parentName:"p"},"out")," animation is only used when the user presses the close button. If you programmatically close the view using the ",(0,r.kt)("inlineCode",{parentName:"p"},"close()")," function the animation will not be shown.")))}c.isMDXComponent=!0},1340:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/nativewebview_android_browserview-a8501fa06650243c439330f792fe4270.gif"},32829:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/nativewebview_ios_browserview-d498f0dd150ab23387f3b864ff38e314.gif"}}]);