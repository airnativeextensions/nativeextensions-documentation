(window.webpackJsonp=window.webpackJsonp||[]).push([[464],{520:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(2),o=t(6),a=(t(0),t(876)),i={title:"Enabling Server-Side Access",sidebar_label:"Enabling Server-Side Access"},s={unversionedId:"googleidentity/enabling-server-side-access",id:"googleidentity/enabling-server-side-access",isDocsHomePage:!1,title:"Enabling Server-Side Access",description:"With the Sign-In procedure, your app authenticates the user on the client side only; in that case, you can access the Google APIs only while the user is actively using your app. If you want your servers to be able to make Google API calls on behalf of users\u2014possibly while they are offline\u2014your server requires an access token.",source:"@site/docs/googleidentity/enabling-server-side-access.md",slug:"/googleidentity/enabling-server-side-access",permalink:"/docs/googleidentity/enabling-server-side-access",version:"current",sidebar_label:"Enabling Server-Side Access",sidebar:"googleidentity",previous:{title:"Authenticate with a backend server",permalink:"/docs/googleidentity/authenticate-with-a-backend-server"},next:{title:"Troubleshooting",permalink:"/docs/googleidentity/troubleshooting"}},c=[{value:"Setup",id:"setup",children:[]},{value:"Sign In",id:"sign-in",children:[]},{value:"Exchange for Access Token",id:"exchange-for-access-token",children:[]}],l={rightToc:c};function u(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"With the Sign-In procedure, your app authenticates the user on the client side only; in that case, you can access the Google APIs only while the user is actively using your app. If you want your servers to be able to make Google API calls on behalf of users\u2014possibly while they are offline\u2014your server requires an access token."),Object(a.b)("h2",{id:"setup"},"Setup"),Object(a.b)("p",null,"If you require server side access then you will need to request the server auth code and provide the server client ids when you setup the extension."),Object(a.b)("p",null,"The server client ids are created through the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://console.developers.google.com/apis/credentials"}),"Google API Console")," by creating an OAuth 2.0 web application client ID for your backend server. If you have different servers for iOS and Android applications use the ",Object(a.b)("inlineCode",{parentName:"p"},"setiOSServerClientID")," and ",Object(a.b)("inlineCode",{parentName:"p"},"setAndroidServerClientID")," otherwise if you just have the one you can use ",Object(a.b)("inlineCode",{parentName:"p"},"setServerClientID"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-actionscript"}),"var options:GoogleIdentityOptions = new GoogleIdentityOptionsBuilder()\n    .requestEmail()\n    .requestIdToken()\n    .requestServerAuthCode()\n    .setIOSClientID( IOS_CLIENT_ID )\n    .setiOSServerClientID( IOS_SERVER_CLIENT_ID )\n    .setAndroidServerClientID( ANDROID_SERVER_CLIENT_ID )\n    .build();\n\nGoogleIdentity.service.setup( options );\n")),Object(a.b)("p",null,"Ensure you add any additional scopes your backend server requires using the ",Object(a.b)("inlineCode",{parentName:"p"},"addScope")," function of the builder. "),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"If you didn't configure ",Object(a.b)("inlineCode",{parentName:"p"},"GoogleIdentityOptionsBuilder")," with ",Object(a.b)("inlineCode",{parentName:"p"},"requestServerAuthCode()"),", your user's server auth code will return ",Object(a.b)("inlineCode",{parentName:"p"},"null"),".")),Object(a.b)("h2",{id:"sign-in"},"Sign In"),Object(a.b)("p",null,"Follow the normal process to ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"signing-in"}),"sign in")," and in your sign in success handler ensure you grab the user and the server auth code:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-actionscript"}),"function signInHandler( event:GoogleIdentityEvent ):void\n{\n    trace( event.user.userID );\n    trace( event.user.serverAuthCode );\n}\n")),Object(a.b)("p",null,"You can then use a normal ",Object(a.b)("inlineCode",{parentName:"p"},"URLRequest")," to send this token to your server to identify your user:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-actionscript"}),"var vars:URLVariables = new URLVariables();\nvars.serverAuthCode = user.serverAuthCode;\n\nvar request:URLRequest = new URLRequest( YOUR_SERVER_URL );\nrequest.data = vars;\nrequest.method = URLRequestMethod.POST;\n\nvar loader:URLLoader = new URLLoader();\nloader.addEventListener( Event.COMPLETE, loaderCompleteHandler );\nloader.load( request );\n")),Object(a.b)("p",null,"(This is just intended as a quick example and is missing error handling)"),Object(a.b)("h2",{id:"exchange-for-access-token"},"Exchange for Access Token"),Object(a.b)("p",null,"On your server you'll want to exchange the server auth code for an access token which can then be used to access the Google APIs on behalf of your user."),Object(a.b)("p",null,"This process is beyond the scope of this documentation but you'll find information in the Google documentation:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://developers.google.com/identity/sign-in/android/offline-access"}),"Enabling Server-Side Access"))))}u.isMDXComponent=!0},876:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return h}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=o.a.createContext({}),u=function(e){var n=o.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=u(e.components);return o.a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(t),b=r,h=d["".concat(i,".").concat(b)]||d[b]||p[b]||a;return t?o.a.createElement(h,s(s({ref:n},l),{},{components:t})):o.a.createElement(h,s({ref:n},l))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=b;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);