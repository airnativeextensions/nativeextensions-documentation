"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[47567],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),s=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(r),f=a,m=p["".concat(d,".").concat(f)]||p[f]||c[f]||i;return r?n.createElement(m,o(o({ref:t},u),{},{components:r})):n.createElement(m,o({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},48548:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const i={title:"Firestore - Order and limit data",sidebar_label:"Order and limit data"},o=void 0,l={unversionedId:"firebase/firestore/order-and-limit-data",id:"firebase/firestore/order-and-limit-data",title:"Firestore - Order and limit data",description:"Cloud Firestore provides powerful query functionality for specifying which documents you want to retrieve from a collection. These queries can also be used with either query() or addSnapshotListener(), as described in Get Data.",source:"@site/docs/firebase/firestore/order-and-limit-data.md",sourceDirName:"firebase/firestore",slug:"/firebase/firestore/order-and-limit-data",permalink:"/docs/firebase/firestore/order-and-limit-data",draft:!1,tags:[],version:"current",frontMatter:{title:"Firestore - Order and limit data",sidebar_label:"Order and limit data"},sidebar:"firebase",previous:{title:"Perform simple and compound queries",permalink:"/docs/firebase/firestore/perform-simple-and-compound-queries"},next:{title:"Paginate data with query cursors",permalink:"/docs/firebase/firestore/paginate-data-with-query-cursors"}},d={},s=[{value:"Order and limit data",id:"order-and-limit-data",level:2},{value:"Default order",id:"default-order",level:3}],u={toc:s},p="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Cloud Firestore provides powerful query functionality for specifying which documents you want to retrieve from a collection. These queries can also be used with either ",(0,a.kt)("inlineCode",{parentName:"p"},"query()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"addSnapshotListener()"),", as described in ",(0,a.kt)("a",{parentName:"p",href:"/docs/firebase/firestore/get-data"},"Get Data"),"."),(0,a.kt)("h2",{id:"order-and-limit-data"},"Order and limit data"),(0,a.kt)("p",null,"You can specify the sort order for your data using ",(0,a.kt)("inlineCode",{parentName:"p"},"orderBy()"),", and you can limit the number of documents retrieved using ",(0,a.kt)("inlineCode",{parentName:"p"},"limit()"),"."),(0,a.kt)("p",null,"For example, you could query for the first 3 cities alphabetically with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'var query:Query = citiesRef\n                    .orderBy( "name" )\n                    .limit( 3 );\n')),(0,a.kt)("p",null,"You could also sort in descending order to get the last 3 cities:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'var query:Query = citiesRef\n                    .orderBy( "name", QueryDirection.DESCENDING )\n                    .limit( 3 );\n')),(0,a.kt)("p",null,"You can also order by multiple fields. For example, if you wanted to order by state, and within each state order by population in descending order:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'var query:Query = citiesRef\n                    .orderBy( "state" )\n                    .orderBy( "population", QueryDirection.DESCENDING );\n')),(0,a.kt)("p",null,"You can combine ",(0,a.kt)("inlineCode",{parentName:"p"},"where()")," filters with ",(0,a.kt)("inlineCode",{parentName:"p"},"orderBy()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"limit()"),". "),(0,a.kt)("p",null,"In the following example, the queries define a population threshold, sort by population in ascending order, and return only the first few results that exceed the threshold:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'citiesRef\n    .whereGreaterThan( "population", 100000 )\n    .orderBy( "population" )\n    .limit( 2 );\n')),(0,a.kt)("p",null,"However, if you have a filter with a range comparison (<, <=, >, >=), your first ordering must be on the same field:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Valid"),": Range filter and orderBy on the same field"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'citiesRef\n    .whereGreaterThan( "population", 100000 )\n    .orderBy( "population" );\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Invalid"),": Range filter and first orderBy on different fields"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'citiesRef\n    .whereGreaterThan( "population", 100000 )\n    .orderBy( "country" );\n')),(0,a.kt)("h3",{id:"default-order"},"Default order"),(0,a.kt)("p",null,"By default, a query retrieves all documents that satisfy the query in ascending order by document ID. "),(0,a.kt)("p",null,"You can alter this by using the predefined field path value: ",(0,a.kt)("inlineCode",{parentName:"p"},"FieldPath.documentId()")," and passing it to the ",(0,a.kt)("inlineCode",{parentName:"p"},"orderBy()")," method. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"var query:Query = citiesRef\n                    .orderBy( FieldPath.documentId(), QueryDirection.DESCENDING );\n")))}c.isMDXComponent=!0}}]);