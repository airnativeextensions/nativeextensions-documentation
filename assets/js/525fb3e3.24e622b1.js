"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[93322],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return p}});var a=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function r(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=a.createContext({}),l=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},d=function(t){var e=l(t.components);return a.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},v=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,s=t.parentName,d=r(t,["components","mdxType","originalType","parentName"]),v=l(n),p=o,f=v["".concat(s,".").concat(p)]||v[p]||u[p]||i;return n?a.createElement(f,c(c({ref:e},d),{},{components:n})):a.createElement(f,c({ref:e},d))}));function p(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,c=new Array(i);c[0]=v;var r={};for(var s in e)hasOwnProperty.call(e,s)&&(r[s]=e[s]);r.originalType=t,r.mdxType="string"==typeof t?t:o,c[1]=r;for(var l=2;l<i;l++)c[l]=n[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}v.displayName="MDXCreateElement"},39220:function(t,e,n){n.r(e),n.d(e,{assets:function(){return d},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return u}});var a=n(83117),o=n(80102),i=(n(67294),n(3905)),c=["components"],r={title:"Retrieving the Contact List",sidebar_label:"Retrieving the Contact List"},s=void 0,l={unversionedId:"contacts/retrieving-the-contact-list",id:"contacts/retrieving-the-contact-list",title:"Retrieving the Contact List",description:"There are several ways to access the contact list. As the list is quite large and detailed a full",source:"@site/docs/contacts/retrieving-the-contact-list.md",sourceDirName:"contacts",slug:"/contacts/retrieving-the-contact-list",permalink:"/docs/contacts/retrieving-the-contact-list",draft:!1,tags:[],version:"current",frontMatter:{title:"Retrieving the Contact List",sidebar_label:"Retrieving the Contact List"},sidebar:"contacts",previous:{title:"Request Authorisation",permalink:"/docs/contacts/request-authorisation"},next:{title:"Contact Images",permalink:"/docs/contacts/contact-images"}},d={},u=[{value:"Extended List",id:"extended-list",level:2},{value:"Modified Contacts",id:"modified-contacts",level:2},{value:"JSON",id:"json",level:2},{value:"Modified Since as JSON",id:"modified-since-as-json",level:3}],v={toc:u};function p(t){var e=t.components,n=(0,o.Z)(t,c);return(0,i.kt)("wrapper",(0,a.Z)({},v,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"There are several ways to access the contact list. As the list is quite large and detailed a full\n(extended) contact list request returning all of the available contacts and details on each can be\nquite slow, so while we have provided this functionality we do not suggest using it."),(0,i.kt)("p",null,"Instead our suggested method is to retrieve the basic contact list, which only retrieves a subset\nof the contact details, which you can then query individually for the full details."),(0,i.kt)("p",null,"The example below shows retrieving the list of contacts and then querying one for detailed information."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'// Before here we have already requested access and performed initialisation\n\nContacts.service.addEventListener( ContactsEvent.GET_CONTACTS, contacts_getContactsHandler );\nContacts.service.addEventListener( ContactsEvent.GET_CONTACTS_ERROR, contacts_getContactsErrorHandler );\n\nContacts.service.getContactListAsync();\n\n...\n\nprivate function contacts_getContactsHandler( event:ContactsEvent ):void\n{\n    // event.data is an Array of Contact objects only with basic details\n\n    var randomIndex:int = Math.floor( Math.random() * contacts.length );\n    var randomContact:Contact = contacts[ randomIndex ];\n    \n    var contactWithDetails:Contact = Contacts.service.getContactDetails( randomContact.contactId );\n        \n}\n\nprivate function contacts_getContactsErrorHandler( event:ContactsEvent ):void\n{\n    trace( "ERROR::" + event.message );\n}\n')),(0,i.kt)("h2",{id:"extended-list"},"Extended List"),(0,i.kt)("p",null,"If you wish, you can load the extended contact list using the ",(0,i.kt)("inlineCode",{parentName:"p"},"getContactListExtendedAsync")," function.\nThis loads all of the contacts and all their details (and if specified all their images)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'Contacts.service.addEventListener( ContactsEvent.GET_CONTACTS_EXTENDED, contacts_getContactsExtendedHandler );\nContacts.service.addEventListener( ContactsEvent.GET_CONTACTS_ERROR, contacts_getContactsErrorHandler );\n\nContacts.service.getContactListExtendedAsync();\n\n...\n\nprivate function contacts_getContactsExtendedHandler( event:ContactsEvent ):void\n{\n    trace( "getContactListExtendedAsync(): Retrieved " + event.data.length + " contacts" );\n}\n\nprivate function contacts_getContactsErrorHandler( event:ContactsEvent ):void\n{\n    trace( "ERROR::" + event.message );\n}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: While all attempts have been made to reduce the load of this call there are still situations\nwhich will take a while to return so we suggest using this method with care. A large contact list\nwill not be a quick query and the conversion to AS3 objects may take a noticable time.")),(0,i.kt)("h2",{id:"modified-contacts"},"Modified Contacts"),(0,i.kt)("p",null,"You can retrieve a list of contacts that have been modified by the user since a particular date.\nThis is particularly useful if you are attempting to maintain some sort of synchronisation between\nseveral data sources."),(0,i.kt)("p",null,"To do this, simply provide the date from which you wish to retrieve the modified contacts to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"getContactListModifiedSince")," function, as below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"Contacts.service.addEventListener( ContactsEvent.GET_CONTACTS_MODIFIED, contacts_getContactsModifiedHandler );\n\nvar success:Boolean = Contacts.service.getContactListModifiedSince( new Date( 2015, 9, 1 ) );\n\n...\n\nprivate function contacts_getContactsModifiedHandler( event:ContactsEvent ):void\n{\n    // event.data will contain an array of Contact objects that have been modified\n}\n")),(0,i.kt)("h2",{id:"json"},"JSON"),(0,i.kt)("p",null,"Retrieving the contact list as JSON, this method retrieves the extended contact list again however\nit will be faster than ",(0,i.kt)("inlineCode",{parentName:"p"},"getContactListExtendedAsync")," as we aren't creating a ",(0,i.kt)("inlineCode",{parentName:"p"},"Contact")," object for each\ncontact. Instead we are just returning a json formatted string.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"Contacts.service.addEventListener( ContactsJSONEvent.GET_CONTACTS_JSON, contacts_getContactsJSONHandler );\n                    \nContacts.service.getContactListAsJSON();\n\n...\n\nprivate function contacts_getContactsJSONHandler( event:ContactsJSONEvent ):void\n{\n    trace( event.json );\n}\n")),(0,i.kt)("h3",{id:"modified-since-as-json"},"Modified Since as JSON"),(0,i.kt)("p",null,"Similarly you can retrieve the modified since list as JSON"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"Contacts.service.addEventListener( ContactsJSONEvent.GET_CONTACTS_MODIFIED_JSON, contacts_getContactsModifiedJSONHandler );\n\nvar success:Boolean = Contacts.service.getContactListModifiedSinceAsJSON( new Date( 2015, 9, 1 ) );\n\n...\n\nprivate function contacts_getContactsModifiedJSONHandler( event:ContactsJSONEvent ):void\n{\n    trace( event.json );\n}\n")))}p.isMDXComponent=!0}}]);