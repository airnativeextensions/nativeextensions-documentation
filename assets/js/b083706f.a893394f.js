"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[79200],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return d}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),f=c(t),d=o,m=f["".concat(p,".").concat(d)]||f[d]||u[d]||a;return t?r.createElement(m,s(s({ref:n},l),{},{components:t})):r.createElement(m,s({ref:n},l))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=f;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},18508:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=t(83117),o=t(80102),a=(t(67294),t(3905)),s=["components"],i={title:"iOS APNS Message",sidebar_label:"iOS APNS Message"},p=void 0,c={unversionedId:"pushnotifications/apple/ios-apns-message",id:"pushnotifications/apple/ios-apns-message",title:"iOS APNS Message",description:"There are many ways to send notifications to your devices.",source:"@site/docs/pushnotifications/apple/ios-apns-message.md",sourceDirName:"pushnotifications/apple",slug:"/pushnotifications/apple/ios-apns-message",permalink:"/docs/pushnotifications/apple/ios-apns-message",draft:!1,tags:[],version:"current",frontMatter:{title:"iOS APNS Message",sidebar_label:"iOS APNS Message"},sidebar:"pushnotifications",previous:{title:"Pushy Payload",permalink:"/docs/pushnotifications/pushy/pushy-payload"},next:{title:"Firebase Cloud Message",permalink:"/docs/pushnotifications/firebase/firebase-cloud-message"}},l={},u=[{value:"PHP Example",id:"php-example",level:3}],f={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"There are many ways to send notifications to your devices."),(0,a.kt)("p",null,"The basic procedure is once your application has sent the device token (registration id) to your server,\nyour server will send a message to the appropriate service (APNS/GCM) which will deliver the notification\nto the registered device."),(0,a.kt)("h3",{id:"php-example"},"PHP Example"),(0,a.kt)("p",null,"The following is a very basic PHP example, sending a message to a single device."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n// Put your device token here (without spaces):\n$deviceToken = 'DEVICE_TOKEN';\n\n// Put your private key's passphrase here:\n$passphrase = 'passphrase';\n$pemfilename = 'ck.pem';\n\n// SIMPLE PUSH \n$body['aps'] = array(\n    'alert' => array(\n        'title' => \"You have a notification\",\n        'body' => \"Body of the message\",\n    ),\n    'badge' => 1,\n    'sound' => 'default',\n    ); // Create the payload body\n\n////////////////////////////////////////////////////////////////////////////////\n\n$ctx = stream_context_create();\nstream_context_set_option($ctx, 'ssl', 'local_cert', $pemfilename);\nstream_context_set_option($ctx, 'ssl', 'passphrase', $passphrase);\n\n$fp = stream_socket_client(\n    'ssl://gateway.sandbox.push.apple.com:2195', $err,\n    $errstr, 60, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $ctx); // Open a connection to the APNS server\nif (!$fp)\n    exit(\"Failed to connect: $err $errstr\" . PHP_EOL);\necho 'Connected to APNS' . PHP_EOL;\n$payload = json_encode($body); // Encode the payload as JSON\n$msg = chr(0) . pack('n', 32) . pack('H*', $deviceToken) . pack('n', strlen($payload)) . $payload; // Build the binary notification\n$result = fwrite($fp, $msg, strlen($msg)); // Send it to the server\nif (!$result)\n    echo 'Message not delivered' . PHP_EOL;\nelse\n    echo 'Message successfully delivered' . PHP_EOL;\nfclose($fp); // Close the connection to the server\n")),(0,a.kt)("p",null,"You run these scripts using php:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"php script.php\n")))}d.isMDXComponent=!0}}]);