"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[61217],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>m});var t=a(67294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function u(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=t.createContext({}),o=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},c=function(e){var n=o(e.components);return t.createElement(l.Provider,{value:n},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=o(a),d=r,m=p["".concat(l,".").concat(d)]||p[d]||h[d]||s;return a?t.createElement(m,i(i({ref:n},c),{},{components:a})):t.createElement(m,i({ref:n},c))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=d;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u[p]="string"==typeof e?e:r,i[1]=u;for(var o=2;o<s;o++)i[o]=a[o];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},85162:(e,n,a)=>{a.d(n,{Z:()=>i});var t=a(67294),r=a(86010);const s={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:a,className:i}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,i),hidden:a},n)}},74866:(e,n,a)=>{a.d(n,{Z:()=>b});var t=a(87462),r=a(67294),s=a(86010),i=a(12466),u=a(16550),l=a(91980),o=a(67392),c=a(50012);function p(e){return function(e){var n,a;return null!=(n=null==(a=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:a.filter(Boolean))?n:[]}(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:r}}=e;return{value:n,label:a,attributes:t,default:r}}))}function h(e){const{values:n,children:a}=e;return(0,r.useMemo)((()=>{const e=null!=n?n:p(a);return function(e){const n=(0,o.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,a])}function d(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:a}=e;const t=(0,u.k6)(),s=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,l._X)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})}),[s,t])]}function v(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,s=h(e),[i,u]=(0,r.useState)((()=>function(e){var n;let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!d({value:a,tabValues:t}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+a+'" but none of its children has the corresponding value. Available values are: '+t.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return a}const r=null!=(n=t.find((e=>e.default)))?n:t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[l,o]=m({queryString:a,groupId:t}),[p,v]=function(e){let{groupId:n}=e;const a=function(e){return e?"docusaurus.tab."+e:null}(n),[t,s]=(0,c.Nk)(a);return[t,(0,r.useCallback)((e=>{a&&s.set(e)}),[a,s])]}({groupId:t}),f=(()=>{const e=null!=l?l:p;return d({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{f&&u(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:s}))throw new Error("Can't select invalid tab value="+e);u(e),o(e),v(e)}),[o,v,s]),tabValues:s}}var f=a(72389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:n,block:a,selectedValue:u,selectValue:l,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),h=e=>{const n=e.currentTarget,a=c.indexOf(n),t=o[a].value;t!==u&&(p(n),l(t))},d=e=>{var n;let a=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{var t;const n=c.indexOf(e.currentTarget)+1;a=null!=(t=c[n])?t:c[0];break}case"ArrowLeft":{var r;const n=c.indexOf(e.currentTarget)-1;a=null!=(r=c[n])?r:c[c.length-1];break}}null==(n=a)||n.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":a},n)},o.map((e=>{let{value:n,label:a,attributes:i}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:u===n?0:-1,"aria-selected":u===n,key:n,ref:e=>c.push(e),onKeyDown:d,onClick:h},i,{className:(0,s.Z)("tabs__item",g.tabItem,null==i?void 0:i.className,{"tabs__item--active":u===n})}),null!=a?a:n)})))}function k(e){let{lazy:n,children:a,selectedValue:t}=e;const s=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t}))))}function E(e){const n=v(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",g.tabList)},r.createElement(y,(0,t.Z)({},e,n)),r.createElement(k,(0,t.Z)({},e,n)))}function b(e){const n=(0,f.Z)();return r.createElement(E,(0,t.Z)({key:String(n)},e))}},78997:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>u,metadata:()=>o,toc:()=>p});var t=a(87462),r=(a(67294),a(3905)),s=a(74866),i=a(85162);const u={title:"Make a Purchase",sidebar_label:"Make a Purchase"},l=void 0,o={unversionedId:"inappbilling/make-a-purchase",id:"inappbilling/make-a-purchase",title:"Make a Purchase",description:"Finally we reach the most important process in this extension, making a purchase.",source:"@site/docs/inappbilling/make-a-purchase.mdx",sourceDirName:"inappbilling",slug:"/inappbilling/make-a-purchase",permalink:"/docs/inappbilling/make-a-purchase",draft:!1,tags:[],version:"current",frontMatter:{title:"Make a Purchase",sidebar_label:"Make a Purchase"},sidebar:"inappbilling",previous:{title:"Products",permalink:"/docs/inappbilling/products"},next:{title:"Pending Purchases",permalink:"/docs/inappbilling/pending-purchases"}},c={},p=[{value:"Purchase Request Validity",id:"purchase-request-validity",level:2},{value:"Purchase Failure",id:"purchase-failure",level:2},{value:"Finishing Purchases",id:"finishing-purchases",level:2},{value:"Apple In-App Purchases",id:"apple-in-app-purchases",level:3},{value:"Google Play Billing",id:"google-play-billing",level:3},{value:"Example",id:"example",level:3},{value:"Handling User Cancellations",id:"handling-user-cancellations",level:2},{value:"Deferred Purchases",id:"deferred-purchases",level:2}],h={toc:p},d="wrapper";function m(e){let{components:n,...a}=e;return(0,r.kt)(d,(0,t.Z)({},h,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Finally we reach the most important process in this extension, making a purchase. "),(0,r.kt)("p",null,'Making a purchase requires making a request to initiate the purchase and then "finishing the purchase" to\nfinalise the purchase and remove it from any internal queues.'),(0,r.kt)("p",null,"Firstly create a ",(0,r.kt)("inlineCode",{parentName:"p"},"PurchaseRequest")," object and set the ",(0,r.kt)("inlineCode",{parentName:"p"},"productId")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"quantity")," you wish to purchase.\nThen pass this object to the ",(0,r.kt)("strong",{parentName:"p"},"make purchase")," function.\nThis will initiate the purchase flow, most likely leaving your application and taking the user to the store interface."),(0,r.kt)(s.Z,{groupId:"framework",defaultValue:"air",values:[{label:"AIR",value:"air"},{label:"Unity",value:"unity"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"air",mdxType:"TabItem"},(0,r.kt)("p",null,"As the state of the purchase transaction changes you will be notified through the ",(0,r.kt)("inlineCode",{parentName:"p"},"PurchaseEvent.PURCHASES_UPDATED")," event.\nYou should also listen for the ",(0,r.kt)("inlineCode",{parentName:"p"},"PurchaseEvent.PURCHASE_FAILED")," event to handle any errors that may occur."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"InAppBilling.service.addEventListener( PurchaseEvent.PURCHASES_UPDATED, purchases_updatedHandler );\nInAppBilling.service.addEventListener( PurchaseEvent.PURCHASE_FAILED, purchase_failedHandler );\n\nvar request:PurchaseRequest = new PurchaseRequest();\nrequest.productId = productId;\nrequest.quantity = 1;\n\nvar success:Boolean = InAppBilling.service.makePurchase( request );\n"))),(0,r.kt)(i.Z,{value:"unity",mdxType:"TabItem"},(0,r.kt)("p",null,"As the state of the purchase transaction changes you will be notified through the ",(0,r.kt)("inlineCode",{parentName:"p"},"InAppBilling.Instance.Events.OnPurchasesUpdated")," event.\nYou should also listen for the ",(0,r.kt)("inlineCode",{parentName:"p"},"InAppBilling.Instance.Events.OnPurchaseFailed")," event to handle any errors that may occur."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"InAppBilling.Instance.Events.OnPurchasesUpdated += OnPurchasesUpdated;\nInAppBilling.Instance.Events.OnPurchaseFailed += OnPurchaseFailed;\n\nPurchaseRequest request = new PurchaseRequest();\nrequest.productId = productId;\nrequest.quantity = 1;\n\nbool success = InAppBilling.Instance.MakePurchase( request );\n")))),(0,r.kt)("admonition",{title:"Subscriptions",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If you are purchasing a subscription you must provide an offer as part of the ",(0,r.kt)("inlineCode",{parentName:"p"},"PurchaseRequest"),".\nSee ",(0,r.kt)("a",{parentName:"p",href:"subscription-offers"},"Subscription Offers")," for more information."),(0,r.kt)("p",{parentName:"admonition"},"Failure to supply an offer will result in an error being thrown.")),(0,r.kt)("h2",{id:"purchase-request-validity"},"Purchase Request Validity"),(0,r.kt)("p",null,"The success value returned here indicates whether the purchase was initiated successfully.\nIf the purchase was not initiated successfully then potentially there was an error in the\nrequest or potentially there is a pending purchase for the product."),(0,r.kt)(s.Z,{groupId:"framework",defaultValue:"air",values:[{label:"AIR",value:"air"},{label:"Unity",value:"unity"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"air",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'var request:PurchaseRequest = new PurchaseRequest();\nrequest.productId = productId;\nrequest.quantity = 1;\n\nif (InAppBilling.service.CheckPurchaseRequestValid(request))\n{\n    var success:Boolean = InAppBilling.service.makePurchase( request );\n}\nelse\n{\n    trace("Invalid purchase request");\n}\n'))),(0,r.kt)(i.Z,{value:"unity",mdxType:"TabItem"},(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"CheckPurchaseRequestValid")," method to check if the request is valid before calling ",(0,r.kt)("inlineCode",{parentName:"p"},"makePurchase()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'PurchaseRequest request = new PurchaseRequest();\nrequest.productId = productId;\nrequest.quantity = 1;\n\nif (InAppBilling.Instance.CheckPurchaseRequestValid(request))\n{\n    bool success = InAppBilling.Instance.MakePurchase( request );\n}\nelse\n{\n    Debug.Log("Invalid purchase request");\n}\n')))),(0,r.kt)("admonition",{title:"Events",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The process of checking a purchase request may dispatch purchases updated event if there are pending purchases\nmatching the request. Make sure you are listening for this event before checking the purchase request.")),(0,r.kt)("h2",{id:"purchase-failure"},"Purchase Failure"),(0,r.kt)("p",null,"It is important that you listen for the ",(0,r.kt)("strong",{parentName:"p"},"purchase failed")," event. This will be dispatched\nin situations where the purchase could not be attempted due to various reasons. You should\nrefer to the error code and message in the event to determine if it can be resolved."),(0,r.kt)("p",null,"One of the most common situations that this will occur on is when the product is already owned\nby the user on Android. This case you should check for the ",(0,r.kt)("inlineCode",{parentName:"p"},"ErrorCodes.ITEM_ALREADY_OWNED")," error code and\nthen load the purchases to retrieve the purchase."),(0,r.kt)("p",null,"See the section on ",(0,r.kt)("a",{parentName:"p",href:"get-purchases"},"Get Purchases")," for more information on this process of retrieving purchases."),(0,r.kt)(s.Z,{groupId:"framework",defaultValue:"air",values:[{label:"AIR",value:"air"},{label:"Unity",value:"unity"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"air",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"private function purchase_failedHandler( event:PurchaseEvent ):void\n{\n    switch (event.errorCode)\n    {\n        case ErrorCodes.ITEM_ALREADY_OWNED:\n            // The user already owns this item, this will only occur on Android\n\n            // You should use getPurchases() to retrieve the users purchases\n            // and then add them as missing from their current inventory\n            getPurchases();\n            break;\n\n        case ErrorCodes.RESPONSE_CANCELLED:\n        case ErrorCodes.USER_CANCELLED:\n            // User cancelled the transaction before it was initiated\n            break;\n\n        default:\n            // Generic failure\n            // This transaction failed so you should notify your user and finish the purchase\n            if (event.data && event.data.length > 0)\n            {\n                InAppBilling.service.finishPurchase( event.data[0] );\n            }\n\n    }\n}\n"))),(0,r.kt)(i.Z,{value:"unity",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'private void OnPurchaseFailed(PurchaseEvent e)\n{\n    switch (e.errorCode)\n    {\n        case ErrorCodes.ITEM_ALREADY_OWNED:\n            // The user already owns this item, this will only occur on Android\n\n            // You should use getPurchases() to retrieve the users purchases\n            // and then add them as missing from their current inventory\n            GetPurchases();\n            break;\n\n        case ErrorCodes.RESPONSE_CANCELLED:\n        case ErrorCodes.USER_CANCELLED:\n            // User cancelled the transaction before it was initiated\n            break;\n\n        default:\n            // Generic failure\n            Debug.Log("Purchase failed: " + e.errorCode + " " + e.message);\n            break;\n    }\n}\n')))),(0,r.kt)("h2",{id:"finishing-purchases"},"Finishing Purchases"),(0,r.kt)("p",null,"It is important that you ",(0,r.kt)("strong",{parentName:"p"},"finish a purchase")," when you have completed the purchase\nand either handled the error or deployed the product to the user's inventory."),(0,r.kt)("p",null,"If you don't finish a purchase then the purchase will remain in a pending state and\nyou will get notified again of the purchase when calling setup or making other purchases.\n",(0,r.kt)("strong",{parentName:"p"},"In some circumstances, failing to finish a purchase may result in the purchase being cancelled and the user refunded.")),(0,r.kt)(s.Z,{groupId:"framework",defaultValue:"air",values:[{label:"AIR",value:"air"},{label:"Unity",value:"unity"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"air",mdxType:"TabItem"},(0,r.kt)("p",null,"To finish a purchase you need to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"finishPurchase()")," method and pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"Purchase")," object that you received in the ",(0,r.kt)("inlineCode",{parentName:"p"},"PurchaseEvent"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"InAppBilling.service.finishPurchase( purchase );\n")),(0,r.kt)("p",null,"Once complete the ",(0,r.kt)("inlineCode",{parentName:"p"},"FINISH_SUCCESS")," event will be dispatched or if an error occurred then the ",(0,r.kt)("inlineCode",{parentName:"p"},"FINISH_FAILED")," event will be dispatched:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'InAppBilling.service.addEventListener( InAppBillingEvent.FINISH_SUCCESS, successHandler );\nInAppBilling.service.addEventListener( InAppBillingEvent.FINISH_FAILED, failedHandler );\n\n\nfunction successHandler( event:InAppBillingEvent ):void\n{\n    trace( "finish purchase complete" );\n}\n\nfunction failedHandler( event:InAppBillingEvent ):void\n{\n    trace( "finish failed: ["+event.errorCode+"]" + event.message );\n}\n'))),(0,r.kt)(i.Z,{value:"unity",mdxType:"TabItem"},(0,r.kt)("p",null,"To finish a purchase you need to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"FinishPurchase()")," method and pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"Purchase")," object that you received in the ",(0,r.kt)("inlineCode",{parentName:"p"},"OnPurchasesUpdated")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"OnPurchaseFailed")," event."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"InAppBilling.Instance.FinishPurchase( purchase );\n")),(0,r.kt)("p",null,"Once complete the ",(0,r.kt)("inlineCode",{parentName:"p"},"OnFinishPurchaseSuccess")," event will be dispatched or if an error occurred then the ",(0,r.kt)("inlineCode",{parentName:"p"},"OnFinishPurchaseFailed")," event will be dispatched:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'InAppBilling.Instance.Events.OnFinishPurchaseSuccess += OnFinishPurchaseSuccess;\nInAppBilling.Instance.Events.OnFinishPurchaseFailed += OnFinishPurchaseFailed;\n\nprivate void OnFinishPurchaseSuccess(PurchaseEvent e)\n{\n    Debug.Log("Finish purchase complete");\n}\n\nprivate void OnFinishPurchaseFailed(PurchaseEvent e)\n{\n    Debug.Log("Finish failed: " + e.errorCode + " " + e.message);\n}\n')))),(0,r.kt)("admonition",{title:"Important",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You must call finish a purchase and confirm by receiving the success event\nbefore attempting any other operation such as consuming the purchase. "),(0,r.kt)("p",{parentName:"admonition"},"The purchase is still in a pending state and not considered delivered to the user until you do. ")),(0,r.kt)("h3",{id:"apple-in-app-purchases"},"Apple In-App Purchases"),(0,r.kt)("p",null,"With Apple's In-App Purchases finishing a purchase will remove the purchase from the transaction queue,\nand inform Apple that you have delivered (and potentially verified) the purchase."),(0,r.kt)("p",null,"Purchases are not finished automatically as you may wish to verify the purchase with your server or other service before delivering the product to the user.\nYou should perform any verification of the purchase before finishing the purchase."),(0,r.kt)("h3",{id:"google-play-billing"},"Google Play Billing"),(0,r.kt)("p",null,"With Google Play Billing finishing a purchase performs the ",(0,r.kt)("em",{parentName:"p"},"acknowledgement of the purchase"),".\nPurchases that aren't acknowledged will be returned in the pending purchases list and ",(0,r.kt)("strong",{parentName:"p"},"may be refunded if you do not acknowledge them"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Google Play supports purchasing products from inside of your app (in-app) or outside of your app (out-of-app).\nIn order for Google Play to ensure a consistent purchase experience regardless of where the user purchases your product,\nyou must acknowledge all purchases received through the Google Play Billing Library as soon as possible after\ngranting entitlement to the user. If you do not acknowledge a purchase within three days, the user automatically\nreceives a refund, and Google Play revokes the purchase. ")),(0,r.kt)("p",null,"Note: ",(0,r.kt)("em",{parentName:"p"},"Previously you may have attached a developer payload at this point. This is no longer supported and has\nbeen removed by Google in the Play Billing library v3.0.")," Instead consider using an obfuscated ",(0,r.kt)("inlineCode",{parentName:"p"},"applicationUsername"),"\non your purchase request which will now get returned with a ",(0,r.kt)("inlineCode",{parentName:"p"},"Purchase")," through Google Play Billing."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"The simplest way to finish purchases is to simply call this in the purchases updated event handler,\nhowever you may wish to do this at a later time, for example, if you wish to validate the purchase\nusing the transaction receipt with your application server. "),(0,r.kt)(s.Z,{groupId:"framework",defaultValue:"air",values:[{label:"AIR",value:"air"},{label:"Unity",value:"unity"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"air",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'// The service must be setup and a list of products retrieved.\n\nInAppBilling.service.addEventListener( PurchaseEvent.PURCHASES_UPDATED, purchases_updatedHandler );\nInAppBilling.service.addEventListener( PurchaseEvent.PURCHASE_FAILED, purchase_failedHandler );\nInAppBilling.service.addEventListener( InAppBillingEvent.FINISH_SUCCESS, finishPurchase_successHandler );\nInAppBilling.service.addEventListener( InAppBillingEvent.FINISH_FAILED, finishPurchase_failedHandler );\n\n\nvar request:PurchaseRequest = new PurchaseRequest();\nrequest.productId = productId;\nrequest.quantity = 1;\n\nvar success:Boolean = InAppBilling.service.makePurchase( request );\n\ntrace( "makePurchase( "+productId+" ) = " + success );\n\n\n//\n//  PURCHASE HANDLER\n//\n\nfunction purchases_updatedHandler( event:PurchaseEvent ):void\n{\n    for each (var purchase:Purchase in event.data)\n    {\n        switch (purchase.transactionState)\n        {\n            // These transactions are in progress, so don\'t finish them unless you don\'t want them to complete\n            case Purchase.STATE_PURCHASING:\n            case Purchase.STATE_DEFERRED:\n                break;\n            \n            // The purchased state should finished after you have delivered the product if applicable\n            case Purchase.STATE_PURCHASED:\n            {\n                trace( "purchase success" );\n                \n                //\n                // If you wish you can add the purchase to your inventory\n                // and finish the purchase here\n                addPurchaseToInventory( purchase );\n                InAppBilling.service.finishPurchase( purchase );\n                \n                //\n                // Alternatively hold onto this purchase so we can call\n                // finish when you\'ve delivered the product\n                //\n                // You would do this if you are validating the purchase on a server or\n                // other operation that is required to complete before the product is delivered\n                //_purchases.push( purchase );\n                break;\n            }\n            \n            \n            // For all other states you should handle appropriately and call finish purchase \n            case Purchase.STATE_FAILED:\n            case Purchase.STATE_REFUNDED:\n            case Purchase.STATE_RESTORED:\n            case Purchase.STATE_REMOVED:\n            case Purchase.STATE_CANCELLED:\n            case Purchase.STATE_NOTALLOWED:\n                InAppBilling.service.finishPurchase( purchase );\n                break;\n        }\n    }\n}\n\nfunction purchase_failedHandler( event:PurchaseEvent ):void\n{\n    trace( "purchase failed ["+event.errorCode+"]" + event.message );\n}\n\nfunction finishPurchase_successHandler( event:InAppBillingEvent ):void\n{\n    trace( "finish purchase complete" );\n}\n\nfunction finishPurchase_failedHandler( event:InAppBillingEvent ):void\n{\n    trace( "finish failed: ["+event.errorCode+"]" + event.message );\n}\n\n'))),(0,r.kt)(i.Z,{value:"unity",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// The service must be setup and a list of products retrieved.\n\nInAppBilling.Instance.Events.OnPurchasesUpdated += OnPurchasesUpdated;\nInAppBilling.Instance.Events.OnPurchaseFailed += OnPurchaseFailed;\nInAppBilling.Instance.Events.OnFinishPurchaseSuccess += OnFinishPurchaseSuccess;\nInAppBilling.Instance.Events.OnFinishPurchaseFailed += OnFinishPurchaseFailed;\n\nPurchaseRequest request = new PurchaseRequest();\nrequest.productId = productId;\nrequest.quantity = 1;\n\nbool success = InAppBilling.Instance.MakePurchase( request );\n\nDebug.Log("makePurchase( " + productId + " ) = " + success );\n\nprivate void OnPurchasesUpdated(PurchaseEvent e)\n{\n    foreach (Purchase purchase in e.purchases)\n    {\n        switch (purchase.transactionState)\n        {\n            case Purchase.STATE_PURCHASING:\n            case Purchase.STATE_DEFERRED:\n                break;\n\n            case Purchase.STATE_PURCHASED:\n                Debug.Log("Purchase completed: " + purchase.transactionState);\n                //\n                // If you wish you can add the purchase to your inventory\n                // and finish the purchase here\n                AddPurchaseToInventory( purchase );\n                InAppBilling.Instance.FinishPurchase(purchase);\n                \n                //\n                // Alternatively hold onto this purchase so we can call\n                // finish when you\'ve delivered the product\n                //\n                // You would do this if you are validating the purchase on a server or\n                // other operation that is required to complete before the product is delivered\n                //_purchases.push( purchase );\n                break;\n\n            // User cancelled the transaction\n            case Purchase.STATE_CANCELLED:\n                InAppBilling.Instance.FinishPurchase(purchase);\n                break;\n\n            case Purchase.STATE_FAILED:\n            case Purchase.STATE_REFUNDED:\n            case Purchase.STATE_RESTORED:\n            case Purchase.STATE_REMOVED:\n            case Purchase.STATE_NOTALLOWED:\n                InAppBilling.Instance.FinishPurchase(purchase);\n                break;\n\n        }\n    }\n}\n\n\nprivate void OnPurchaseFailed(PurchaseEvent e)\n{\n    Debug.Log("Purchase failed: " + e.errorCode + " " + e.message);\n}\n\n\nprivate void OnFinishPurchaseSuccess(PurchaseEvent e)\n{\n    Debug.Log("Finish purchase complete");\n}\n\n\nprivate void OnFinishPurchaseFailed(PurchaseEvent e)\n{\n    Debug.Log("Finish failed: " + e.errorCode + " " + e.message);\n}\n')))),(0,r.kt)("h2",{id:"handling-user-cancellations"},"Handling User Cancellations"),(0,r.kt)("p",null,"When a user cancels a purchase there are two avenues that you'll need to handle,\ndue to the different ways that Android and iOS handle these cases."),(0,r.kt)("p",null,"On iOS there will be a ",(0,r.kt)("inlineCode",{parentName:"p"},"Purchase")," initiated immediately so when the user cancels\nthe purchase you will receive a ",(0,r.kt)("inlineCode",{parentName:"p"},"PurchaseEvent.PURCHASES_UPDATED")," and the purchases\ntransaction state will be set to ",(0,r.kt)("inlineCode",{parentName:"p"},"Purchase.STATE_CANCELLED"),"."),(0,r.kt)("p",null,"You will need to handle this case in your purchases updated handler and finish the\npurchase to remove it from the pending purchases queue."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(s.Z,{groupId:"framework",defaultValue:"air",values:[{label:"AIR",value:"air"},{label:"Unity",value:"unity"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"air",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"function purchases_updatedHandler( event:PurchaseEvent ):void\n{\n    for each (var purchase:Purchase in event.data)\n    {\n        switch (purchase.transactionState)\n        {\n            // Other states ... \n\n            case Purchase.STATE_CANCELLED:\n                // User Cancelled\n                InAppBilling.service.finishPurchase( purchase );\n                break;\n        }\n    }\n} \n"))),(0,r.kt)(i.Z,{value:"unity",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"private void OnPurchasesUpdated(PurchaseEvent e)\n{\n    foreach (Purchase purchase in e.purchases)\n    {\n        switch (purchase.transactionState)\n        {\n            // Other states ... \n\n            case Purchase.STATE_CANCELLED:\n                // User Cancelled\n                InAppBilling.Instance.FinishPurchase(purchase);\n                break;\n        }\n    }\n}\n")))),(0,r.kt)("p",null,"On Android the purchase is not initiated so there is no ",(0,r.kt)("inlineCode",{parentName:"p"},"Purchase")," to return,\nhence you will not receive a purchases updated event but instead a ",(0,r.kt)("inlineCode",{parentName:"p"},"PurchaseEvent.PURCHASE_FAILED"),"\nevent will be dispatched. The error code on the failed event will be set to ",(0,r.kt)("inlineCode",{parentName:"p"},"ErrorCodes.USER_CANCELLED"),"\nor ",(0,r.kt)("inlineCode",{parentName:"p"},"ErrorCodes.RESPONSE_CANCELLED")," so you can use this code to process the user cancellation.\nAs this purchase was not initiated it does not need to be finished and will not appear in the\npending purchases queue."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(s.Z,{groupId:"framework",defaultValue:"air",values:[{label:"AIR",value:"air"},{label:"Unity",value:"unity"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"air",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"function purchase_failedHandler( event:PurchaseEvent ):void\n{\n    switch (event.errorCode)\n    {\n        // Other error codes...\n\n        case ErrorCodes.RESPONSE_CANCELLED:\n        case ErrorCodes.USER_CANCELLED:\n            // User cancelled\n            break;\n    }\n}\n"))),(0,r.kt)(i.Z,{value:"unity",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"private void OnPurchaseFailed(PurchaseEvent e)\n{\n    switch (e.errorCode)\n    {\n        // Other error codes...\n\n        case ErrorCodes.RESPONSE_CANCELLED:\n        case ErrorCodes.USER_CANCELLED:\n            // User cancelled\n            break;\n    }\n}\n")))),(0,r.kt)("p",null,"You should ensure you handle both these cases in your application if you wish to handle user cancellations. "),(0,r.kt)("h2",{id:"deferred-purchases"},"Deferred Purchases"),(0,r.kt)("p",null,"Of special note are deferred purchases. Deferred purchases are purchases that are in progress and require further user action external to your application, such as a parental approval or payment in cash at a physical store."),(0,r.kt)("p",null,"With Apple's In-App Purhcases:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The transaction is in the queue, but its final status is pending external action such as Ask to Buy. Update your UI to show the deferred state, and wait for another callback that indicates the final status.")),(0,r.kt)("p",null,'With Google Play Billing the deferred state is equivalent to the "PENDING" purchase state referenced in the Google documentation, where additional action is required before granting entitlement.'),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For example, a user might choose to purchase your in-app product at a physical store using cash. This means that the transaction is completed outside of your app. In this scenario, you should grant entitlement only after the user has completed the transaction.")),(0,r.kt)("p",null,"In order to correctly handle deferred purchases you should ",(0,r.kt)("strong",{parentName:"p"},"not finish the purchase"),", but leave it in the queue until the user completes the external action."),(0,r.kt)("p",null,'Once the user completes the action you will receive a purchases updated event and should process the purchase at that point.\nIt is important however if you display some "purchase in progress" UI during the making a purchase process that you close that once you receive this event. You may wish to display a message appropriate to your application indicating that they need to take action outside the app.'),(0,r.kt)(s.Z,{groupId:"framework",defaultValue:"air",values:[{label:"AIR",value:"air"},{label:"Unity",value:"unity"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"air",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'function purchases_updatedHandler( event:PurchaseEvent ):void\n{\n    for each (var purchase:Purchase in event.data)\n    {\n        switch (purchase.transactionState)\n        {\n            // Do nothing with the deferred purchase. \n            // Ensure you close any "purchase in progress" UI \n            case Purchase.STATE_DEFERRED:\n                break;\n\n            // Other states ...\n        }\n    }\n}\n'))),(0,r.kt)(i.Z,{value:"unity",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'private void OnPurchasesUpdated(PurchaseEvent e)\n{\n    foreach (Purchase purchase in e.purchases)\n    {\n        switch (purchase.transactionState)\n        {\n            // Do nothing with the deferred purchase. \n            // Ensure you close any "purchase in progress" UI \n            case Purchase.STATE_DEFERRED:\n                break;\n\n            // Other states ...\n        }\n    }\n}\n')))))}m.isMDXComponent=!0}}]);