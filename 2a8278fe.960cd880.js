(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{182:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var a=n(2),r=n(6),i=(n(0),n(824)),o={title:"Database - Transactions",sidebar_label:"Transactions"},c={unversionedId:"firebase/database/transactions",id:"firebase/database/transactions",isDocsHomePage:!1,title:"Database - Transactions",description:"Transactions",source:"@site/docs/firebase/database/transactions.md",slug:"/firebase/database/transactions",permalink:"/docs/firebase/database/transactions",version:"current",sidebar_label:"Transactions",sidebar:"firebase",previous:{title:"Database - Delete Data",permalink:"/docs/firebase/database/delete-data"},next:{title:"Database - Lists",permalink:"/docs/firebase/database/lists"}},s=[{value:"Transactions",id:"transactions",children:[]}],l={rightToc:s};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"transactions"},"Transactions"),Object(i.b)("p",null,"When working with data that could be corrupted by concurrent modifications, such\nas incremental counters, you can use a transaction operation. "),Object(i.b)("p",null,"You give this operation an important argument: an instance of a ",Object(i.b)("inlineCode",{parentName:"p"},"TransactionHandler"),"."),Object(i.b)("p",null,"This class will implement a function that takes the current state of the data as an\nargument and returns the new desired state you would like to write. If another client\nwrites to the location before your new value is successfully written, your update\nfunction is called again with the new current value, and the write is retried."),Object(i.b)("p",null,"Using a transaction prevents data from being incorrect if multiple users change the\nsame data at the same time or the client had stale data. If the transaction is rejected,\nthe server returns the current value to the client, which runs the transaction again\nwith the updated value. This repeats until the transaction is accepted or too many\nattempts have been made."),Object(i.b)("p",null,"In the following example we will start a transaction, by calling ",Object(i.b)("inlineCode",{parentName:"p"},"runTransaction()"),"\non a ",Object(i.b)("inlineCode",{parentName:"p"},"DatabaseReference")," and pass in an instance of a class that implements the\n",Object(i.b)("inlineCode",{parentName:"p"},"TransactionHandler")," interface. "),Object(i.b)("p",null,'We will attempt to increment a "count" value which will be a synchronised counter.'),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-actionscript"}),'var ref:DatabaseReference = FirebaseDatabase.service.getReference( "count" );\n\nref.runTransaction( new CountTransactionHandler() );\n')),Object(i.b)("p",null,"The implementation of the ",Object(i.b)("inlineCode",{parentName:"p"},"CountTransactionHandler")," sets the logic for updating\nthe value of the data. It has one function ",Object(i.b)("inlineCode",{parentName:"p"},"doTransaction")," that will be called\neach time the Firebase transaction requires updating of the data value.\nHere we will increment the count value:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-actionscript"}),"public class CountTransactionHandler implements TransactionHandler\n{\n    \n    public function doTransaction( mutableData:MutableData ):TransactionResult\n    {\n        var data:Object = mutableData.getValue();\n        if (data == null)\n        {\n            // Set an initial value\n            mutableData.setValue( 0 );\n            return TransactionResult.success(mutableData);\n        }\n        mutableData.setValue( mutableData.getValue() + 1 );\n        return TransactionResult.success(mutableData);\n    }\n    \n}\n")),Object(i.b)("p",null,"You can use any logic in this ",Object(i.b)("inlineCode",{parentName:"p"},"doTransaction")," function that you require. However it\nis important that you return a ",Object(i.b)("inlineCode",{parentName:"p"},"TransactionResult"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"on ",Object(i.b)("strong",{parentName:"li"},"success")," use: ",Object(i.b)("inlineCode",{parentName:"li"},"TransactionResult.success( mutableData );")),Object(i.b)("li",{parentName:"ul"},"on ",Object(i.b)("strong",{parentName:"li"},"failure")," use: ",Object(i.b)("inlineCode",{parentName:"li"},"TransactionResult.abort();"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note: Because ",Object(i.b)("inlineCode",{parentName:"p"},"doTransaction()")," is called multiple times, it must be able to handle\n",Object(i.b)("inlineCode",{parentName:"p"},"null")," data. Even if there is existing data in your remote database, it may not be\nlocally cached when the transaction function is run, resulting in ",Object(i.b)("inlineCode",{parentName:"p"},"null")," for the\ninitial value.")))}u.isMDXComponent=!0},824:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=u(n),d=a,m=b["".concat(o,".").concat(d)]||b[d]||p[d]||i;return n?r.a.createElement(m,c(c({ref:t},l),{},{components:n})):r.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);