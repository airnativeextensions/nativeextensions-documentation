(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[23122],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return p}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),d=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=d(e.components);return o.createElement(i.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=d(n),p=r,v=m["".concat(i,".").concat(p)]||m[p]||s[p]||a;return n?o.createElement(v,c(c({ref:t},u),{},{components:n})):o.createElement(v,c({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var d=2;d<a;d++)c[d]=n[d];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},14056:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},metadata:function(){return l},toc:function(){return i},default:function(){return u}});var o=n(22122),r=n(19756),a=(n(67294),n(3905)),c={title:"Document Store",sidebar_label:"Document Store"},l={unversionedId:"cloudstorage/document-store",id:"cloudstorage/document-store",isDocsHomePage:!1,title:"Document Store",description:"Make sure you have added the entitlements to your application descriptor before attempting to",source:"@site/docs/cloudstorage/document-store.md",sourceDirName:"cloudstorage",slug:"/cloudstorage/document-store",permalink:"/docs/cloudstorage/document-store",version:"current",sidebar_label:"Document Store",frontMatter:{title:"Document Store",sidebar_label:"Document Store"},sidebar:"cloudstorage",previous:{title:"Key-Value Storage",permalink:"/docs/cloudstorage/key-value-storage"},next:{title:"Android Testing",permalink:"/docs/cloudstorage/android-testing"}},i=[{value:"Checking Support",id:"checking-support",children:[]},{value:"Setup the store",id:"setup-the-store",children:[]},{value:"List Documents",id:"list-documents",children:[]},{value:"Update",id:"update",children:[]},{value:"Load a Document",id:"load-a-document",children:[]},{value:"Save a Document",id:"save-a-document",children:[]},{value:"Create a Document",id:"create-a-document",children:[]},{value:"Delete a Document",id:"delete-a-document",children:[]},{value:"Handling conflicts",id:"handling-conflicts",children:[]}],d={toc:i};function u(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Make sure you have added the entitlements to your application descriptor before attempting to\nuse the document store. See the section: ",(0,a.kt)("a",{parentName:"p",href:"add-the-extension"},"Add the Extension"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: ",(0,a.kt)("strong",{parentName:"p"},"Document storage is not supported on Apple's tvOS or through the Unity plugin"))),(0,a.kt)("h2",{id:"checking-support"},"Checking Support"),(0,a.kt)("p",null,"You should check if the document store functionality is supported on the current platform by using\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"isSupported")," flag. This will determine if the current platform (Android, iOS, tvOS etc) supports\nthe document storage functionality."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"if (CloudStorage.service.documentStore.isSupported)\n{\n    // The documentStore functionality is supported on the current platform\n}\n")),(0,a.kt)("p",null,"Certain platforms, such as tvOS will return false for this value. "),(0,a.kt)("h2",{id:"setup-the-store"},"Setup the store"),(0,a.kt)("p",null,"To start you must call setup on the document store. This initialises the store to be ready for\ndocument handling and makes sure that the services are available."),(0,a.kt)("p",null,"You can either pass a specific Ubiquity Container ID or an empty string to use the first container\nID in your entitlements."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"CloudStorage.service.documentStore.addEventListener( DocumentStoreStateEvent.INITIALISED, ds_initialisedHandler );\nCloudStorage.service.documentStore.addEventListener( DocumentStoreStateEvent.CHANGE, ds_stateChangeHandler );\n\nCloudStorage.service.documentStore.addEventListener( DocumentStoreEvent.FILES_DID_CHANGE, ds_filesDidChangeHandler );\nCloudStorage.service.documentStore.addEventListener( DocumentStoreEvent.CONFLICT, ds_conflictHandler );\n\nCloudStorage.service.documentStore.setup();\n")),(0,a.kt)("p",null,"Once you have called ",(0,a.kt)("inlineCode",{parentName:"p"},"setup")," you can check if the document store is available for use by checking\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"isAvailable")," flag:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"if (CloudStorage.service.documentStore.isAvailable)\n{\n    // Can use storage\n}\n")),(0,a.kt)("p",null,"The events that are dispatched here represent different events occurring in the store:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function ds_initialisedHandler( event:DocumentStoreStateEvent ):void\n{\n    trace( "ds_initialisedHandler: " + event.available + ":"+event.containerUrl );\n    trace( event.token );\n}\n\nprivate function ds_stateChangeHandler( event:DocumentStoreStateEvent ):void\n{\n    trace( "ds_stateChangeHandler: " + event.available + ":"+event.containerUrl );\n    \n    // Should check for user change here storing the current value of the token\n    trace( event.token );\n}\n\nprivate function ds_filesDidChangeHandler( event:DocumentStoreEvent ):void\n{\n    trace( "ds_filesDidChangeHandler" );\n    for each (var document:Document in event.documents)\n    {\n        trace( "changed: "+document.filename );\n    }\n}\n\nprivate function ds_conflictHandler( event:DocumentStoreEvent ):void\n{\n    trace( "ds_conflictHandler" );\n    // See handling conflicts later\n}\n')),(0,a.kt)("h2",{id:"list-documents"},"List Documents"),(0,a.kt)("p",null,"Once you have setup the store you can query the available documents by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"listDocuments"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'if (CloudStorage.service.documentStore.isAvailable)\n{\n    var documents:Vector.<Document> = CloudStorage.service.documentStore.listDocuments();\n    \n    for each (var document:Document in documents)\n    {\n        trace( "document: "+document.filename +" ["+document.url+"]" );\n    }\n    \n    // Store for other actions\n    _documents = documents;\n}\n')),(0,a.kt)("h2",{id:"update"},"Update"),(0,a.kt)("p",null,"If you wish, you can force an update of the current files by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"update"),". "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"var success:Boolean = CloudStorage.service.documentStore.update();\n")),(0,a.kt)("h2",{id:"load-a-document"},"Load a Document"),(0,a.kt)("p",null,"Once you have retrieved the list of files that are available you will most likely want to\nload the data of the document. This is done by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"loadDocument")," passing the document's\nfilename that you wish to load:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"CloudStorage.service.documentStore.addEventListener( DocumentEvent.LOAD_COMPLETE, document_loadCompleteHandler );\nCloudStorage.service.documentStore.addEventListener( DocumentEvent.LOAD_ERROR, document_loadErrorHandler );\n\nvar success:Boolean = CloudStorage.service.documentStore.loadDocument( document.filename );\n")),(0,a.kt)("p",null,"If this call succeeds you will receive one of the load events. In the following we are loading\na text file and attempt to trace the contents of the file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function document_loadCompleteHandler( event:DocumentEvent ):void\n{\n    trace( "document_loadCompleteHandler" );\n\n    CloudStorage.service.documentStore.removeEventListener( DocumentEvent.LOAD_COMPLETE, document_loadCompleteHandler );\n    CloudStorage.service.documentStore.removeEventListener( DocumentEvent.LOAD_ERROR, document_loadErrorHandler );\n    \n    if (event.document && event.document.data)\n    {\n        trace( "document.data["+event.document.data.length+"] : "+event.document.modifiedDate.toLocaleString() );\n        try {\n            trace( event.document.data.readUTFBytes( event.document.data.length ));\n        } catch (e:Error) {}\n    }\n}\n\nprivate function document_loadErrorHandler( event:DocumentEvent ):void\n{\n    trace( "document_loadErrorHandler: " + event.error );\n\n    CloudStorage.service.documentStore.removeEventListener( DocumentEvent.LOAD_COMPLETE, document_loadCompleteHandler );\n    CloudStorage.service.documentStore.removeEventListener( DocumentEvent.LOAD_ERROR, document_loadErrorHandler );\n}\n')),(0,a.kt)("h2",{id:"save-a-document"},"Save a Document"),(0,a.kt)("p",null,"Now that you have a loaded document you can modify the data in the file by changing the data contained in the\ndocument's ",(0,a.kt)("inlineCode",{parentName:"p"},"data"),". Once you have modified the content, call ",(0,a.kt)("inlineCode",{parentName:"p"},"saveDocument")," to write the contents of the doucment\nto the document store."),(0,a.kt)("p",null,"For example, in the following we create a string with a random number and write that to the document: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'var content:String =  "TEST SOME STRING WRITING "+String(Math.floor(Math.random()*100000));e\n\n_documents[0].data = new ByteArray();\n_documents[0].data.writeUTFBytes( content );\n\nCloudStorage.service.documentStore.addEventListener( DocumentEvent.SAVE_COMPLETE, document_saveCompleteHandler );\nCloudStorage.service.documentStore.addEventListener( DocumentEvent.SAVE_ERROR, document_saveErrorHandler );\n\nCloudStorage.service.documentStore.saveDocument( _documents[0] );\n')),(0,a.kt)("p",null,"Again you will receive either a complete or error event, depending on the success of the save."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function document_saveCompleteHandler( event:DocumentEvent ):void\n{\n    trace( "document_saveCompleteHandler" );\n    \n    CloudStorage.service.documentStore.removeEventListener( DocumentEvent.SAVE_COMPLETE, document_saveCompleteHandler );\n    CloudStorage.service.documentStore.removeEventListener( DocumentEvent.SAVE_ERROR, document_saveErrorHandler );\n}\n\nprivate function document_saveErrorHandler( event:DocumentEvent ):void\n{\n    trace( "document_saveErrorHandler" );\n    \n    CloudStorage.service.documentStore.removeEventListener( DocumentEvent.SAVE_COMPLETE, document_saveCompleteHandler );\n    CloudStorage.service.documentStore.removeEventListener( DocumentEvent.SAVE_ERROR, document_saveErrorHandler );\n}\n')),(0,a.kt)("h2",{id:"create-a-document"},"Create a Document"),(0,a.kt)("p",null,"To create a new document you can simply create an instance of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Document")," class\npassing in your data and then call ",(0,a.kt)("inlineCode",{parentName:"p"},"saveDocument"),". This will create a new file\nwhere appropriate and return the normal save success / error events."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'var document:Document = new Document();\ndocument.filename = "test.txt";\ndocument.data = new ByteArray();\ndocument.data.writeUTFBytes( "TEST SOME STRING WRITING" );\n\nCloudStorage.service.documentStore.addEventListener( DocumentEvent.SAVE_COMPLETE, document_createCompleteHandler );\nCloudStorage.service.documentStore.addEventListener( DocumentEvent.SAVE_ERROR, document_createErrorHandler );\n\nCloudStorage.service.documentStore.saveDocument( document );\n')),(0,a.kt)("p",null,"If you wish to create the document in a folder, you can add a folder name to the ",(0,a.kt)("inlineCode",{parentName:"p"},"filename")," of the document."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'document.filename = "folder/test.txt";\n')),(0,a.kt)("h2",{id:"delete-a-document"},"Delete a Document"),(0,a.kt)("p",null,"To delete a document call ",(0,a.kt)("inlineCode",{parentName:"p"},"deleteDocument")," with the filename of the document to delete."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"CloudStorage.service.documentStore.addEventListener( DocumentEvent.DELETE_COMPLETE, document_deleteCompleteHandler );\nCloudStorage.service.documentStore.addEventListener( DocumentEvent.DELETE_ERROR, document_deleteErrorHandler );\n\nCloudStorage.service.documentStore.deleteDocument( _documents[0].filename );\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function document_deleteCompleteHandler( event:DocumentEvent ):void\n{\n    trace( "document_deleteCompleteHandler" );\n    \n    CloudStorage.service.documentStore.removeEventListener( DocumentEvent.DELETE_COMPLETE, document_deleteCompleteHandler );\n    CloudStorage.service.documentStore.removeEventListener( DocumentEvent.DELETE_ERROR, document_deleteErrorHandler );\n}\n\nprivate function document_deleteErrorHandler( event:DocumentEvent ):void\n{\n    trace( "document_deleteErrorHandler" );\n    \n    CloudStorage.service.documentStore.removeEventListener( DocumentEvent.DELETE_COMPLETE, document_deleteCompleteHandler );\n    CloudStorage.service.documentStore.removeEventListener( DocumentEvent.DELETE_ERROR, document_deleteErrorHandler );\n}\n')),(0,a.kt)("h2",{id:"handling-conflicts"},"Handling conflicts"),(0,a.kt)("p",null,"Conflicts can (and will) occur when devices save to the same file simulataneously and cannot be resolved by iCloud."),(0,a.kt)("p",null,"You must listen for the conflict event and process each conflict. The event contains a list of documents that are\nin a conflicted state and you must use ",(0,a.kt)("inlineCode",{parentName:"p"},"getConflictingVersionsForDocument")," to get the versions of the file and then\ndecide which is the valid version and resolve the conflict with that version of the file, calling ",(0,a.kt)("inlineCode",{parentName:"p"},"resolveConflictWithVersion"),"."),(0,a.kt)("p",null,"The following iterates over the conflicts and blindly resolves the conflict with the first version of the file. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function ds_conflictHandler( event:DocumentStoreEvent ):void\n{\n    trace( "ds_conflictHandler" );  \n    for each (var document:Document in event.documents)\n    {\n        trace( "conflict: "+document.filename );\n        var versions:Array = CloudStorage.service.documentStore.getConflictingVersionsForDocument( document );\n        CloudStorage.service.documentStore.resolveConflictWithVersion( document, versions[0] );\n    }\n}\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"You should not use this in production! We just are using this to demonstrate the function calls."))))}u.isMDXComponent=!0}}]);