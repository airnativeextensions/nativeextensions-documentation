"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[67067],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(t),m=a,h=c["".concat(s,".").concat(m)]||c[m]||p[m]||r;return t?i.createElement(h,o(o({ref:n},u),{},{components:t})):i.createElement(h,o({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var d=2;d<r;d++)o[d]=t[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>o});var i=t(67294),a=t(86010);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:n,hidden:t,className:o}=e;return i.createElement("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,o),hidden:t},n)}},74866:(e,n,t)=>{t.d(n,{Z:()=>w});var i=t(87462),a=t(67294),r=t(86010),o=t(12466),l=t(16550),s=t(91980),d=t(67392),u=t(50012);function c(e){return function(e){var n,t;return null!=(n=null==(t=a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:a}}=e;return{value:n,label:t,attributes:i,default:a}}))}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=null!=n?n:c(t);return function(e){const n=(0,d.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const i=(0,l.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:n,groupId:t});return[(0,s._X)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function k(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,r=p(e),[o,l]=(0,a.useState)((()=>function(e){var n;let{defaultValue:t,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:i}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+i.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}const a=null!=(n=i.find((e=>e.default)))?n:i[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[s,d]=h({queryString:t,groupId:i}),[c,k]=function(e){let{groupId:n}=e;const t=function(e){return e?"docusaurus.tab."+e:null}(n),[i,r]=(0,u.Nk)(t);return[i,(0,a.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:i}),f=(()=>{const e=null!=s?s:c;return m({value:e,tabValues:r})?e:null})();(0,a.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error("Can't select invalid tab value="+e);l(e),d(e),k(e)}),[d,k,r]),tabValues:r}}var f=t(72389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:n,block:t,selectedValue:l,selectValue:s,tabValues:d}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),p=e=>{const n=e.currentTarget,t=u.indexOf(n),i=d[t].value;i!==l&&(c(n),s(i))},m=e=>{var n;let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{var i;const n=u.indexOf(e.currentTarget)+1;t=null!=(i=u[n])?i:u[0];break}case"ArrowLeft":{var a;const n=u.indexOf(e.currentTarget)-1;t=null!=(a=u[n])?a:u[u.length-1];break}}null==(n=t)||n.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n)},d.map((e=>{let{value:n,label:t,attributes:o}=e;return a.createElement("li",(0,i.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>u.push(e),onKeyDown:m,onClick:p},o,{className:(0,r.Z)("tabs__item",g.tabItem,null==o?void 0:o.className,{"tabs__item--active":l===n})}),null!=t?t:n)})))}function v(e){let{lazy:n,children:t,selectedValue:i}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},r.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i}))))}function y(e){const n=k(e);return a.createElement("div",{className:(0,r.Z)("tabs-container",g.tabList)},a.createElement(b,(0,i.Z)({},e,n)),a.createElement(v,(0,i.Z)({},e,n)))}function w(e){const n=(0,f.Z)();return a.createElement(y,(0,i.Z)({key:String(n)},e))}},85490:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var i=t(87462),a=(t(67294),t(3905)),r=t(74866),o=t(85162);const l={title:"Auth - Provider - Email Link",sidebar_label:"Email Link"},s=void 0,d={unversionedId:"firebase/auth/provider/email-link",id:"firebase/auth/provider/email-link",title:"Auth - Provider - Email Link",description:"You can use Firebase Authentication to sign in a user by sending them an email containing a link,",source:"@site/docs/firebase/auth/provider/email-link.mdx",sourceDirName:"firebase/auth/provider",slug:"/firebase/auth/provider/email-link",permalink:"/docs/firebase/auth/provider/email-link",draft:!1,tags:[],version:"current",frontMatter:{title:"Auth - Provider - Email Link",sidebar_label:"Email Link"},sidebar:"firebase",previous:{title:"Email",permalink:"/docs/firebase/auth/provider/email"},next:{title:"Anonymous",permalink:"/docs/firebase/auth/provider/anonymous"}},u={},c=[{value:"Enable Email Link sign-in",id:"enable-email-link-sign-in",level:2},{value:"Send an authentication link",id:"send-an-authentication-link",level:2},{value:"URL",id:"url",level:3},{value:"Complete sign in with the email link",id:"complete-sign-in-with-the-email-link",level:2},{value:"Completing sign-in in an Android App",id:"completing-sign-in-in-an-android-app",level:3},{value:"Configure Firebase Hosting",id:"configure-firebase-hosting",level:4},{value:"Verify link and sign in",id:"verify-link-and-sign-in",level:3},{value:"Linking/re-authentication with email link",id:"linkingre-authentication-with-email-link",level:3},{value:"Differentiating email/password from email link",id:"differentiating-emailpassword-from-email-link",level:2}],p={toc:c},m="wrapper";function h(e){let{components:n,...l}=e;return(0,a.kt)(m,(0,i.Z)({},p,l,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You can use Firebase Authentication to sign in a user by sending them an email containing a link,\nwhich they can click to sign in. In the process, the user's email address is also verified."),(0,a.kt)("p",null,"There are numerous benefits to signing in by email:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Low friction sign-up and sign-in."),(0,a.kt)("li",{parentName:"ul"},"Lower risk of password reuse across applications, which can undermine security of even well-selected passwords."),(0,a.kt)("li",{parentName:"ul"},"The ability to authenticate a user while also verifying that the user is the legitimate owner of an email address."),(0,a.kt)("li",{parentName:"ul"},"A user only needs an accessible email account to sign in. No ownership of a phone number or social media account is required."),(0,a.kt)("li",{parentName:"ul"},"A user can sign in securely without the need to provide (or remember) a password, which can be cumbersome on a mobile device."),(0,a.kt)("li",{parentName:"ul"},"An existing user who previously signed in with an email identifier (password or federated) can be upgraded to sign in with just the email. For example, a user who has forgotten their password can still sign in without needing to reset their password.")),(0,a.kt)("h2",{id:"enable-email-link-sign-in"},"Enable Email Link sign-in"),(0,a.kt)("p",null,"To sign in users by email link, you must first enable the Email provider and Email link sign-in method for your Firebase project:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"In the Firebase console, open the Auth section."),(0,a.kt)("li",{parentName:"ol"},"On the Sign in method tab, enable the Email/Password provider. Note that email/password sign-in must be enabled to use email link sign-in."),(0,a.kt)("li",{parentName:"ol"},"In the same section, enable Email link (passwordless sign-in) sign-in method."),(0,a.kt)("li",{parentName:"ol"},"Click Save.")),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(41166).Z,width:"1005",height:"556"})),(0,a.kt)("h2",{id:"send-an-authentication-link"},"Send an authentication link"),(0,a.kt)("p",null,"To initiate the authentication flow, present the user with an interface that prompts the user\nto provide their email address and then call ",(0,a.kt)("inlineCode",{parentName:"p"},"sendSignInLinkToEmail()")," to request that\nFirebase send the authentication link to the user's email."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Construct the ActionCodeSettings object, which provides Firebase with instructions on how to construct the email link.  Set the following fields:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"url"),": The deep link to embed and any additional state to be passed along. The link's domain has to be whitelisted in the Firebase Console list of authorized domains, which can be found by going to the Sign-in method tab (Authentication -> Sign-in method). The link will redirect the user to this URL if the app is not installed on their device and the app was not able to be installed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"androidPackageName")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"IOSBundleId"),": The apps to use when the sign-in link is opened on an Android or iOS device. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"handleCodeInApp"),": Set to ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),". The sign-in operation has to always be completed in the app unlike other out of band email actions (password reset and email verifications). This is because, at the end of the flow, the user is expected to be signed in and their Auth state persisted within the app."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Ask the user for their email.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Send the authentication link to the user's email, and save the user's email in case the user completes the email sign-in on the same device."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'var email:String = "some@email.com";\n\nvar actionCodeSettings:ActionCodeSettings = new ActionCodeSettings()\n    // URL you want to redirect back to. The domain (www.example.com) for this\n    // URL must be whitelisted in the Firebase Console.\n    .setUrl( "https://www.example.com/finishSignUp?cartId=1234" )\n    .setHandleCodeInApp( true )\n    .setIOSBundelId( "com.example.ios" )\n    .setAndroidPackageName( \n        "com.example.android", \n        true,  /* installIfNotAvailable */\n        "1" /* minimumVersion */ );\n        \nFirebaseAuth.service.sendSignInLinkToEmail( Config.email, actionCodeSettings );\n')),(0,a.kt)("p",null,"This process will dispatch a complete event when the process was completed with a success flag similar to other events in this extension:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'FirebaseAuth.service.addEventListener(\n    FirebaseAuthEvent.SEND_SIGNIN_LINK_TO_EMAIL_COMPLETE,\n    sendSignInLinkToEmail_completeHandler );\n\n\nfunction sendSignInLinkToEmail_completeHandler( event:FirebaseAuthEvent ):void\n{\n    trace( "sendSignInLinkToEmail():complete:" + event.success );\n}\n')),(0,a.kt)("p",null,"At this point the user will need to check their email and click on the link in the email."),(0,a.kt)("h3",{id:"url"},"URL"),(0,a.kt)("p",null,"For the URL, Firebase suggests you use your Firebase app url (",(0,a.kt)("inlineCode",{parentName:"p"},"https://PROJECT_ID.firebaseapp.com"),"). This normally can be found by checking the ",(0,a.kt)("em",{parentName:"p"},"Authorized Domains")," in the Firebase Console under ",(0,a.kt)("em",{parentName:"p"},"Authentication > Sign in Method")),(0,a.kt)("p",null,"Using this method simplifies the development and integration required. "),(0,a.kt)("p",null,"This guide will assume this approach however you can use whatever approach suits you needs to handle the url redirection."),(0,a.kt)("h2",{id:"complete-sign-in-with-the-email-link"},"Complete sign in with the email link"),(0,a.kt)("h3",{id:"completing-sign-in-in-an-android-app"},"Completing sign-in in an Android App"),(0,a.kt)("p",null,"Firebase Authentication uses Firebase Hosting to send the email link to a mobile device. For sign-in completion via mobile application, the application has to be configured to detect the incoming application link, parse the underlying deep link and then complete the sign-in. To learn more, see ",(0,a.kt)("a",{parentName:"p",href:"https://developer.android.com/training/app-links"},"Android App Links documentation"),"."),(0,a.kt)("h4",{id:"configure-firebase-hosting"},"Configure Firebase Hosting"),(0,a.kt)("p",null,"Firebase Authentication uses Firebase Hosting domains when creating and sending a link that is meant to be opened in a mobile application. A default Firebase Hosting domain has already been configured for you."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Configure Firebase Hosting domains:"),(0,a.kt)("p",{parentName:"li"},"In the Firebase console, open the Hosting section."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If you want to use the default domain for the email link that opens in mobile applications, go to your default site and take note of your default Hosting domain. A default Hosting domain typically looks like this: ",(0,a.kt)("inlineCode",{parentName:"li"},"PROJECT_ID.firebaseapp.com"),". You'll need this value when you configure your app to intercept the incoming link."),(0,a.kt)("li",{parentName:"ul"},"If you want to use a custom domain for the email link, you can register one with Firebase Hosting and use that for the link's domain."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Configuring Android applications:"))),(0,a.kt)("p",null,"In order to handle these links from your Android application, your app's package name needs to be specified in the Firebase console project settings. In addition, the SHA-1 and SHA-256 of the application certificate need to be provided."),(0,a.kt)("p",null,"To configure your Android application, follow these steps:"),(0,a.kt)(r.Z,{groupId:"packagemanager",defaultValue:"apm",values:[{label:"APM",value:"apm"},{label:"Manual",value:"manual"}],mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"apm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"apm generate config android\n")),(0,a.kt)("p",null,"Edit the ",(0,a.kt)("inlineCode",{parentName:"p"},"AndroidManifest.xml")," that was created at ",(0,a.kt)("inlineCode",{parentName:"p"},"config/android/AndroidManifest.xml")," file to include the following intent filter:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android" xmlns:tools="http://schemas.android.com/tools">\n\n    <uses-sdk android:minSdkVersion="23" android:targetSdkVersion="35" />\n    <uses-prermission android:name="android.permission.INTERNET" />\n    <application>\n        <activity>\n            <intent-filter>\n                <action android:name="android.intent.action.MAIN"/>\n                <category android:name="android.intent.category.LAUNCHER"/>\n            </intent-filter>\n            <intent-filter android:autoVerify="true">\n                <action android:name="android.intent.action.VIEW" />\n                <category android:name="android.intent.category.DEFAULT" />\n                <category android:name="android.intent.category.BROWSABLE" />\n                <data\n                android:scheme="https"\n                android:host="<PROJECT_ID>.firebaseapp.com"\n                android:pathPrefix="/__/auth/links" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n')),(0,a.kt)("p",null,"Then regenerate the application descriptor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"apm generate app-descriptor\n"))),(0,a.kt)(o.Z,{value:"manual",mdxType:"TabItem"},"In your application descriptor, you need to add an intent filter that will handle the incoming link. This is done by adding the following code to your manifest additions:",(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<uses-sdk android:minSdkVersion="23" android:targetSdkVersion="35" />\n<uses-prermission android:name="android.permission.INTERNET" />\n<application>\n    <activity>\n        <intent-filter>\n            <action android:name="android.intent.action.MAIN"/>\n            <category android:name="android.intent.category.LAUNCHER"/>\n        </intent-filter>\n        <intent-filter android:autoVerify="true">\n            <action android:name="android.intent.action.VIEW" />\n            <category android:name="android.intent.category.DEFAULT" />\n            <category android:name="android.intent.category.BROWSABLE" />\n            <data\n            android:scheme="https"\n            android:host="<PROJECT_ID>.firebaseapp.com"\n            android:pathPrefix="/__/auth/links" />\n        </intent-filter>\n    </activity>\n</application>\n')))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"It's important that the ",(0,a.kt)("inlineCode",{parentName:"p"},"<activity>")," element has no attributes and that you leave the first ",(0,a.kt)("inlineCode",{parentName:"p"},"<intent-filter>")," element as is,\nas this is required for the AIR application to be launched correctly."),(0,a.kt)("p",{parentName:"admonition"},"Also you must replace ",(0,a.kt)("inlineCode",{parentName:"p"},"<PROJECT_ID>.firebaseapp.com")," with your actual domain, either ",(0,a.kt)("inlineCode",{parentName:"p"},"<PROJECT_ID>.firebaseapp.com")," or your custom domain.")),(0,a.kt)("p",null,"When users open a hosting link in your Android app, the app will be launched and the extension will receive the link and dispatch the ",(0,a.kt)("inlineCode",{parentName:"p"},"FirebaseAuthEvent.EMAIL_LINK_RECEIVED")," event:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"FirebaseAuth.service.addEventListener( FirebaseAuthEvent.EMAIL_LINK_RECEIVED, emailLink_receivedHandler );\n\nfunction emailLink_receivedHandler( event:FirebaseAuthEvent ):void\n{\n    // Handle the email link authentication here\n}\n")),(0,a.kt)("h3",{id:"verify-link-and-sign-in"},"Verify link and sign in"),(0,a.kt)("p",null,"After you receive the link as described above, verify that it is meant for email link authentication and complete the sign in."),(0,a.kt)("p",null,'You can check if a link is a "sign in with email link" by using the ',(0,a.kt)("inlineCode",{parentName:"p"},"isSignInWithEmailLink()")," function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'if (FirebaseAuth.service.isSignInWithEmailLink( link ))\n{\n    // This is a "sign in with email link"\n}\n')),(0,a.kt)("p",null,"You then can sign in the user using their email and the email link by calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"signInWithEmailLink()")," function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"if (FirebaseAuth.service.isSignInWithEmailLink( link ))\n{\n    // Initiate the sign in process\n    FirebaseAuth.service.signInWithEmailLink( email, link );\n}\n")),(0,a.kt)("p",null,"The sign in process will dispatch an event once complete:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'FirebaseAuth.service.addEventListener(\n    FirebaseAuthEvent.SIGNIN_WITH_EMAILLINK_COMPLETE,\n    signInWithEmailLink_completeHandler );\n\nfunction signInWithEmailLink_completeHandler( event:FirebaseAuthEvent ):void\n{\n    trace( "signInWithEmailLink():complete:" + event.success );\n}\n')),(0,a.kt)("p",null,"Of course you can use your global ",(0,a.kt)("inlineCode",{parentName:"p"},"FirebaseAuthEvent.AUTHSTATE_CHANGED")," to listen for sign in success as well as this handler."),(0,a.kt)("h3",{id:"linkingre-authentication-with-email-link"},"Linking/re-authentication with email link"),(0,a.kt)("p",null,"You can also link this method of authentication to an existing user. For example a user previously authenticated with another provider, such as a phone number, can add this method of sign-in to their existing account."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"var credential:AuthCredential = EmailAuthProvider.getEmailLinkCredential( email, link );\n\nvar user:FirebaseUser = FirebaseAuth.service.getCurrentUser();\n\nuser.linkWithCredential( credential );\n")),(0,a.kt)("h2",{id:"differentiating-emailpassword-from-email-link"},"Differentiating email/password from email link"),(0,a.kt)("admonition",{title:"Deprecated",type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"This functionality has been deprecated in order to improve user account security.")),(0,a.kt)("p",null,"In case you support both password and link-based sign in with email, to differentiate the method of sign in for a password/link user, use ",(0,a.kt)("inlineCode",{parentName:"p"},"fetchSignInMethodsForEmail()"),". This is useful for identifier-first flows where the user is first asked to provide their email and then presented with the method of sign-in:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'FirebaseAuth.service.addEventListener(\n        FirebaseAuthMethodsEvent.FETCH_SIGNIN_METHODS_COMPLETE,\n        fetchSignInMethodsForEmail_completeHandler );\n\nFirebaseAuth.service.fetchSignInMethodsForEmail( Config.email );\n        \nfunction fetchSignInMethodsForEmail_completeHandler( event:FirebaseAuthMethodsEvent ):void\n{\n    trace( "fetchSignInMethodsForEmail():complete:" + event.success );\n    if (event.methods != null)\n    {\n        for each (var method:String in event.methods)\n        {\n            if (EmailAuthCredential.EMAIL_LINK_SIGN_IN_METHOD == method)\n            {\n                // User can sign in with email/link\n            }\n            else if (EmailAuthCredential.EMAIL_PASSWORD_SIGN_IN_METHOD == method)\n            {\n                // User can sign in with email/password\n            }\n        }\n    }\n            \n}\n')),(0,a.kt)("p",null,"Note: email/password and email/link are considered the same ",(0,a.kt)("inlineCode",{parentName:"p"},"EmailAuthProvider")," (same ",(0,a.kt)("inlineCode",{parentName:"p"},"PROVIDER_ID"),") with different methods of sign-in."))}h.isMDXComponent=!0},41166:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/auth-email-link-enable-ee0b6d1f395e8793a5d8136cc0eef3fc.png"}}]);