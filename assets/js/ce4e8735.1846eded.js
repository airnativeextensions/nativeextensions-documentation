(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[63686],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},v=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),v=c(n),d=a,m=v["".concat(s,".").concat(d)]||v[d]||p[d]||r;return n?i.createElement(m,l(l({ref:t},u),{},{components:n})):i.createElement(m,l({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=v;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<r;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}v.displayName="MDXCreateElement"},48588:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return s},default:function(){return u}});var i=n(22122),a=n(19756),r=(n(67294),n(3905)),l={title:"Turn Based Multiplayer - Invitations",sidebar_label:"Invitations"},o={unversionedId:"gameservices/turn-based-multiplayer---invitations",id:"gameservices/turn-based-multiplayer---invitations",isDocsHomePage:!1,title:"Turn Based Multiplayer - Invitations",description:"Invitations are received when the player is invited to play a multiplayer game.",source:"@site/docs/gameservices/turn-based-multiplayer---invitations.md",sourceDirName:"gameservices",slug:"/gameservices/turn-based-multiplayer---invitations",permalink:"/docs/gameservices/turn-based-multiplayer---invitations",version:"current",sidebar_label:"Invitations",frontMatter:{title:"Turn Based Multiplayer - Invitations",sidebar_label:"Invitations"},sidebar:"gameservices",previous:{title:"Turn Based Multiplayer - Implementation",permalink:"/docs/gameservices/turn-based-multiplayer---implementation"},next:{title:"Quests and Events",permalink:"/docs/gameservices/quests-and-events"}},s=[{value:"Loading invitations",id:"loading-invitations",children:[]},{value:"Receiving Invites",id:"receiving-invites",children:[]},{value:"Accepting Invites",id:"accepting-invites",children:[{value:"Turn Based Invites",id:"turn-based-invites",children:[]}]},{value:"Decline Invites",id:"decline-invites",children:[]}],c={toc:s};function u(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Invitations are received when the player is invited to play a multiplayer game. "),(0,r.kt)("p",null,"As invitations are not specific to turn based multiplayer you will mostly be dealing\nwith the main GameServices instance (",(0,r.kt)("inlineCode",{parentName:"p"},"GameServices.service"),") here."),(0,r.kt)("p",null,"Invitations can be for either real-time or turn-based multiplayer games.\n(Currently only turn-based matches are supported.)"),(0,r.kt)("p",null,"Invitations are supported by Google Play Services only.\nInvitations on Game Center are handled through the Game Center UI."),(0,r.kt)("h2",{id:"loading-invitations"},"Loading invitations"),(0,r.kt)("p",null,"You can load all the invitations that a player has received by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"loadInvites"),".   "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"GameServices.service.loadInvites();\n")),(0,r.kt)("p",null,"This call will dispatch one of the following events defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"com.distriqt.extension.gameservices.events.MultiplayerEvent")," class:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MultiplayerEvent.LOADINVITES_SUCCESS"),": When successful and the invitations are available for processing"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MultiplayerEvent.LOADINVITES_FAILED"),": If loading the invitations failed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MultiplayerEvent.LOADINVITES_NOT_SUPPORTED"),": This is dispatched when the current service doesn't support loading of invitations. You should treat this as a success and display an alternative interface to your user")),(0,r.kt)("p",null,"On success you will have an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"Invitation")," objects (",(0,r.kt)("inlineCode",{parentName:"p"},"com.distriqt.extension.gameservices.multiplayer.Invitation"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function gameServices_loadInvitesSuccessHandler( event:MultiplayerEvent ):void\n{\n    for each (var invitation:Invitation in event.data)\n    {\n        trace( "INVITE: ["+invitation.id+"] from:"+invitation.inviter.displayName );\n    }\n}\n')),(0,r.kt)("p",null,"You can handle these invites in your UI as you require and accept or deny them\ndepending on your users input."),(0,r.kt)("h2",{id:"receiving-invites"},"Receiving Invites"),(0,r.kt)("p",null,"While you application is running you can actively receive invitations by listening for the\n",(0,r.kt)("inlineCode",{parentName:"p"},"MultiplayerEvent.INVITATION_RECEIVED")," event. This is dispatched whenever an invitation\nis received by the game service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"GameServices.service.addEventListener( MultiplayerEvent.INVITATION_RECEIVED, invitationReceivedHandler );\n")),(0,r.kt)("p",null,"You should handle this similarly to the load invitations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function invitationReceivedHandler( event:MultiplayerEvent ):void \n{\n    var invitation:Invitation = Invitation(event.data);\n\n    trace( "INVITE: ["+invitation.id+"] from:"+invitation.inviter.displayName );\n}\n')),(0,r.kt)("h2",{id:"accepting-invites"},"Accepting Invites"),(0,r.kt)("p",null,"Accepting an invitation must be done through the correct handler."),(0,r.kt)("p",null,"You can ascertain the type of the invitation through the ",(0,r.kt)("inlineCode",{parentName:"p"},"invitation.type")," variable\nwhich can be either ",(0,r.kt)("inlineCode",{parentName:"p"},"INVITATION_TYPE_REAL_TIME")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"INVITATION_TYPE_TURN_BASED"),"."),(0,r.kt)("h3",{id:"turn-based-invites"},"Turn Based Invites"),(0,r.kt)("p",null,"Accepting a turn based match uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"GameServices.service.turnBasedMultiplayer.acceptInvitation"),"\nfunction which will accept an available invitation to start a match."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"GameServices.service.turnBasedMultiplayer.acceptInvitation( invite );\n")),(0,r.kt)("p",null,"If successful the player will receive a new match object to play this game."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TurnBasedMatchEvent.ACCEPTINVITATION_SUCCESS"),": If successful the event will contain the match object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TurnBasedMatchEvent.ACCEPTINVITATION_FAILED"),": Dispatched if there was an error while accepting an invitation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"GameServices.service.turnBasedMultiplayer.addEventListener( TurnBasedMatchEvent.ACCEPTINVITATION_SUCCESS, acceptInvitationSuccessHandler );\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"private function acceptInvitationSuccessHandler( event:TurnBasedMatchEvent ):void \n{\n    // event.match will contain the match object\n}\n")),(0,r.kt)("p",null,"You can now process the match object: ",(0,r.kt)("a",{parentName:"p",href:"turn-based-multiplayer---implementation"},"Add Turn-based Multplayer Support")),(0,r.kt)("h2",{id:"decline-invites"},"Decline Invites"),(0,r.kt)("p",null,"If your player doesn't wish to accept the invite and play the match, they can\ndecline the invitation using the ",(0,r.kt)("inlineCode",{parentName:"p"},"declineInvitation")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"GameServices.service.turnBasedMultiplayer.declineInvitation( invite );\n")))}u.isMDXComponent=!0}}]);