"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[46076],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),h=c(n),m=a,d=h["".concat(u,".").concat(m)]||h[m]||p[m]||i;return n?r.createElement(d,o(o({ref:t},l),{},{components:n})):r.createElement(d,o({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5476:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o={title:"Requesting Authorisation",sidebar_label:"Requesting Authorisation"},s=void 0,u={unversionedId:"camera/requesting-authorisation",id:"camera/requesting-authorisation",isDocsHomePage:!1,title:"Requesting Authorisation",description:"When you are going to be accessing the camera you must check that your application has been allowed access.",source:"@site/docs/camera/requesting-authorisation.md",sourceDirName:"camera",slug:"/camera/requesting-authorisation",permalink:"/docs/camera/requesting-authorisation",tags:[],version:"current",frontMatter:{title:"Requesting Authorisation",sidebar_label:"Requesting Authorisation"},sidebar:"camera",previous:{title:"Add the Extension",permalink:"/docs/camera/add-the-extension"},next:{title:"Selecting a Device",permalink:"/docs/camera/selecting-a-device"}},c=[{value:"Authorisation Types",id:"authorisation-types",children:[]},{value:"Device Settings",id:"device-settings",children:[]}],l={toc:c};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When you are going to be accessing the camera you must check that your application has been allowed access.\nTo this end the extension provides several helpers to check and request access to the camera.\nNormal permission rules apply here."),(0,i.kt)("p",null,"On Android these permissions are listed through the manifest additions.\nOn older versions of Android these permissions are accepted when the user installs the application.\nMore modern versions (Marshmallow 6 ","[v23]","+) require that you request the permissions similar to iOS.\nYou will still need to list them in your manifest and then follow the same code below as for iOS, except that on Android you will be able to ask multiple times.\nYou should respect the ",(0,i.kt)("inlineCode",{parentName:"p"},"SHOULD_EXPLAIN")," status by displaying additional information to your user about why you require this functionality."),(0,i.kt)("p",null,"On iOS the user must be asked at runtime, which you only get one chance to ask,\nafter which you must direct the user to manually change the permissions in the settings."),(0,i.kt)("p",null,"The following code will work across both platforms:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"Camera.instance.addEventListener( AuthorisationEvent.CHANGED, authorisationStatus_changedHandler );\n\nswitch (Camera.instance.authorisationStatus())\n{\n    case AuthorisationStatus.SHOULD_EXPLAIN:\n    case AuthorisationStatus.NOT_DETERMINED:\n        // REQUEST ACCESS: This will display the permission dialog\n        Camera.instance.requestAuthorisation( AuthorisationType.CAMERA );\n        return;\n    \n    case AuthorisationStatus.DENIED:\n    case AuthorisationStatus.UNKNOWN:\n    case AuthorisationStatus.RESTRICTED:\n        // ACCESS DENIED: You should inform your user appropriately\n        return;\n        \n    case AuthorisationStatus.AUTHORISED:\n        // AUTHORISED: Camera will be available\n        break;                      \n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function authorisationStatus_changedHandler( event:AuthorisationEvent ):void\n{\n    trace( "authorisationStatus_changedHandler: "+event.status );\n}\n')),(0,i.kt)("h3",{id:"authorisation-types"},"Authorisation Types"),(0,i.kt)("p",null,"There are several types of authorisation that you will require for this extension and as they\nmay not be required by all applications they have been separated so you can request them individually\nas appropriate for your application:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AuthorisationType.CAMERA"),": Access to the camera device"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AuthorisationType.PHOTOS"),": Access to the camera roll to save images (only required if you set ",(0,i.kt)("inlineCode",{parentName:"li"},"saveToCameraRoll")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," in a capture request)")),(0,i.kt)("p",null,"You will need to run through the above process for each of the permissions your application\nrequires!"),(0,i.kt)("h2",{id:"device-settings"},"Device Settings"),(0,i.kt)("p",null,"If your user has denied access to the camera in some situations you can prompt them to enable them\nand then redirect them to your application device settings, which will allow your user to change\nthe setting."),(0,i.kt)("p",null,"This is especially important on iOS where you only get one attempt to ask your user for permission."),(0,i.kt)("p",null,"To redirect your user simply call the ",(0,i.kt)("inlineCode",{parentName:"p"},"openDeviceSettings()")," function.\nYou can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"canOpenDeviceSettings")," flag to check if the current device supports this functionality."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"if (Camera.instance.canOpenDeviceSettings)\n{\n    Camera.instance.openDeviceSettings();\n}\n")))}p.isMDXComponent=!0}}]);