(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[2082],{3905:function(e,a,t){"use strict";t.d(a,{Zo:function(){return d},kt:function(){return m}});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),s=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},d=function(e){var a=s(e.components);return n.createElement(p.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,f=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return t?n.createElement(f,i(i({ref:a},d),{},{components:t})):n.createElement(f,i({ref:a},d))}));function m(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var p in a)hasOwnProperty.call(a,p)&&(l[p]=a[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},40454:function(e,a,t){"use strict";t.r(a),t.d(a,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var n=t(22122),r=t(19756),o=(t(67294),t(3905)),i={title:"Storage - Upload Files",sidebar_label:"Upload Files"},l={unversionedId:"firebase/storage/upload-files",id:"firebase/storage/upload-files",isDocsHomePage:!1,title:"Storage - Upload Files",description:"Upload Files",source:"@site/docs/firebase/storage/upload-files.md",sourceDirName:"firebase/storage",slug:"/firebase/storage/upload-files",permalink:"/docs/firebase/storage/upload-files",version:"current",sidebar_label:"Upload Files",frontMatter:{title:"Storage - Upload Files",sidebar_label:"Upload Files"},sidebar:"firebase",previous:{title:"Storage - References",permalink:"/docs/firebase/storage/references"},next:{title:"Storage - Download Files",permalink:"/docs/firebase/storage/download-files"}},p=[{value:"Upload Files",id:"upload-files",children:[]},{value:"Upload from data in memory",id:"upload-from-data-in-memory",children:[]},{value:"Upload from a local file",id:"upload-from-a-local-file",children:[]},{value:"Add File Metadata",id:"add-file-metadata",children:[]},{value:"Manage Uploads",id:"manage-uploads",children:[]},{value:"Monitor Upload Progress",id:"monitor-upload-progress",children:[]}],s={toc:p};function d(e){var a=e.components,t=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,n.Z)({},s,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"upload-files"},"Upload Files"),(0,o.kt)("p",null,"To upload a file to Firebase Storage, you first create a reference to the full path of the file, including the file name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},'var reference:StorageReference = FirebaseStorage.service.getInstance().child( "images/upload.png" );\n')),(0,o.kt)("p",null,"Once you've created an appropriate reference, you then call the following to upload to Firebase Storage:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"putBytes()"),": Upload from data in memory"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"putFile()"),": Upload a file on the file system")),(0,o.kt)("h2",{id:"upload-from-data-in-memory"},"Upload from data in memory"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"putBytes()")," method is the simplest way to upload a file to Firebase Storage.\n",(0,o.kt)("inlineCode",{parentName:"p"},"putBytes()")," takes a ",(0,o.kt)("inlineCode",{parentName:"p"},"ByteArray")," and returns an ",(0,o.kt)("inlineCode",{parentName:"p"},"UploadTask")," that you can use to\nmanage and monitor the status of the upload."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"// Data from some source, eg encoding bitmap data to jpg\nvar bytes:ByteArray = ...; \n\nvar task:UploadTask = reference.putBytes( bytes );\n")),(0,o.kt)("p",null,"Because ",(0,o.kt)("inlineCode",{parentName:"p"},"putBytes()")," accepts a ",(0,o.kt)("inlineCode",{parentName:"p"},"ByteArray"),", it requires your app to hold the entire\ncontents of a file in memory at once. "),(0,o.kt)("h2",{id:"upload-from-a-local-file"},"Upload from a local file"),(0,o.kt)("p",null,"You can upload local files on the device, such as photos and videos from the camera,\nwith the ",(0,o.kt)("inlineCode",{parentName:"p"},"putFile()")," method. ",(0,o.kt)("inlineCode",{parentName:"p"},"putFile()")," takes a File url and returns an ",(0,o.kt)("inlineCode",{parentName:"p"},"UploadTask"),"\nwhich you can use to manage and monitor the status of the upload."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},'var file:File = File.applicationStorageDirectory.resolvePath( "plane.png" );\n\nvar task:UploadTask = reference.putFile( file );\n')),(0,o.kt)("h2",{id:"add-file-metadata"},"Add File Metadata"),(0,o.kt)("p",null,"You can also include metadata when you upload files. This metadata contains\ntypical file metadata properties such as ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"size"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"contentType"),"\n(commonly referred to as MIME type). The ",(0,o.kt)("inlineCode",{parentName:"p"},"putFile()")," method automatically\ninfers the MIME type from the File extension, but you can override the\nauto-detected type by specifying ",(0,o.kt)("inlineCode",{parentName:"p"},"contentType")," in the metadata. If you do\nnot provide a ",(0,o.kt)("inlineCode",{parentName:"p"},"contentType")," and Firebase Storage cannot infer a default from\nthe file extension, Firebase Storage uses ",(0,o.kt)("inlineCode",{parentName:"p"},"application/octet-stream"),". "),(0,o.kt)("p",null,"See the ","[File Metadata|Storage - File Metadata]"," section for more information about file metadata."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},'var reference:StorageReference = FirebaseStorage.service.getReference().child( "images/test" );\n\nvar metadata:StorageMetadata = new StorageMetadata();\nmetadata.contentType = "image/jpg";\n\nvar task:UploadTask = reference.putFile( file, metadata );\n')),(0,o.kt)("h2",{id:"manage-uploads"},"Manage Uploads"),(0,o.kt)("p",null,"In addition to starting uploads, you can pause, resume, and cancel uploads\nusing the ",(0,o.kt)("inlineCode",{parentName:"p"},"pause()"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"resume()"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"cancel()")," methods. Pause and resume\nevents raise pause and progress state changes respectively. Canceling an\nupload causes the upload to fail with an error indicating that the upload\nwas canceled."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"// Pause the upload\ntask.pause();\n\n// Resume the upload\ntask.resume();\n\n// Cancel the upload\ntask.cancel();\n")),(0,o.kt)("h2",{id:"monitor-upload-progress"},"Monitor Upload Progress"),(0,o.kt)("p",null,"An upload task dispatches ",(0,o.kt)("inlineCode",{parentName:"p"},"UploadTaskEvent"),"s to indicate completion, progress, and errors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"task.addEventListener( UploadTaskEvent.SUCCESS, uploadSuccessHandler );\ntask.addEventListener( UploadTaskEvent.ERROR, uploadErrorHandler );\n")),(0,o.kt)("p",null,"Events are dispatched with a ",(0,o.kt)("inlineCode",{parentName:"p"},"UploadTaskSnapshot")," object.\nThis object is an immutable view of the task at the time the event occurred."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"private function uploadSuccessHandler( event:UploadTaskEvent ):void \n{\n    // event.snapshot contains details about the completed upload\n}\n\nprivate function uploadErrorHandler( event:UploadTaskEvent ):void \n{\n    // Handle unsuccessful uploads\n    // event.errorMessage contains the reason for the error\n}\n")))}d.isMDXComponent=!0}}]);