"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[2082],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return m}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(a),m=r,f=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return a?n.createElement(f,l(l({ref:t},d),{},{components:a})):n.createElement(f,l({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},18961:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return d},default:function(){return u}});var n=a(87462),r=a(63366),o=(a(67294),a(3905)),l=["components"],i={title:"Storage - Upload Files",sidebar_label:"Upload Files"},p=void 0,s={unversionedId:"firebase/storage/upload-files",id:"firebase/storage/upload-files",title:"Storage - Upload Files",description:"Upload Files",source:"@site/docs/firebase/storage/upload-files.md",sourceDirName:"firebase/storage",slug:"/firebase/storage/upload-files",permalink:"/docs/firebase/storage/upload-files",tags:[],version:"current",frontMatter:{title:"Storage - Upload Files",sidebar_label:"Upload Files"},sidebar:"firebase",previous:{title:"References",permalink:"/docs/firebase/storage/references"},next:{title:"Download Files",permalink:"/docs/firebase/storage/download-files"}},d=[{value:"Upload Files",id:"upload-files",children:[],level:2},{value:"Upload from data in memory",id:"upload-from-data-in-memory",children:[],level:2},{value:"Upload from a local file",id:"upload-from-a-local-file",children:[],level:2},{value:"Add File Metadata",id:"add-file-metadata",children:[],level:2},{value:"Manage Uploads",id:"manage-uploads",children:[],level:2},{value:"Monitor Upload Progress",id:"monitor-upload-progress",children:[],level:2}],c={toc:d};function u(e){var t=e.components,a=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"upload-files"},"Upload Files"),(0,o.kt)("p",null,"To upload a file to Firebase Storage, you first create a reference to the full path of the file, including the file name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},'var reference:StorageReference = FirebaseStorage.service.getInstance().child( "images/upload.png" );\n')),(0,o.kt)("p",null,"Once you've created an appropriate reference, you then call the following to upload to Firebase Storage:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"putBytes()"),": Upload from data in memory"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"putFile()"),": Upload a file on the file system")),(0,o.kt)("h2",{id:"upload-from-data-in-memory"},"Upload from data in memory"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"putBytes()")," method is the simplest way to upload a file to Firebase Storage.\n",(0,o.kt)("inlineCode",{parentName:"p"},"putBytes()")," takes a ",(0,o.kt)("inlineCode",{parentName:"p"},"ByteArray")," and returns an ",(0,o.kt)("inlineCode",{parentName:"p"},"UploadTask")," that you can use to\nmanage and monitor the status of the upload."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"// Data from some source, eg encoding bitmap data to jpg\nvar bytes:ByteArray = ...; \n\nvar task:UploadTask = reference.putBytes( bytes );\n")),(0,o.kt)("p",null,"Because ",(0,o.kt)("inlineCode",{parentName:"p"},"putBytes()")," accepts a ",(0,o.kt)("inlineCode",{parentName:"p"},"ByteArray"),", it requires your app to hold the entire\ncontents of a file in memory at once. "),(0,o.kt)("h2",{id:"upload-from-a-local-file"},"Upload from a local file"),(0,o.kt)("p",null,"You can upload local files on the device, such as photos and videos from the camera,\nwith the ",(0,o.kt)("inlineCode",{parentName:"p"},"putFile()")," method. ",(0,o.kt)("inlineCode",{parentName:"p"},"putFile()")," takes a File url and returns an ",(0,o.kt)("inlineCode",{parentName:"p"},"UploadTask"),"\nwhich you can use to manage and monitor the status of the upload."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},'var file:File = File.applicationStorageDirectory.resolvePath( "plane.png" );\n\nvar task:UploadTask = reference.putFile( file );\n')),(0,o.kt)("h2",{id:"add-file-metadata"},"Add File Metadata"),(0,o.kt)("p",null,"You can also include metadata when you upload files. This metadata contains\ntypical file metadata properties such as ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"size"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"contentType"),"\n(commonly referred to as MIME type). The ",(0,o.kt)("inlineCode",{parentName:"p"},"putFile()")," method automatically\ninfers the MIME type from the File extension, but you can override the\nauto-detected type by specifying ",(0,o.kt)("inlineCode",{parentName:"p"},"contentType")," in the metadata. If you do\nnot provide a ",(0,o.kt)("inlineCode",{parentName:"p"},"contentType")," and Firebase Storage cannot infer a default from\nthe file extension, Firebase Storage uses ",(0,o.kt)("inlineCode",{parentName:"p"},"application/octet-stream"),". "),(0,o.kt)("p",null,"See the ","[File Metadata|Storage - File Metadata]"," section for more information about file metadata."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},'var reference:StorageReference = FirebaseStorage.service.getReference().child( "images/test" );\n\nvar metadata:StorageMetadata = new StorageMetadata();\nmetadata.contentType = "image/jpg";\n\nvar task:UploadTask = reference.putFile( file, metadata );\n')),(0,o.kt)("h2",{id:"manage-uploads"},"Manage Uploads"),(0,o.kt)("p",null,"In addition to starting uploads, you can pause, resume, and cancel uploads\nusing the ",(0,o.kt)("inlineCode",{parentName:"p"},"pause()"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"resume()"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"cancel()")," methods. Pause and resume\nevents raise pause and progress state changes respectively. Canceling an\nupload causes the upload to fail with an error indicating that the upload\nwas canceled."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"// Pause the upload\ntask.pause();\n\n// Resume the upload\ntask.resume();\n\n// Cancel the upload\ntask.cancel();\n")),(0,o.kt)("h2",{id:"monitor-upload-progress"},"Monitor Upload Progress"),(0,o.kt)("p",null,"An upload task dispatches ",(0,o.kt)("inlineCode",{parentName:"p"},"UploadTaskEvent"),"s to indicate completion, progress, and errors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"task.addEventListener( UploadTaskEvent.SUCCESS, uploadSuccessHandler );\ntask.addEventListener( UploadTaskEvent.ERROR, uploadErrorHandler );\n")),(0,o.kt)("p",null,"Events are dispatched with a ",(0,o.kt)("inlineCode",{parentName:"p"},"UploadTaskSnapshot")," object.\nThis object is an immutable view of the task at the time the event occurred."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"private function uploadSuccessHandler( event:UploadTaskEvent ):void \n{\n    // event.snapshot contains details about the completed upload\n}\n\nprivate function uploadErrorHandler( event:UploadTaskEvent ):void \n{\n    // Handle unsuccessful uploads\n    // event.errorMessage contains the reason for the error\n}\n")))}u.isMDXComponent=!0}}]);