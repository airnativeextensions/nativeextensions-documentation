"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[43763],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return u}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,y=m["".concat(d,".").concat(u)]||m[u]||s[u]||o;return n?r.createElement(y,i(i({ref:t},l),{},{components:n})):r.createElement(y,i({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},55299:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return p},default:function(){return s}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i={title:"Decoding ByteArray to BitmapData",sidebar_label:"Decoding ByteArray to BitmapData"},c=void 0,d={unversionedId:"image/decoding-bytearray-to-bitmapdata",id:"image/decoding-bytearray-to-bitmapdata",isDocsHomePage:!1,title:"Decoding ByteArray to BitmapData",description:"This process is the opposite of the encode function. It allows you to decode",source:"@site/docs/image/decoding-bytearray-to-bitmapdata.md",sourceDirName:"image",slug:"/image/decoding-bytearray-to-bitmapdata",permalink:"/docs/image/decoding-bytearray-to-bitmapdata",tags:[],version:"current",frontMatter:{title:"Decoding ByteArray to BitmapData",sidebar_label:"Decoding ByteArray to BitmapData"},sidebar:"image",previous:{title:"Encoding BitmapData to ByteArray",permalink:"/docs/image/encoding-bitmapdata-to-bytearray"},next:{title:"Saving BitmapData to the Camera Roll",permalink:"/docs/image/saving-bitmapdata-to-the-camera-roll"}},p=[],l={toc:p};function s(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This process is the opposite of the encode function. It allows you to decode\nencoded image data into bitmap data. It is the core functionality used to\nload a bitmap from file converting the file bytes to bitmap data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"var data:ByteArray = ...; // Encoded data from a file load for example\n\nImage.service.addEventListener( ImageEvent.DECODE_COMPLETE, decodeAsync_completeHandler );\nImage.service.addEventListener( ImageEvent.DECODE_ERROR, decodeAsync_errorHandler );\n\nvar success:Boolean = Image.service.decodeAsync( data );\n")),(0,o.kt)("p",null,"When the decode operation completes you will receive either an ",(0,o.kt)("inlineCode",{parentName:"p"},"ImageEvent.DECODE_COMPLETE"),"\nevent or an ",(0,o.kt)("inlineCode",{parentName:"p"},"ImageEvent.DECODE_ERROR")," event:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},'function decodeAsync_completeHandler( event:ImageEvent ):void\n{\n    trace( "Decode successful" );\n    \n    // Use the bitmap data\n    var b:Bitmap = new Bitmap( event.bitmapData );\n    addChild( b );\n}\n\nfunction decodeAsync_errorHandler( event:ImageEvent ):void\n{\n    trace( "Decode failed: " + event.error );\n}\n')))}s.isMDXComponent=!0}}]);