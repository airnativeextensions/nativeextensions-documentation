"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[37631],{3905:function(e,a,n){n.d(a,{Zo:function(){return d},kt:function(){return h}});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),c=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},d=function(e){var a=c(e.components);return t.createElement(s.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},p=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,f=p["".concat(s,".").concat(h)]||p[h]||u[h]||i;return n?t.createElement(f,o(o({ref:a},d),{},{components:n})):t.createElement(f,o({ref:a},d))}));function h(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},13564:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var t=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],l={title:"Database - Read Data and Change Events",sidebar_label:"Read Data and Change Events"},s=void 0,c={unversionedId:"firebase/database/read-data-and-change-events",id:"firebase/database/read-data-and-change-events",title:"Database - Read Data and Change Events",description:"Reading Data and Listening to Value Change events",source:"@site/docs/firebase/database/read-data-and-change-events.md",sourceDirName:"firebase/database",slug:"/firebase/database/read-data-and-change-events",permalink:"/docs/firebase/database/read-data-and-change-events",tags:[],version:"current",frontMatter:{title:"Database - Read Data and Change Events",sidebar_label:"Read Data and Change Events"},sidebar:"firebase",previous:{title:"Write Data",permalink:"/docs/firebase/database/write-data"},next:{title:"Delete Data",permalink:"/docs/firebase/database/delete-data"}},d=[{value:"Reading Data and Listening to Value Change events",id:"reading-data-and-listening-to-value-change-events",children:[],level:2},{value:"Get a DatabaseReference",id:"get-a-databasereference",children:[{value:"Listen for value events",id:"listen-for-value-events",children:[],level:3},{value:"Read Data Once",id:"read-data-once",children:[],level:3}],level:2}],u={toc:d};function p(e){var a=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"reading-data-and-listening-to-value-change-events"},"Reading Data and Listening to Value Change events"),(0,i.kt)("p",null,"All data reading is an asynchronous process. "),(0,i.kt)("h2",{id:"get-a-databasereference"},"Get a DatabaseReference"),(0,i.kt)("p",null,"To read or write data from the database, you need an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"DatabaseReference"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"var database:DatabaseReference;\n\ndatabase = FirebaseDatabase.service.getReference();\n")),(0,i.kt)("h3",{id:"listen-for-value-events"},"Listen for value events"),(0,i.kt)("p",null,"To read data at a path and listen for changes you add a listener for the ",(0,i.kt)("inlineCode",{parentName:"p"},"VALUE_CHANGED"),"\nevent."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"database.addEventListener( DatabaseReferenceEvent.VALUE_CHANGED, valueChangedHandler );\n")),(0,i.kt)("p",null,"You can also attach these listeners to children to get specific updates when a particular\nvalue changes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'database.child("someKey").addEventListener( DatabaseReferenceEvent.VALUE_CHANGED, valueChangedHandler );\n')),(0,i.kt)("p",null,"In your handler you will have access to a ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSnapshot")," which represents the data\ncontained in the node at the time of the event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"private function valueChangedHandler( event:DatabaseReferenceEvent ):void \n{\n    // event.snapshot will contain the DataSnapshot of the reference this listener was attached\n    trace( event.snapshot.toString() );\n}\n")),(0,i.kt)("p",null,"You should also listen for the ",(0,i.kt)("inlineCode",{parentName:"p"},"VALUE_CHANGED_ERROR")," event at this point. It will\nbe dispatched when there is an issue retrieving the value. For example, a read can\nfail if the client doesn't have permission to read from a Firebase database location."),(0,i.kt)("p",null,"When this event is dispatched the event will have the ",(0,i.kt)("inlineCode",{parentName:"p"},"errorCode")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"errorDescription"),"\nfields populated with the details of the error."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"database.addEventListener( DatabaseReferenceEvent.VALUE_CHANGED_ERROR, valueChangedErrorHandler );\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"private function valueChangedErrorHandler( event:DatabaseReferenceEvent ):void \n{\n    trace( event.errorCode );\n    trace( event.errorDescription );\n}\n")),(0,i.kt)("h3",{id:"read-data-once"},"Read Data Once"),(0,i.kt)("p",null,"In some cases you may want a callback to be called once and then immediately removed,\nsuch as when initializing a UI element that you don't expect to change. This is useful\nfor data that only needs to be loaded once and isn't expected to change frequently or\nrequire active listening."),(0,i.kt)("p",null,"To this end you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"once( callback:Function )")," method and provide a callback\nfunction to handle the result."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'var ref:DatabaseReference = FirebaseDatabase.service.getReference( "test" );\n\nref.once( function( value:Object ):void \n{\n    if (value != null)\n    {\n        trace( JSON.stringify( value ) );\n    }\n    else \n    {\n        // There was an error\n    }\n});\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"once")," function takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")," as a parameter which will be called when the value\nhas been read. This function should have one parameter of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Object")," which will be the\nresulting ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," of the read operation. This value may be ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," if an error occurred."))}p.isMDXComponent=!0}}]);