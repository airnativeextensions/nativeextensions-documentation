"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[99633],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>v});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),f=o,v=c["".concat(l,".").concat(f)]||c[f]||u[f]||a;return t?i.createElement(v,r(r({ref:n},d),{},{components:t})):i.createElement(v,r({ref:n},d))}));function v(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<a;p++)r[p]=t[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},46688:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var i=t(87462),o=(t(67294),t(3905));const a={title:"Downloading Expansion Files",sidebar_label:"Downloading Expansion Files"},r=void 0,s={unversionedId:"expansionfiles/downloading-expansion-files",id:"expansionfiles/downloading-expansion-files",title:"Downloading Expansion Files",description:"Once you have setup the Expansion Files ANE you should provide information about",source:"@site/docs/expansionfiles/downloading-expansion-files.md",sourceDirName:"expansionfiles",slug:"/expansionfiles/downloading-expansion-files",permalink:"/docs/expansionfiles/downloading-expansion-files",draft:!1,tags:[],version:"current",frontMatter:{title:"Downloading Expansion Files",sidebar_label:"Downloading Expansion Files"},sidebar:"expansionfiles",previous:{title:"Uploading Expansion Files",permalink:"/docs/expansionfiles/uploading-expansion-files"},next:{title:"JOBB Files",permalink:"/docs/expansionfiles/jobb-files"}},l={},p=[],d={toc:p},c="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Once you have setup the Expansion Files ANE you should provide information about\nyour expansion files. This is done by creating an ExpansionFile object and passing\nit to the ANE's ",(0,o.kt)("inlineCode",{parentName:"p"},"addExpansionFile")," function."),(0,o.kt)("p",null,"You can then check if the files have already been downloaded using the\n",(0,o.kt)("inlineCode",{parentName:"p"},"expansionFilesDelivered")," function. This returns ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if the files have been\ndownloaded either as part of the install from Google Play or in a previous run\nof the application. If the files haven't been downloaded you should start the\ndownload process and wait for the ",(0,o.kt)("inlineCode",{parentName:"p"},"ExpansionFilesEvent.COMPLETE")," event to process\nthe files."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: ",(0,o.kt)("inlineCode",{parentName:"p"},"expansionFilesDelivered")," will check the file size of the downloaded\nfile to the filesize you have specified so it is very important that you\ncreate your ",(0,o.kt)("inlineCode",{parentName:"p"},"ExpansionFile")," with the exact size of the file you have uploaded\nto the Play Store. If you don't then this will always return ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," and may\nincorrectly download your file on every launch.")),(0,o.kt)("p",null,"The following example shows the major events in this process and the suggested\nmethod of checking for the existence of expansion files."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},'public static const BASE64_PUBLIC_KEY   : String = "YOUR_LICENSING_PUBLIC_KEY";\npublic static const SALT        : Vector.<int> = Vector.<int>( [ 1, 43, -12, -1, 54, 98, -100, -12, 43, 2, -8, -4, 9, 5, -106, -108, -33, 45, -1, 84 ]); \n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"ExpansionFiles.service.setup( BASE64_PUBLIC_KEY, SALT );\n\nExpansionFiles.service.addEventListener( ExpansionFilesEvent.CONNECTED,     connectedHandler );\nExpansionFiles.service.addEventListener( ExpansionFilesEvent.STATE_CHANGED, stateChangedHandler );\nExpansionFiles.service.addEventListener( ProgressEvent.PROGRESS,            progressHandler );\nExpansionFiles.service.addEventListener( ExpansionFilesEvent.COMPLETE,      completeHandler );\n\n// Add the details of your expansion file(s)\nvar expansionFile:ExpansionFile = new ExpansionFile( ExpansionFile.MAIN, 1001002, 233017 );\nExpansionFiles.service.addExpansionFile( expansionFile );\n\n// Check if the files have been delivered / downloaded already\nif (!ExpansionFiles.service.expansionFilesDelivered())\n{\n    // Start the downloading\n    ExpansionFiles.service.download();\n}\nelse\n{\n    // Already have expansion files - use as required\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function connectedHandler( event:ExpansionFilesEvent ):void\n{\n    trace( "connectedHandler()" );\n}\n\nprivate function stateChangedHandler( event:ExpansionFilesEvent ):void\n{\n    trace( "stateChangedHandler(): " + event.state );\n}\n\nprivate function completeHandler( event:ExpansionFilesEvent ):void\n{\n    trace( "completeHandler()" );\n    // Read your expansion files\n}\n\nprivate function progressHandler( event:ProgressEvent ):void\n{\n    trace( "progressHandler( " + event.progress.toString() + " )" );    \n}\n')))}u.isMDXComponent=!0}}]);