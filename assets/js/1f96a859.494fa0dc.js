"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[72357],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return X}});var s=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,s,o=function(e,n){if(null==e)return{};var t,s,o={},i=Object.keys(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=s.createContext({}),u=function(e){var n=s.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},l=function(e){var n=u(e.components);return s.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},d=s.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=u(t),X=o,f=d["".concat(c,".").concat(X)]||d[X]||p[X]||i;return t?s.createElement(f,r(r({ref:n},l),{},{components:t})):s.createElement(f,r({ref:n},l))}));function X(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=d;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,r[1]=a;for(var u=2;u<i;u++)r[u]=t[u];return s.createElement.apply(null,r)}return s.createElement.apply(null,t)}d.displayName="MDXCreateElement"},56421:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return c},default:function(){return X},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return p}});var s=t(87462),o=t(63366),i=(t(67294),t(3905)),r=["components"],a={title:"Windows WNS Message",sidebar_label:"Windows WNS Message"},c=void 0,u={unversionedId:"pushnotifications/windows/windows-wns-message",id:"pushnotifications/windows/windows-wns-message",title:"Windows WNS Message",description:"In order to send a message to WNS you will need the information you noted from the service setup:",source:"@site/docs/pushnotifications/windows/windows-wns-message.md",sourceDirName:"pushnotifications/windows",slug:"/pushnotifications/windows/windows-wns-message",permalink:"/docs/pushnotifications/windows/windows-wns-message",draft:!1,tags:[],version:"current",frontMatter:{title:"Windows WNS Message",sidebar_label:"Windows WNS Message"},sidebar:"pushnotifications",previous:{title:"Firebase Cloud Message",permalink:"/docs/pushnotifications/firebase/firebase-cloud-message"},next:{title:"Pushy Message",permalink:"/docs/pushnotifications/pushy/pushy-message"}},l={},p=[{value:"PHP Example",id:"php-example",level:3},{value:"C# Documentation",id:"c-documentation",level:3}],d={toc:p};function X(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,s.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In order to send a message to WNS you will need the information you noted from the ",(0,i.kt)("a",{parentName:"p",href:"windows-notification-service"},"service setup"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Application Secret"),', or "client secret";'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Package SID"),', "or client id".')),(0,i.kt)("p",null,'Using this information you request an "access token" from WNS and then send a notification using this access token to the user\'s "channel uri".'),(0,i.kt)("p",null,'The "channel uri" identifies the user and is used as the destination of a notification. This is returned via the "device token" accessors in this extension.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"var wnsChannelUri:String = PushNotifications.service.getDeviceToken();\n")),(0,i.kt)("p",null,"You then place the access token in the authorisation header of a post request to the channel uri, where the content of the request is the ",(0,i.kt)("a",{parentName:"p",href:"windows-wns-payload"},"WNS payload"),"."),(0,i.kt)("h3",{id:"php-example"},"PHP Example"),(0,i.kt)("p",null,"The following is a simple example of using PHP to send a notification:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n    // SERVICE CONFIG\n    $clientId = 'ms-app://s-1-15-2-XXXXXXXXXX-XXXXXXXXXX-XXXXXXXXX-XXXXXXXXXX-XXXXXXXXXX-XXXXXXXXXX-XXXXXXXXXX';\n    $clientSecret = '/XXYYXXYYXXYYXXYYXXYYXXYYXXYY';\n    \n    // USER - You will need to get this from the device\n    $channelUri = 'https://sg2p.notify.windows.com/?token=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';\n    \n    //TOAST MESSAGE\n    $toastMessage = \n\"<toast launch='payload=%7B%22test%22%3A%22value%22%7D'>\\\n  <visual lang='en-US'>\\\n    <binding template='ToastGeneric'>\\\n    <image src='https://airnativeextensions.com/images/extensions/icons/ane-pushnotifications-icon.png' placement='appLogoOverride' />\\\n    <text>Test Notification</text>\\\n    <text>A notification sent via WNS</text>\\\n    </binding>\\\n  </visual>\\\n</toast>\"; \n\n\n    ////////////////////////////////////////////////////////////\n    //  GET ACCESS TOKEN\n    //\n\n    $fields = array(  \n        'grant_type' => 'client_credentials',\n        'client_id' => \"$clientId\",\n        'client_secret' => \"$clientSecret\",\n        'scope' => 'notify.windows.com'\n    );\n    $fields_string = \"\";\n    foreach($fields as $key=>$value) { $fields_string .= $key.'='.$value.'&'; }\n    rtrim($fields_string, '&');\n\n    $tokenRequest = curl_init();\n    curl_setopt($tokenRequest, CURLOPT_URL, 'https://login.live.com/accesstoken.srf');\n    curl_setopt($tokenRequest, CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded'));\n    curl_setopt($tokenRequest, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($tokenRequest, CURLOPT_POST, count($fields));\n    curl_setopt($tokenRequest, CURLOPT_POSTFIELDS, $fields_string);\n\n    $output = json_decode(curl_exec($tokenRequest));\n    curl_close($tokenRequest);\n    $accessToken = $output->{'access_token'};\n\n\n\n    ////////////////////////////////////////////////////////////\n    //  SEND PUSH\n    //\n\n    $sendPush = curl_init();\n\n    $headers = array(\n        'Content-Type: text/xml', \n        \"Content-Length: \" . strlen($toastMessage),\n        \"X-WNS-Type: wns/toast\", \n        \"Authorization: Bearer $accessToken\" \n    );\n\n    curl_setopt($sendPush, CURLOPT_URL, $channelUri );\n    curl_setopt($sendPush, CURLOPT_HEADER, true);\n    curl_setopt($sendPush, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($sendPush, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($sendPush, CURLOPT_POST, 1);        \n    curl_setopt($sendPush, CURLOPT_POSTFIELDS, $toastMessage);         \n\n    $output = curl_exec($sendPush);\n    curl_close($sendPush);\n    \n?>  \n")),(0,i.kt)("h3",{id:"c-documentation"},"C# Documentation"),(0,i.kt)("p",null,"Microsoft has documentation on using C# to send a notification here:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/previous-versions/windows/apps/hh868252%28v%3dwin.10%29"},"https://docs.microsoft.com/en-us/previous-versions/windows/apps/hh868252%28v%3dwin.10%29"))))}X.isMDXComponent=!0}}]);