(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[28261],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return h},kt:function(){return p}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=o.createContext({}),l=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},h=function(e){var t=l(e.components);return o.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),d=l(n),p=r,f=d["".concat(u,".").concat(p)]||d[p]||c[p]||i;return n?o.createElement(f,a(a({ref:t},h),{},{components:n})):o.createElement(f,a({ref:t},h))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1382:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return s},toc:function(){return u},default:function(){return h}});var o=n(22122),r=n(19756),i=(n(67294),n(3905)),a={title:"Request Authorisation",sidebar_label:"Request Authorisation"},s={unversionedId:"bluetoothle/request-authorisation",id:"bluetoothle/request-authorisation",isDocsHomePage:!1,title:"Request Authorisation",description:"After initialising the extension you should check whether the user has given your application",source:"@site/docs/bluetoothle/request-authorisation.md",sourceDirName:"bluetoothle",slug:"/bluetoothle/request-authorisation",permalink:"/docs/bluetoothle/request-authorisation",version:"current",sidebar_label:"Request Authorisation",frontMatter:{title:"Request Authorisation",sidebar_label:"Request Authorisation"},sidebar:"bluetoothle",previous:{title:"Add the Extension",permalink:"/docs/bluetoothle/add-the-extension"},next:{title:"Adapter State",permalink:"/docs/bluetoothle/adapter-state"}},u=[],l={toc:u};function h(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"After initialising the extension you should check whether the user has given your application\nauthorisation to user Bluetooth LE. You can check the value of hasAuthorisation() which will\nreturn true if the device is authorised and false otherwise. However the better method is to\nuse the authorisationStatus() to determine the status, this will allow you to determine if\nyour application has authorisation, has been denied or is not yet determined (i.e. the user\nhas not yet been asked to grant authorisation)."),(0,i.kt)("p",null,"On iOS you will only be able to display the authorisation request dialog once! Hence it is\nvery important that you inform your users why they should grant authorisation before requesting\nauthorisation. To request authorisation you call requestAuthorisation(). This function will\ntrigger the native dialog asking the user for authorisation."),(0,i.kt)("p",null,"On Android these permissions are listed through the manifest additions. On older versions of\nAndroid these permissions are accepted when the user installs the application. More modern\nversions (Marshmallow 6 ","[v23]","+) require that you request the permissions at runtime similar\nto iOS. You will still need to list them in your manifest and then follow the same code below\nas for iOS, except that on Android you will be able to ask multiple times. You should respect\nthe SHOULD_EXPLAIN status by displaying additional information to your user about why you\nrequire this functionality."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"BluetoothLE.service.addEventListener( AuthorisationEvent.CHANGED, authorisationChangedHandler );\n\nswitch (BluetoothLE.service.authorisationStatus())\n{\n    case AuthorisationStatus.AUTHORISED:\n        // The user has granted access to Bluetooth LE\n        break;\n    \n    case AuthorisationStatus.NOT_DETERMINED:\n    case AuthorisationStatus.SHOULD_EXPLAIN:\n        // The user has not yet been asked or \n        // has denied once and you should explain\n        BluetoothLE.service.requestAuthorisation();\n        break;\n    \n    case AuthorisationStatus.DENIED:\n    case AuthorisationStatus.RESTRICTED:\n    case AuthorisationStatus.UNKNOWN:\n        // The user has denied access or has restricted access to Bluetooth LE\n        break;\n}\n\n...\n\nprivate function authorisationChangedHandler( event:AuthorisationEvent ):void\n{\n    // Authorisation status has now changed\n}\n")))}h.isMDXComponent=!0}}]);