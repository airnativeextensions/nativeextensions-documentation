"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[57874],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=r.createContext({}),c=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=c(t),m=i,f=s["".concat(d,".").concat(m)]||s[m]||u[m]||a;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=s;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},66369:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=t(87462),i=t(63366),a=(t(67294),t(3905)),o=["components"],l={title:"Deep Linking",sidebar_label:"Deep Linking"},d=void 0,c={unversionedId:"braze/deep-linking",id:"braze/deep-linking",title:"Deep Linking",description:"Enabling",source:"@site/docs/braze/deep-linking.md",sourceDirName:"braze",slug:"/braze/deep-linking",permalink:"/docs/braze/deep-linking",draft:!1,tags:[],version:"current",frontMatter:{title:"Deep Linking",sidebar_label:"Deep Linking"}},p={},u=[{value:"Enabling",id:"enabling",level:2},{value:"iOS",id:"ios",level:3},{value:"Android",id:"android",level:3},{value:"Events",id:"events",level:2}],s={toc:u};function m(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"enabling"},"Enabling"),(0,a.kt)("p",null,"Deep links are enabled automatically however you will need to add a few additions to your application descriptor in order to receive them correctly. "),(0,a.kt)("h3",{id:"ios"},"iOS"),(0,a.kt)("p",null,"On iOS add your custom url scheme to the ",(0,a.kt)("inlineCode",{parentName:"p"},"CFBundleURLTypes")," array in your info additions. Replace ",(0,a.kt)("inlineCode",{parentName:"p"},"CUSTOM_URL_SCHEME")," in the below with your scheme:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"<key>CFBundleURLTypes</key>\n<array>\n  <dict>\n    <key>CFBundleURLSchemes</key>\n    <array>\n      <string>CUSTOM_URL_SCHEME</string>\n    </array>\n  </dict>\n</array>\n")),(0,a.kt)("h3",{id:"android"},"Android"),(0,a.kt)("p",null,"Add the following activity within the ",(0,a.kt)("inlineCode",{parentName:"p"},"application")," node of your manifest additions. Replace ",(0,a.kt)("inlineCode",{parentName:"p"},"CUSTOM_URL_SCHEME")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"CUSTOM_URL_PATH")," with your values:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<activity>\n    <intent-filter>\n        <action android:name="android.intent.action.MAIN"/>\n        <category android:name="android.intent.category.LAUNCHER"/>\n    </intent-filter>\n    <intent-filter>\n    <action android:name="android.intent.action.VIEW"/>\n        <category android:name="android.intent.category.DEFAULT"/>\n        <category android:name="android.intent.category.BROWSABLE"/>\n        <data android:scheme="CUSTOM_URL_SCHEME" android:host="CUSTOM_URL_PATH"/>\n    </intent-filter>\n</activity>\n')),(0,a.kt)("p",null,"This would open a url link of the form ",(0,a.kt)("inlineCode",{parentName:"p"},"CUSTOM_URL_SCHEME://CUSTOM_URL_PATH"),", eg: ",(0,a.kt)("inlineCode",{parentName:"p"},"distriqt://app")),(0,a.kt)("h2",{id:"events"},"Events"),(0,a.kt)("p",null,"When a deep link is received and determined to be from Braze the extension will dispatch a ",(0,a.kt)("inlineCode",{parentName:"p"},"BrazeDeeplinkEvent.RECEIVED")," event:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Braze.instance.addEventListener( BrazeDeeplinkEvent.RECEIVED, deeplink_receivedHandler );\n\nfunction deeplink_receivedHandler( event:BrazeDeeplinkEvent ):void\n{\n    trace( "deeplink received" );\n}\n')),(0,a.kt)("p",null,"This event will contain a property ",(0,a.kt)("inlineCode",{parentName:"p"},"uriAction")," which is an instance of the ",(0,a.kt)("inlineCode",{parentName:"p"},"UriAction")," class and contains information relevant to the deep link, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"url"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"channel")," and any ",(0,a.kt)("inlineCode",{parentName:"p"},"extras"),"."))}m.isMDXComponent=!0}}]);