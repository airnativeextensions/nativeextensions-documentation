"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[27168],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return f}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(a),f=r,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||i;return a?n.createElement(m,l(l({ref:t},u),{},{components:a})):n.createElement(m,l({ref:t},u))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},77952:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var n=a(87462),r=a(63366),i=(a(67294),a(3905)),l=["components"],o={title:"Database - Write Data",sidebar_label:"Write Data"},s=void 0,c={unversionedId:"firebase/database/write-data",id:"firebase/database/write-data",title:"Database - Write Data",description:"Get a DatabaseReference",source:"@site/docs/firebase/database/write-data.md",sourceDirName:"firebase/database",slug:"/firebase/database/write-data",permalink:"/docs/firebase/database/write-data",tags:[],version:"current",frontMatter:{title:"Database - Write Data",sidebar_label:"Write Data"},sidebar:"firebase",previous:{title:"Configure Database Rules",permalink:"/docs/firebase/database/configure-database-rules"},next:{title:"Read Data and Change Events",permalink:"/docs/firebase/database/read-data-and-change-events"}},u=[{value:"Get a DatabaseReference",id:"get-a-databasereference",children:[],level:2},{value:"Write Data",id:"write-data",children:[{value:"Basic write operations",id:"basic-write-operations",children:[],level:3},{value:"Updating Children",id:"updating-children",children:[],level:3}],level:2}],d={toc:u};function p(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"get-a-databasereference"},"Get a DatabaseReference"),(0,i.kt)("p",null,"To read or write data from the database, you need an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"DatabaseReference"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"var database:DatabaseReference;\n\ndatabase = FirebaseDatabase.service.getReference();\n")),(0,i.kt)("h2",{id:"write-data"},"Write Data"),(0,i.kt)("h3",{id:"basic-write-operations"},"Basic write operations"),(0,i.kt)("p",null,"For basic write operations, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"setValue()")," to save data to a specified\nreference, replacing any existing data at that path. You can use this method to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Pass types that correspond to the available types as follows: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"String")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Number")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Boolean")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Array"))))),(0,i.kt)("p",null,"For example you can add a user with ",(0,i.kt)("inlineCode",{parentName:"p"},"setValue")," as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'var user:Object = { \n    username: "someuser",\n    email: "user@test.com"\n}\n\ndatabase.child("users").child(userId).setValue(user);\n')),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"setValue")," will overwrite any data at the specified location, including any\nchild nodes. However, you can still update a child without rewriting the entire object.\nIf you want to allow users to update their profiles you could update the username as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'database.child("users").child(userId).child("username").setValue(name);\n')),(0,i.kt)("h3",{id:"updating-children"},"Updating Children"),(0,i.kt)("p",null,"To simultaneously write to specific children of a node without overwriting other\nchild nodes, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"updateChildren()")," method."),(0,i.kt)("p",null,"When calling ",(0,i.kt)("inlineCode",{parentName:"p"},"updateChildren()"),", you can update lower-level child values by\nspecifying a path for the key. "),(0,i.kt)("p",null,"To update children we recommend using the ",(0,i.kt)("inlineCode",{parentName:"p"},"UpdateChildrenBuilder"),". This class\nhelps construct the correct parameters to pass to the ",(0,i.kt)("inlineCode",{parentName:"p"},"updateChildren")," function."),(0,i.kt)("p",null,"It's usage is quite straight forward, simply construct an instance of the builder,\nthen call ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," for each value update you intend to perform passing the ",(0,i.kt)("inlineCode",{parentName:"p"},"path")," to\nthe value and the new value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},'var ref:DatabaseReference = FirebaseDatabase.service.getReference( "test" );\n\nref.updateChildren( \n    new UpdateChildrenBuilder()\n        .update( "/children_test/numericValue", 100 )\n        .update( "/children_test/stringValue", "some string" )\n        .build()\n);\n')))}p.isMDXComponent=!0}}]);