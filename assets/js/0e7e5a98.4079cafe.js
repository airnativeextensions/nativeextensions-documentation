"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[97839],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(a),b=n,m=u["".concat(l,".").concat(b)]||u[b]||p[b]||i;return a?r.createElement(m,o(o({ref:t},d),{},{components:a})):r.createElement(m,o({ref:t},d))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=b;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}b.displayName="MDXCreateElement"},48376:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=a(87462),n=(a(67294),a(3905));const i={title:"Database - Introduction",sidebar_label:"Introduction"},o=void 0,s={unversionedId:"firebase/database/introduction",id:"firebase/database/introduction",title:"Database - Introduction",description:"Realtime Database",source:"@site/docs/firebase/database/introduction.md",sourceDirName:"firebase/database",slug:"/firebase/database/introduction",permalink:"/docs/firebase/database/introduction",draft:!1,tags:[],version:"current",frontMatter:{title:"Database - Introduction",sidebar_label:"Introduction"},sidebar:"firebase",previous:{title:"Migrating to v11.0",permalink:"/docs/firebase/auth/migrating-to-v11"},next:{title:"Add the extension",permalink:"/docs/firebase/database/add-the-extensions"}},l={},c=[{value:"Realtime Database",id:"realtime-database",level:2},{value:"Key capabilities",id:"key-capabilities",level:2},{value:"Database Structure",id:"database-structure",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"realtime-database"},"Realtime Database"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Data is synced across all clients in realtime, and remains available when your app goes offline."),(0,n.kt)("p",{parentName:"blockquote"},"The Firebase Realtime Database is a cloud-hosted database. Data is stored as JSON and synchronized\nin realtime to every connected client. When you build cross-platform apps with our iOS, Android,\nand JavaScript SDKs, all of your clients share one Realtime Database instance and automatically\nreceive updates with the newest data.")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=U5aeM5dvUpA"},(0,n.kt)("img",{parentName:"a",src:"https://img.youtube.com/vi/U5aeM5dvUpA/0.jpg",alt:"YOUTUBE"}))),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/database/"},"https://firebase.google.com/docs/database/")),(0,n.kt)("h2",{id:"key-capabilities"},"Key capabilities"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null}),(0,n.kt)("th",{parentName:"tr",align:null}))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Realtime"),(0,n.kt)("td",{parentName:"tr",align:null},"Instead of typical HTTP requests, the Firebase Realtime Database uses data synchronization\u2014every time data changes, any connected device receives that update within milliseconds. Provide collaborative and immersive experiences without thinking about networking code.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Offline"),(0,n.kt)("td",{parentName:"tr",align:null},"Firebase apps remain responsive even when offline because the Firebase Realtime Database SDK persists your data to disk. Once connectivity is reestablished, the client device receives any changes it missed, synchronizing it with the current server state.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Accessible from Client Devices"),(0,n.kt)("td",{parentName:"tr",align:null},"The Firebase Realtime Database can be accessed directly from a mobile device or web browser; there\u2019s no need for an application server. Security and data validation are available through the Firebase Realtime Database Security Rules, expression-based rules that are executed when data is read or written.")))),(0,n.kt)("h2",{id:"database-structure"},"Database Structure"),(0,n.kt)("p",null,"All Firebase Realtime Database data is stored as JSON objects. You can think of\nthe database as a cloud-hosted JSON tree. Unlike a SQL database, there are no\ntables or records. When you add data to the JSON tree, it becomes a node in the\nexisting JSON structure with an associated key. You can provide your own keys,\nsuch as user IDs or semantic names, or they can be provided for you using push()."),(0,n.kt)("p",null,"Best practices for data structure:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://firebase.google.com/docs/database/android/structure-data#avoid_nesting_data"},"Avoid nesting data")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://firebase.google.com/docs/database/android/structure-data#flatten_data_structures"},"Flatten data structures")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://firebase.google.com/docs/database/android/structure-data#fanout"},"Create data that scales"))),(0,n.kt)("p",null,"Read more about structuring your database ",(0,n.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/database/android/structure-data"},"here")))}p.isMDXComponent=!0}}]);