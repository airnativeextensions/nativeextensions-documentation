"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[50134],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,m=p["".concat(s,".").concat(d)]||p[d]||h[d]||i;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},40974:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const i={title:"Querying Data",sidebar_label:"Querying Data"},l=void 0,o={unversionedId:"health/queries",id:"health/queries",title:"Querying Data",description:"To query data you will create a StatisticsQuery and then pass it to the execute() method. This will query the data specified and when complete call a callback function with the result.",source:"@site/docs/health/queries.md",sourceDirName:"health",slug:"/health/queries",permalink:"/docs/health/queries",draft:!1,tags:[],version:"current",frontMatter:{title:"Querying Data",sidebar_label:"Querying Data"},sidebar:"health",previous:{title:"Authorisation",permalink:"/docs/health/authorisation"},next:{title:"changelog",permalink:"/docs/health/changelog"}},s={},u=[{value:"Aggregating results",id:"aggregating-results",level:2},{value:"Manual User Entries",id:"manual-user-entries",level:2}],c={toc:u},p="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"To query data you will create a ",(0,r.kt)("inlineCode",{parentName:"p"},"StatisticsQuery")," and then pass it to the ",(0,r.kt)("inlineCode",{parentName:"p"},"execute()")," method. This will query the data specified and when complete call a callback function with the result."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"var query:StatisticQuery = ...;\n\nHealth.instance.execute( query, callback );\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"callback")," function should be of the form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"function( result:HealthQueryResult, error:Error ):void\n{\n    // Process query result\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"HealthQueryResult")," contains the result of the query including an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"Statistic")," objects in the ",(0,r.kt)("inlineCode",{parentName:"p"},"result.statistics")," parameter. If an error occurred then the ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," parameter will be non-null and contain the details of the error."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},'var now:Date = new Date();\nvar startDate:Date = new Date( 2023, 0, 1 );\n\nvar stepQuery:StatisticsQuery = new StatisticsQuery( HealthType.STEP_COUNT )\n        .withStartDate( startDate )\n        .withEndDate( now );\n\nHealth.instance.execute(\n        stepQuery,\n        function ( result:HealthQueryResult, error:Error ):void\n        {\n            if (error != null)\n            {\n                trace( "ERROR: " + error.message );\n                return;\n            }\n            // result will contain query data\n            for each (var stat:Statistic in result.statistics)\n            {\n                trace( stat.startDate.toString() + "::" + stat.sum );\n            }\n        }\n);\n')),(0,r.kt)("h2",{id:"aggregating-results"},"Aggregating results"),(0,r.kt)("p",null,"You can get the results aggregated into time intervals by calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"withInterval()")," method on the ",(0,r.kt)("inlineCode",{parentName:"p"},"StatisticsQuery"),"."),(0,r.kt)("p",null,"For example to group the results into daily totals:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"var stepQuery:StatisticsQuery = new StatisticsQuery( HealthType.STEP_COUNT )\n        .withStartDate( startDate )\n        .withEndDate( now )\n        .withInterval( 1, TimeUnit.DAYS );\n")),(0,r.kt)("p",null,"This can be useful when you are displaying results in a particular format to a user."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"withInterval()")," method takes 2 parameters, the first being a ",(0,r.kt)("inlineCode",{parentName:"p"},"duration")," and the second is a ",(0,r.kt)("inlineCode",{parentName:"p"},"unit")," from the predefined values in the ",(0,r.kt)("inlineCode",{parentName:"p"},"TimeUnit")," class. "),(0,r.kt)("p",null,"This allows you to create various intervals:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"daily results: ",(0,r.kt)("inlineCode",{parentName:"li"},"withInterval( 1, TimeUnit.DAYS )")," "),(0,r.kt)("li",{parentName:"ul"},"6 hour buckets: ",(0,r.kt)("inlineCode",{parentName:"li"},"withInterval( 6, TimeUnit.HOURS )")," "),(0,r.kt)("li",{parentName:"ul"},"30 minute buckets: ",(0,r.kt)("inlineCode",{parentName:"li"},"withInterval( 30, TimeUnit.MINUTES )")," ")),(0,r.kt)("h2",{id:"manual-user-entries"},"Manual User Entries"),(0,r.kt)("p",null,"Filtering out entries that have been manually entered by the user can be helpful in certain situations. To do this, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"filterManualDataEntries()")," method on the ",(0,r.kt)("inlineCode",{parentName:"p"},"StatisticsQuery"),"."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-actionscript"},"var stepQuery:StatisticsQuery = new StatisticsQuery( HealthType.STEP_COUNT )\n        .withStartDate( startDate )\n        .withEndDate( now )\n        .filterManualDataEntries();\n")),(0,r.kt)("p",null,"Conversely, you can request only manual data entries by using ",(0,r.kt)("inlineCode",{parentName:"p"},"manualDataEntriesOnly()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"var stepQuery:StatisticsQuery = new StatisticsQuery( HealthType.STEP_COUNT )\n        .withStartDate( startDate )\n        .withEndDate( now )\n        .manualDataEntriesOnly();\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Filtering data entries will override aggregation requests on Android, resulting in a query that returns individual samples. Apple's HealthKit seems to have no issues with this. "),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Fit")," "),(0,r.kt)("p",{parentName:"admonition"},"With the Google FIT API service the data records are queried within the time frame and then any with a data source set to ",(0,r.kt)("inlineCode",{parentName:"p"},"user_input")," are removed.\nThis was impossible when aggregated as the sources were combined together."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"HealthConnect")),(0,r.kt)("p",{parentName:"admonition"},"Currently Health Connect seems to be inconsistent with filtering results. Similar to Google Fit the samples must be queried without aggregation to get access to the data origins, however the fields don't seem to be correctly set by certain applications so the results may be inconsistent. ")))}h.isMDXComponent=!0}}]);