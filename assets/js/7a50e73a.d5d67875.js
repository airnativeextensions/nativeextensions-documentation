"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[46408],{3905:function(e,r,t){t.d(r,{Zo:function(){return p},kt:function(){return u}});var a=t(67294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,a,i=function(e,r){if(null==e)return{};var t,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)t=n[a],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)t=n[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),o=function(e){var r=a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},p=function(e){var r=o(e.components);return a.createElement(s.Provider,{value:r},e.children)},h={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},v=a.forwardRef((function(e,r){var t=e.components,i=e.mdxType,n=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),v=o(t),u=i,d=v["".concat(s,".").concat(u)]||v[u]||h[u]||n;return t?a.createElement(d,c(c({ref:r},p),{},{components:t})):a.createElement(d,c({ref:r},p))}));function u(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var n=t.length,c=new Array(n);c[0]=v;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,c[1]=l;for(var o=2;o<n;o++)c[o]=t[o];return a.createElement.apply(null,c)}return a.createElement.apply(null,t)}v.displayName="MDXCreateElement"},40367:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return o},default:function(){return h}});var a=t(87462),i=t(63366),n=(t(67294),t(3905)),c={title:"Central Manager",sidebar_label:"Central Manager"},l=void 0,s={unversionedId:"bluetoothle/central-manager",id:"bluetoothle/central-manager",isDocsHomePage:!1,title:"Central Manager",description:"Acting as a Central",source:"@site/docs/bluetoothle/central-manager.md",sourceDirName:"bluetoothle",slug:"/bluetoothle/central-manager",permalink:"/docs/bluetoothle/central-manager",tags:[],version:"current",frontMatter:{title:"Central Manager",sidebar_label:"Central Manager"},sidebar:"bluetoothle",previous:{title:"Centrals and Peripherals",permalink:"/docs/bluetoothle/centrals-and-peripherals"},next:{title:"Peripheral Manager",permalink:"/docs/bluetoothle/peripheral-manager"}},o=[{value:"Acting as a Central",id:"acting-as-a-central",children:[{value:"Discovering Peripherals",id:"discovering-peripherals",children:[]},{value:"Connecting to a Peripheral",id:"connecting-to-a-peripheral",children:[]},{value:"Discovering Services and Characteristics of a Connected Peripheral",id:"discovering-services-and-characteristics-of-a-connected-peripheral",children:[]},{value:"Retrieving the Value of a Characteristic",id:"retrieving-the-value-of-a-characteristic",children:[]},{value:"Subscribing to a Characteristic",id:"subscribing-to-a-characteristic",children:[]},{value:"Unsubscribing from a Characteristic",id:"unsubscribing-from-a-characteristic",children:[]},{value:"Writing the Value of a Characteristic",id:"writing-the-value-of-a-characteristic",children:[]}]}],p={toc:o};function h(e){var r=e.components,t=(0,i.Z)(e,["components"]);return(0,n.kt)("wrapper",(0,a.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"acting-as-a-central"},"Acting as a Central"),(0,n.kt)("p",null,"In this section we describe how to operate as a central and scan, read, write and subscribe to peripherals."),(0,n.kt)("p",null,"Here you will be shown how to:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#discovering-peripherals"},"Discovering Peripherals")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#connecting-to-a-peripheral"},"Connecting to a Peripheral")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#discovering-services-and-characteristics-of-a-connected-peripheral"},"Discovering Services and Characteristics of a Connected Peripheral")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#retrieving-the-value-of-a-characteristic"},"Retrieving the Value of a Characteristic")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#subscribing-to-a-characteristic"},"Subscribing to a Characteristic")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#unsubscribing-from-a-characteristic"},"Unsubscribing from a Characteristic")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#writing-the-value-of-a-characteristic"},"Writing the Value of a Characteristic"))),(0,n.kt)("h3",{id:"discovering-peripherals"},"Discovering Peripherals"),(0,n.kt)("p",null,"The most common first task for a central is to scan for advertising peripherals.\nAs advertising is the main way peripherals announce their presence. You can discover\nany advertising peripherals by starting a scan using the ",(0,n.kt)("inlineCode",{parentName:"p"},"scanForPeripherals")," function."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},"BluetoothLE.service.centralManager.addEventListener( PeripheralEvent.DISCOVERED, central_peripheralDiscoveredHandler );\n\nif (!BluetoothLE.service.centralManager.scanForPeripherals())\n{\n    // There was an error starting to scan, check the state of the adapter!\n}\n")),(0,n.kt)("p",null,"Then when peripherals are discovered you will receive the ",(0,n.kt)("inlineCode",{parentName:"p"},"PeripheralEvent.DISCOVERED")," event:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function central_peripheralDiscoveredHandler( event:PeripheralEvent ):void\n{\n    // event.peripheral will contain a Peripheral object with information about the Peripheral\n    trace( "peripheral discovered: "+ event.peripheral.name );\n}\n')),(0,n.kt)("p",null,"Most likely in a real world situation you would provide the first parameter to the\n",(0,n.kt)("inlineCode",{parentName:"p"},"scanForPeripherals")," function. This first parameter is an array of service uuids which\nshould be scanned for as generally you are wanting to discover devices with a certain feature\n/ service. If you do not provide it (as in the above example) then all discovered peripherals\nwill be returned."),(0,n.kt)("h3",{id:"connecting-to-a-peripheral"},"Connecting to a Peripheral"),(0,n.kt)("p",null,"Once you have discovered a peripheral and made the decision to interact with it you will need\nto connect to the peripheral. When connecting you need to use an object retrieved through a\ndiscovered event, passing it to the ",(0,n.kt)("inlineCode",{parentName:"p"},"BluetoothLE.service.centralManager.connect")," function."),(0,n.kt)("p",null,"The connect function may then cause several events to be dispatched:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"PeripheralEvent.CONNECT"),": when connection was successfully made"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"PeripheralEvent.CONNECT_FAIL"),": when the connection failed"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"PeripheralEvent.DISCONNECT"),": this may be dispatched later (after a connect event) if the connection is left idle.")),(0,n.kt)("p",null,"For example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},'var activePeripheral:Peripheral = null;\n\nBluetoothLE.service.centralManager.addEventListener( PeripheralEvent.DISCOVERED, central_peripheralDiscoveredHandler );\nBluetoothLE.service.centralManager.addEventListener( PeripheralEvent.CONNECT, central_peripheralConnectHandler );\nBluetoothLE.service.centralManager.addEventListener( PeripheralEvent.CONNECT_FAIL, central_peripheralConnectFailHandler );\nBluetoothLE.service.centralManager.addEventListener( PeripheralEvent.DISCONNECT, central_peripheralDisconnectHandler );\n\nBluetoothLE.service.centralManager.scanForPeripherals();\n\n...\n\nprivate function central_peripheralDiscoveredHandler( event:PeripheralEvent ):void\n{\n    trace( "connecting to peripheral: "+ event.peripheral.name );\n    \n    // You should make some decision about whether this peripheral is the one you wish to connect to\n    //  either store the peripheral and ask the user or determine by services available \n    \n    // For this example we are just going to blindly connect to every discovered peripheral\n    BluetoothLE.service.centralManager.connect( event.peripheral );\n}\n\nprivate function central_peripheralConnectHandler( event:PeripheralEvent ):void\n{\n    trace( "peripheral connected: "+ event.peripheral.toString() ); \n    // Store the peripheral for further interaction\n    activePeripheral = event.peripheral;\n}\n\nprivate function central_peripheralConnectFailHandler( event:PeripheralEvent ):void\n{\n    trace( "peripheral connect fail: "+ event.peripheral.name );    \n    activePeripheral = null;\n}\n\nprivate function central_peripheralDisconnectHandler( event:PeripheralEvent ):void\n{\n    trace( "peripheral disconnect: "+ event.peripheral.name );  \n    activePeripheral = null;\n}\n')),(0,n.kt)("h3",{id:"discovering-services-and-characteristics-of-a-connected-peripheral"},"Discovering Services and Characteristics of a Connected Peripheral"),(0,n.kt)("p",null,"After you have established a connection to a peripheral, you can begin to explore its data.\nThe first step in exploring what a peripheral has to offer is discovering its available services.\nTo do this you add listeners to the ",(0,n.kt)("inlineCode",{parentName:"p"},"Peripheral")," object and call ",(0,n.kt)("inlineCode",{parentName:"p"},"discoverServices"),"."),(0,n.kt)("p",null,"Similar to ",(0,n.kt)("inlineCode",{parentName:"p"},"scanForPeripherals")," the discovery process can take an array of uuids to limit the\nservices returned to be services of interest to your application. The following example uses\nthe default of an empty array to discover all avaliable services of the peripheral"),(0,n.kt)("p",null,"When this process completes successfully the ",(0,n.kt)("inlineCode",{parentName:"p"},"PeripheralEvent.DISCOVER_SERVICES")," will be\ndispatched with a Peripheral object that contains a populated ",(0,n.kt)("inlineCode",{parentName:"p"},"Peripheral.services")," array of\n",(0,n.kt)("inlineCode",{parentName:"p"},"Service")," objects."),(0,n.kt)("p",null,"Each service contains a list of ",(0,n.kt)("inlineCode",{parentName:"p"},"Characteristic"),"s. You can consider a ",(0,n.kt)("inlineCode",{parentName:"p"},"Characteristic")," as a data value,\nwhich has properties, permissions and a value represented as a ",(0,n.kt)("inlineCode",{parentName:"p"},"ByteArray"),". Similarly to services\nyou can discover the Characteristics of a ",(0,n.kt)("inlineCode",{parentName:"p"},"Service")," on a ",(0,n.kt)("inlineCode",{parentName:"p"},"Peripheral")," by calling the\n",(0,n.kt)("inlineCode",{parentName:"p"},"discoverCharacteristics")," function. This function similarly dispatches the\n",(0,n.kt)("inlineCode",{parentName:"p"},"PeripheralEvent.DISCOVER_CHARACTERISTICS")," event when completed."),(0,n.kt)("p",null,"In the following snippet we discover all of the available services on a previously connected\nPeripheral and then proceed to discover the characteristics of the first service."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},"var peripheral:Peripheral = ...; // This snippet assumes you have a connected 'peripheral' object.\nvar service:Service = null;\n\nperipheral.addEventListener( PeripheralEvent.DISCOVER_SERVICES, peripheral_discoverServicesHandler );\nperipheral.addEventListener( PeripheralEvent.DISCOVER_CHARACTERISTICS, peripheral_discoverCharacteristicsHandler );\n\nperipheral.discoverServices();\n")),(0,n.kt)("p",null,"Then in the event handler lets iterate through the services and discover the characteristics of\nthe first available Service."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function peripheral_discoverServicesHandler( event:PeripheralEvent ):void\n{\n    trace( "peripheral discover services: " + event.peripheral.name );\n    if (event.peripheral.services.length > 0)\n    {\n        for each (var service:Service in event.peripheral.services)\n        {\n            trace( "service: "+ service.uuid );\n        }\n        // As an example discover the characteristics of the first available service\n        peripheral.discoverCharacteristics( peripheral.services[0] );\n    }\n}\n\nprivate function peripheral_discoverCharacteristicsHandler( event:PeripheralEvent ):void\n{\n    trace( "peripheral discover characteristics: " + event.peripheral.name );\n    for each (var service:Service in event.peripheral.services)\n    {\n        trace( "service: "+ service.uuid );\n        for each (var ch:Characteristic in service.characteristics)\n        {\n            trace( "characteristic: "+ch.uuid );\n        }\n    }\n}\n')),(0,n.kt)("h3",{id:"retrieving-the-value-of-a-characteristic"},"Retrieving the Value of a Characteristic"),(0,n.kt)("p",null,"A characteristic contains a single value that represents more information about a peripheral's service.\nFor example, a temperature measurement characteristic of a health thermometer service may have a value\nthat indicates a temperature in Celsius. You can retrieve the value of a characteristic by reading it\ndirectly or by subscribing to it."),(0,n.kt)("p",null,"After you have found a characteristic of a service that you are interested in, you can read the\ncharacteristic's value by calling the ",(0,n.kt)("inlineCode",{parentName:"p"},"readValueForCharacteristic")," and waiting for the\n",(0,n.kt)("inlineCode",{parentName:"p"},"CharacteristicEvent.UPDATE")," event."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},'var peripheral:Peripheral = ...; // Previously connected Peripheral\nvar characteristic:Characteristic = ...; // Discovered Characteristic of interest\n\nperipheral.addEventListener( CharacteristicEvent.UPDATE, peripheral_characteristic_updatedHandler );\nperipheral.addEventListener( CharacteristicEvent.UPDATE_ERROR, peripheral_characteristic_errorHandler );\n\nperipheral.readValueForCharacteristic( characteristic );\n\n...\n\nprivate function peripheral_characteristic_updatedHandler( event:CharacteristicEvent ):void\n{\n    trace( "peripheral characteristic updated: " + event.characteristic.uuid );\n    trace( "value="+ event.characteristic.value.readUTFBytes( event.characteristic.value.length )  );\n}\n\nprivate function peripheral_characteristic_errorHandler( event:CharacteristicEvent ):void\n{\n    trace( "peripheral characteristic error: [" + event.errorCode +"] "+event.error );\n}\n')),(0,n.kt)("h3",{id:"subscribing-to-a-characteristic"},"Subscribing to a Characteristic"),(0,n.kt)("p",null,"Though reading the value of a characteristic using the ",(0,n.kt)("inlineCode",{parentName:"p"},"readValueForCharacteristic")," method can be\neffective for some use cases, it is not the most efficient way to retrieve a value that changes.\nFor most characteristic values that change\u2014for instance, your heart rate at any given time \u2014 you\nshould retrieve them by subscribing to them. When you subscribe to a characteristic's value, you\nreceive an event from the peripheral when the value changes."),(0,n.kt)("p",null,"You can subscribe to the value of a characteristic that you are interested in by calling the\n",(0,n.kt)("inlineCode",{parentName:"p"},"subscribeToCharacteristic")," function and passing the characteristic you are interested in. When you\nattempt to subscribe to a characteristic's value, the ",(0,n.kt)("inlineCode",{parentName:"p"},"CharacteristicEvent.SUBSCRIBE")," event will\nbe dispatched indicating you will now receive ",(0,n.kt)("inlineCode",{parentName:"p"},"CharacteristicEvent.UPDATE")," events whenever the\nvalue of the Characteristic changes. If the subscription request fails for any reason the\n",(0,n.kt)("inlineCode",{parentName:"p"},"CharacteristicEvent.SUBSCRIBE_ERROR")," will be dispatched."),(0,n.kt)("p",null,"After you have successfully subscribed to a characteristic's value, the peripheral device\nnotifies your app when the value has changed. Each time the value changes the\n",(0,n.kt)("inlineCode",{parentName:"p"},"CharacteristicEvent.UPDATE")," event will be dispatched."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},"var peripheral:Peripheral = ...; // Previously connected Peripheral\nvar characteristic:Characteristic = ...; // Discovered Characteristic of interest\n\nperipheral.addEventListener( CharacteristicEvent.UPDATE, peripheral_characteristic_updatedHandler );\nperipheral.addEventListener( CharacteristicEvent.UPDATE_ERROR, peripheral_characteristic_errorHandler );\nperipheral.addEventListener( CharacteristicEvent.SUBSCRIBE, peripheral_characteristic_subscribeHandler );\nperipheral.addEventListener( CharacteristicEvent.SUBSCRIBE_ERROR, peripheral_characteristic_subscribeErrorHandler );\nperipheral.addEventListener( CharacteristicEvent.UNSUBSCRIBE, peripheral_characteristic_unsubscribeHandler );\n\nif (!peripheral.subscribeToCharacteristic( characteristic ))\n{\n    // error starting subscription process \n}\n")),(0,n.kt)("p",null,"Once subscribed you will start receiving update events:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function peripheral_characteristic_updatedHandler( event:CharacteristicEvent ):void\n{\n    trace( "peripheral characteristic updated: " + event.characteristic.uuid );\n    trace( "value="+ event.characteristic.value.readUTFBytes( event.characteristic.value.length )  );\n}\n\nprivate function peripheral_characteristic_errorHandler( event:CharacteristicEvent ):void\n{\n    trace( "peripheral characteristic error: [" + event.errorCode +"] "+event.error );\n}\n\nprivate function peripheral_characteristic_subscribeHandler( event:CharacteristicEvent ):void\n{\n    trace( "peripheral characteristic subscribe: " + event.peripheral.name );\n}       \n\nprivate function peripheral_characteristic_subscribeErrorHandler( event:CharacteristicEvent ):void\n{\n    trace( "peripheral characteristic error: [" + event.errorCode +"] "+event.error );\n}       \n\nprivate function peripheral_characteristic_unsubscribeHandler( event:CharacteristicEvent ):void\n{\n    trace( "peripheral characteristic unsubscribe: " + event.peripheral.name );\n}\n')),(0,n.kt)("h3",{id:"unsubscribing-from-a-characteristic"},"Unsubscribing from a Characteristic"),(0,n.kt)("p",null,"If you wish to later unsubscribe from a characteristic you can call the ",(0,n.kt)("inlineCode",{parentName:"p"},"unsubscribeToCharacteristic"),"\nwith the same ",(0,n.kt)("inlineCode",{parentName:"p"},"Characteristic")," and the ",(0,n.kt)("inlineCode",{parentName:"p"},"CharacteristicEvent.UNSUBSCRIBE")," will be dispatched when\nthis is completed."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},"peripheral.addEventListener( CharacteristicEvent.UNSUBSCRIBE, peripheral_characteristic_unsubscribeHandler );\n\nperipheral.unsubscribeToCharacteristic( characteristic );\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function peripheral_characteristic_unsubscribeHandler( event:CharacteristicEvent ):void\n{\n    trace( "peripheral characteristic unsubscribe: " + event.peripheral.name );\n}\n')),(0,n.kt)("h3",{id:"writing-the-value-of-a-characteristic"},"Writing the Value of a Characteristic"),(0,n.kt)("p",null,"For some use cases, it makes sense to write the value of a characteristic. If a characteristic's\nvalue is writeable, you can write its value with some data (a ByteArray) by calling\n",(0,n.kt)("inlineCode",{parentName:"p"},"writeValueForCharacteristic")," function on a ",(0,n.kt)("inlineCode",{parentName:"p"},"Peripheral")," and providing the ",(0,n.kt)("inlineCode",{parentName:"p"},"Characteristic")," to\nwrite and the new value."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},'// These variables for peripheral and characteristic should have \n// previously been obtained through scanning and discovery functionality \nvar peripheral:Peripheral = ...;\nvar characteristic:Characteristic = ...;\n\nperipheral.addEventListener( CharacteristicEvent.WRITE_SUCCESS, peripheral_characteristic_writeHandler );\nperipheral.addEventListener( CharacteristicEvent.WRITE_ERROR, peripheral_characteristic_writeErrorHandler );\n            \n// Some data to write\nvar value:ByteArray = new ByteArray();\nvalue.writeUTFBytes( "some_data_value" );\n\nvar success:Boolean = peripheral.writeValueForCharacteristic( characteristic, value );\n')),(0,n.kt)("p",null,"You will receive either a success or an error event:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function peripheral_characteristic_writeHandler( event:CharacteristicEvent ):void\n{\n    trace( "peripheral characteristic write: " + event.peripheral.name );\n}\n\nprivate function peripheral_characteristic_writeErrorHandler( event:CharacteristicEvent ):void\n{\n    trace( "peripheral characteristic error: [" + event.errorCode +"] "+event.error );\n}   \n')),(0,n.kt)("p",null,"Characteristics may only allow certain types of writes to be performed on their value.\nTo determine which types of writes are permitted to a characteristic's value, you access\nthe relevant properties of the ",(0,n.kt)("inlineCode",{parentName:"p"},"Characteristic.properties")," array. The possible values are\ndefined in the ",(0,n.kt)("inlineCode",{parentName:"p"},"Characteristic")," class ",(0,n.kt)("inlineCode",{parentName:"p"},"PROPERTY_*")," definitions."))}h.isMDXComponent=!0}}]);