"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[7544],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,h=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},27033:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={title:"Silent Switch",sidebar_label:"Silent Switch"},i=void 0,l={unversionedId:"volume/silent-switch",id:"volume/silent-switch",title:"Silent Switch",description:"Currently this is only available for the iOS silent switch. It does not work with the",source:"@site/docs/volume/silent-switch.md",sourceDirName:"volume",slug:"/volume/silent-switch",permalink:"/docs/volume/silent-switch",draft:!1,tags:[],version:"current",frontMatter:{title:"Silent Switch",sidebar_label:"Silent Switch"},sidebar:"volume",previous:{title:"Streams",permalink:"/docs/volume/streams"},next:{title:"changelog",permalink:"/docs/volume/changelog"}},s={},c=[{value:"Monitor the mute state",id:"monitor-the-mute-state",level:2},{value:"Most Recent Mute state",id:"most-recent-mute-state",level:2},{value:"Listening for changes",id:"listening-for-changes",level:2}],u={toc:c},m="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Currently this is only available for the iOS silent switch. It does not work with the\nAndroid muted states."),(0,o.kt)("h2",{id:"monitor-the-mute-state"},"Monitor the mute state"),(0,o.kt)("p",null,"In order to be sure that you have the correct mute state registered you must monitor\nthe mute state. Monitoring the mute state periodically starts a process that checks\nwhether mute has been enabled on the device."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"Volume.service.monitorMuteState( true );\n")),(0,o.kt)("p",null,"You can stop this at any time:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"Volume.service.monitorMuteState( false );\n")),(0,o.kt)("h2",{id:"most-recent-mute-state"},"Most Recent Mute state"),(0,o.kt)("p",null,"The most recently detected mute state can be retrieved using the ",(0,o.kt)("inlineCode",{parentName:"p"},"isMuted()")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"var isMuted:Boolean = Volume.service.isMuted();\n")),(0,o.kt)("h2",{id:"listening-for-changes"},"Listening for changes"),(0,o.kt)("p",null,"Once you are monitoring the mute state, change events will be dispatched. You can\nreact in your event handlers as you see fit. There are two events, ",(0,o.kt)("inlineCode",{parentName:"p"},"MUTED")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"UNMUTED"),"\nrepresenting the change to mute and unmuted respectively."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"Volume.service.addEventListener( VolumeEvent.MUTED, mutedHandler );\nVolume.service.addEventListener( VolumeEvent.UNMUTED, unmutedHandler );\n")))}p.isMDXComponent=!0}}]);