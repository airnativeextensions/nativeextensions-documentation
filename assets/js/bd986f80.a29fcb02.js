"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[15289],{3905:function(e,n,r){r.d(n,{Zo:function(){return p},kt:function(){return d}});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},p=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=l(r),d=a,f=h["".concat(c,".").concat(d)]||h[d]||u[d]||i;return r?t.createElement(f,s(s({ref:n},p),{},{components:r})):t.createElement(f,s({ref:n},p))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=h;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=r[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}h.displayName="MDXCreateElement"},78739:function(e,n,r){r.r(n),r.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return u}});var t=r(83117),a=r(80102),i=(r(67294),r(3905)),s=["components"],o={title:"Restore Purchases",sidebar_label:"Restore Purchases"},c=void 0,l={unversionedId:"inappbilling/restore-purchases",id:"inappbilling/restore-purchases",title:"Restore Purchases",description:"Restoring purchases is a process that you should allow for user's who have either changed devices",source:"@site/docs/inappbilling/restore-purchases.md",sourceDirName:"inappbilling",slug:"/inappbilling/restore-purchases",permalink:"/docs/inappbilling/restore-purchases",draft:!1,tags:[],version:"current",frontMatter:{title:"Restore Purchases",sidebar_label:"Restore Purchases"},sidebar:"inappbilling",previous:{title:"Pending Purchases",permalink:"/docs/inappbilling/pending-purchases"},next:{title:"Get Purchases",permalink:"/docs/inappbilling/get-purchases"}},p={},u=[],h={toc:u};function d(e){var n=e.components,r=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,t.Z)({},h,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Restoring purchases is a process that you should allow for user's who have either changed devices\nor reinstalled your application and hence need to gain access to their purchases again."),(0,i.kt)("p",null,"This process must require user interaction in order to pass the App Store review process.\nYou should provide a button somewhere in your application to initiate this process."),(0,i.kt)("p",null,"For more information on the concepts you can read the Apple documentation ",(0,i.kt)("a",{parentName:"p",href:"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/StoreKitGuide/Chapters/Restoring.html"},"here"),"."),(0,i.kt)("p",null,"The restoring purchases process starts by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"restorePurchases")," function and concludes with either\na success (",(0,i.kt)("inlineCode",{parentName:"p"},"InAppBillingEvent.RESTORE_PURCHASES_SUCCESS"),") or failure (",(0,i.kt)("inlineCode",{parentName:"p"},"InAppBillingEvent.RESTORE_PURCHASES_FAILED"),") event. "),(0,i.kt)("p",null,"After calling ",(0,i.kt)("inlineCode",{parentName:"p"},"restorePurchases")," you will a receive ",(0,i.kt)("inlineCode",{parentName:"p"},"PurchaseEvent.PURCHASES_UPDATED")," dispatched\nwhich will contained ",(0,i.kt)("inlineCode",{parentName:"p"},"Purchase")," objects in the restored state having the original purchase\nvariable representing the original purchase transaction."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-actionscript"},"// The service must be setup and a list of products retrieved.\n\n// Make sure you have added your purchases handler\nInAppBilling.service.addEventListener( PurchaseEvent.PURCHASES_UPDATED, purchases_updatedHandler );\n\nInAppBilling.service.addEventListener( InAppBillingEvent.RESTORE_PURCHASES_SUCCESS, restorePurchases_successHandler );\nInAppBilling.service.addEventListener( InAppBillingEvent.RESTORE_PURCHASES_FAILED, restorePurchases_failedHandler );\n\n// Start the restore process\nInAppBilling.service.restorePurchases();\n\n\n//\n//\n//\n\nfunction purchases_updatedHandler( event:PurchaseEvent ):void\n{\n    for each (var purchase:Purchase in event.data)\n    {\n        switch (purchase.transactionState)\n        {\n\n            //  Other states...\n\n\n            case Purchase.STATE_RESTORED:\n                // The originalPurchase property will contain all the \n                // information on the original transaction allowing \n                // you to restore the user's product\n                \n                addPurchaseToInventory( purchase.originalPurchase );\n                InAppBilling.service.finishPurchase( purchase );\n                \n                // Again you could hold on to this purchase and check it against \n                // your application server before calling finishPurchase\n                break;\n\n\n        }\n    }   \n}\n\n\n//\n//  RESTORE PURCHASE EVENTS\n//\n\nfunction restorePurchases_successHandler( event:InAppBillingEvent ):void\n{\n    // Called when all purchases have been restored\n    // This event contains no data\n}\n\nfunction restorePurchases_failedHandler( event:InAppBillingEvent ):void\n{\n    // Called if there was an error restoring purchases\n}\n")))}d.isMDXComponent=!0}}]);