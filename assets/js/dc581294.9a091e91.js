"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[73434],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>f});var a=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=a.createContext({}),u=function(e){var r=a.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=u(e.components);return a.createElement(l.Provider,{value:r},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},d=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(t),d=n,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return t?a.createElement(f,o(o({ref:r},c),{},{components:t})):a.createElement(f,o({ref:r},c))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[p]="string"==typeof e?e:n,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},96206:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=t(87462),n=(t(67294),t(3905));const i={title:"Firestore - Perform simple and compound queries",sidebar_label:"Perform simple and compound queries"},o=void 0,s={unversionedId:"firebase/firestore/perform-simple-and-compound-queries",id:"firebase/firestore/perform-simple-and-compound-queries",title:"Firestore - Perform simple and compound queries",description:"Cloud Firestore provides powerful query functionality for specifying which documents you want to retrieve from a collection. These queries can also be used with either query() or addSnapshotListener(), as described in Get Data and Get Realtime Updates.",source:"@site/docs/firebase/firestore/perform-simple-and-compound-queries.md",sourceDirName:"firebase/firestore",slug:"/firebase/firestore/perform-simple-and-compound-queries",permalink:"/docs/firebase/firestore/perform-simple-and-compound-queries",draft:!1,tags:[],version:"current",frontMatter:{title:"Firestore - Perform simple and compound queries",sidebar_label:"Perform simple and compound queries"},sidebar:"firebase",previous:{title:"Get realtime updates",permalink:"/docs/firebase/firestore/get-realtime-updates"},next:{title:"Order and limit data",permalink:"/docs/firebase/firestore/order-and-limit-data"}},l={},u=[{value:"Simple queries",id:"simple-queries",level:2},{value:"Compound queries",id:"compound-queries",level:2},{value:"Query limitations",id:"query-limitations",level:2}],c={toc:u},p="wrapper";function m(e){let{components:r,...t}=e;return(0,n.kt)(p,(0,a.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Cloud Firestore provides powerful query functionality for specifying which documents you want to retrieve from a collection. These queries can also be used with either ",(0,n.kt)("inlineCode",{parentName:"p"},"query()")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"addSnapshotListener()"),", as described in ",(0,n.kt)("a",{parentName:"p",href:"/docs/firebase/firestore/get-data"},"Get Data")," and ",(0,n.kt)("a",{parentName:"p",href:"/docs/firebase/firestore/get-realtime-updates"},"Get Realtime Updates"),"."),(0,n.kt)("h2",{id:"simple-queries"},"Simple queries"),(0,n.kt)("p",null,"The following query returns all cities with state ",(0,n.kt)("inlineCode",{parentName:"p"},"CA"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},'// Create a reference to the cities collection\nvar citiesRef:CollectionReference = FirebaseFirestore.service.collection("cities");\n\n// Create a query against the collection.\nvar query:Query = citiesRef.whereEqualTo("state", "CA");\n')),(0,n.kt)("p",null,"The following query returns all the capital cities:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},'var query:Query = FirebaseFirestore.service.collection("cities").whereEqualTo("capital", true);\n')),(0,n.kt)("p",null,"There are several variants of the ",(0,n.kt)("inlineCode",{parentName:"p"},"where...")," method each take two parameters, a field to filter on and a value."),(0,n.kt)("p",null,"Some example filters:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},'citiesRef.whereEqualTo("state", "CA");\ncitiesRef.whereLessThan("population", 100000);\ncitiesRef.whereGreaterThanOrEqualTo("name", "San Francisco");\n')),(0,n.kt)("h2",{id:"compound-queries"},"Compound queries"),(0,n.kt)("p",null,"You can also chain multiple ",(0,n.kt)("inlineCode",{parentName:"p"},"where...")," methods to create more specific queries (logical AND). However, to combine the equality operator (==) with a range or array-contains clause (<, <=, >, >=, or array_contains), make sure to create a ",(0,n.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/firestore/query-data/indexing"},"composite index"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},'citiesRef.whereEqualTo("state", "CO").whereEqualTo("name", "Denver");\ncitiesRef.whereEqualTo("state", "CA").whereLessThan("population", 1000000);\n')),(0,n.kt)("p",null,"You can only perform range comparisons (<, <=, >, >=) on a single field."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Valid"),": Range filters on only one field"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},'citiesRef.whereGreaterThanOrEqualTo("state", "CA")\n        .whereLessThanOrEqualTo("state", "IN");\ncitiesRef.whereEqualTo("state", "CA")\n        .whereGreaterThan("population", 1000000);\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Invalid"),": Range filters on different fields:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},'citiesRef.whereGreaterThanOrEqualTo("state", "CA").whereGreaterThan("population", 100000);\n')),(0,n.kt)("h2",{id:"query-limitations"},"Query limitations"),(0,n.kt)("p",null,"Cloud Firestore does not support the following types of queries:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Queries with range filters on different fields, as described in the previous section."),(0,n.kt)("li",{parentName:"ul"},"Single queries across multiple collections or subcollections. Each query runs against a single collection of documents. For more information about how your data structure affects your queries, see Choose a Data Structure."),(0,n.kt)("li",{parentName:"ul"},"Logical OR queries. In this case, you should create a separate query for each OR condition and merge the query results in your app."),(0,n.kt)("li",{parentName:"ul"},'Queries with a != clause. In this case, you should split the query into a greater-than query and a less-than query. For example, although the query clause where("age", "!=", "30") is not supported, you can get the same result set by combining two queries, one with the clause where("age", "<", "30") and one with the clause where("age", ">", 30).')))}m.isMDXComponent=!0}}]);