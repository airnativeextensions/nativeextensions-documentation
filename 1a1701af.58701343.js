(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{134:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return u}));var r=t(2),a=t(6),i=(t(0),t(807)),o={title:"Sending Hits and Events",sidebar_label:"Sending Hits and Events"},c={unversionedId:"googleanalytics/sending-hits-and-events",id:"googleanalytics/sending-hits-and-events",isDocsHomePage:!1,title:"Sending Hits and Events",description:"Sending a Screen View Hit",source:"@site/docs/googleanalytics/sending-hits-and-events.md",slug:"/googleanalytics/sending-hits-and-events",permalink:"/docs/googleanalytics/sending-hits-and-events",version:"current",sidebar_label:"Sending Hits and Events"},s=[{value:"Sending a Screen View Hit",id:"sending-a-screen-view-hit",children:[]},{value:"Sending an Event",id:"sending-an-event",children:[]}],l={rightToc:s};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"sending-a-screen-view-hit"},"Sending a Screen View Hit"),Object(i.b)("p",null,"A 'Hit' is a single message or notification that you wish to be logged in Google Analytics.\nHit's are constructed by using a 'Builder'. Builders are used for all Analytics tracking\nto be able to easily construct the correct parameters for a particular hit. There is a\nbuilder for each hit type available."),Object(i.b)("p",null,"Screens in Google Analytics represent content users are viewing within your app.\nThe equivalent concept in web analytics is a pageview. Measuring screen views allows\nyou to see which content is being viewed most by your users, and how they are\nnavigating between different pieces of content."),Object(i.b)("p",null,"A screen view consists of a single string field that will be used as the screen name\nin your Google Analytics reports. To send a screen view, you must set the current\nscreen name on your tracker and then use the ",Object(i.b)("inlineCode",{parentName:"p"},"ScreenViewBuilder")," to build the screen\nview hit, as below:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-actionscript"}),'var tracker:Tracker = GoogleAnalytics.service.getTracker( "YOUR_TRACKING_ID" );\n\n// Sets the screen name. This will be sent with any subsequent events / views on this tracker\ntracker.setScreenName( "currentScreenName" );\n\ntracker.send( new ScreenViewBuilder().build() );\n')),Object(i.b)("h2",{id:"sending-an-event"},"Sending an Event"),Object(i.b)("p",null,"Events are a useful way to collect data about a user's interaction with interactive\ncomponents of your app, like button presses or the use of a particular item in a game.\nAn event consists of four fields that you can use to describe a user's interaction\nwith your app content, a 'category', an 'action', a 'label' and a numeric 'value'.\nThe 'category' and 'action' are required."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-actionscript"}),'var tracker:Tracker = GoogleAnalytics.service.getTracker( "YOUR_TRACKING_ID" );\n\ntracker.send( \n    new EventBuilder()\n        .setCategory( "user" )\n        .setAction( "signIn" )\n        .setValue( 123 )\n        .build() );\n')))}u.isMDXComponent=!0},807:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return g}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),u=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=u(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(t),b=r,g=d["".concat(o,".").concat(b)]||d[b]||p[b]||i;return t?a.a.createElement(g,c(c({ref:n},l),{},{components:t})):a.a.createElement(g,c({ref:n},l))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=b;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);