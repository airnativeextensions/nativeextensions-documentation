"use strict";(self.webpackChunknativeextensions_documentation=self.webpackChunknativeextensions_documentation||[]).push([[35120],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),h=i,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||o;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},77961:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),a={title:"Auth Utilities",sidebar_label:"Auth Utilities"},l=void 0,c={unversionedId:"gameservices/auth-utilities",id:"gameservices/auth-utilities",isDocsHomePage:!1,title:"Auth Utilities",description:"AuthUtil provides static utility methods to:",source:"@site/docs/gameservices/auth-utilities.md",sourceDirName:"gameservices",slug:"/gameservices/auth-utilities",permalink:"/docs/gameservices/auth-utilities",tags:[],version:"current",frontMatter:{title:"Auth Utilities",sidebar_label:"Auth Utilities"}},s=[{value:"Service Configuration",id:"service-configuration",children:[{value:"Google Play Game Services",id:"google-play-game-services",children:[]},{value:"Game Center",id:"game-center",children:[]}]},{value:"Get Authorisation Token",id:"get-authorisation-token",children:[{value:"Google Play Game Services",id:"google-play-game-services-1",children:[]},{value:"Game Center",id:"game-center-1",children:[]}]}],u={toc:s};function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"AuthUtil provides static utility methods to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Acquire ClientLogin, OAuth2, ID, or offline access tokens for Google accounts;"),(0,o.kt)("li",{parentName:"ul"},"Identity Verification Signature for Game Center;")),(0,o.kt)("h2",{id:"service-configuration"},"Service Configuration"),(0,o.kt)("h3",{id:"google-play-game-services"},"Google Play Game Services"),(0,o.kt)("p",null,"In order to retrieve the server authorisation tokens you need to include the server client id in your service configuration. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},'var service:Service;\nif (GameServices.service.isServiceSupported( Service.GOOGLE_PLAY_GAME_SERVICES ))\n{\n    service = new Service( Service.GOOGLE_PLAY_GAME_SERVICES );\n    service.serverClientId = "googlePlayServerClientID";\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The server client id for Google Play Game Services is the ",(0,o.kt)("strong",{parentName:"p"},"Web application")," Client ID and will be of the form ",(0,o.kt)("inlineCode",{parentName:"p"},"XXXXXXXXXXXX-yyyyyyyyyyyyyyyyyyyyyyyyyyyyy.apps.googleusercontent.com"),".")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note"),": We highly recommend utilising the ",(0,o.kt)("a",{parentName:"p",href:"https://airnativeextensions.com/extension/com.distriqt.GoogleIdentity"},"Google Identity ANE")," for advanced sign-in options. It is much more complete, providing additional controls over the sign in process and user authentication options. If you are looking for additional scopes and permissions please utilise that ANE.")),(0,o.kt)("h3",{id:"game-center"},"Game Center"),(0,o.kt)("p",null,"Nothing additional is required."),(0,o.kt)("h2",{id:"get-authorisation-token"},"Get Authorisation Token"),(0,o.kt)("p",null,"You may wish to perform actions on behalf of a user using an API query or other such service.\nThis will generally require a token or authorisation to be consumed by some other service\non behalf of a specified user account. "),(0,o.kt)("p",null,"To retrieve a token you call the ",(0,o.kt)("inlineCode",{parentName:"p"},"getToken")," function with the scopes you require. The scopes\ndefine how the token can be consumed, ie. the services that you will have access to. "),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},"if (GameServices.service.authUtil.isSupported)\n{\n    GameServices.service.authUtil.addEventListener( AuthUtilEvent.AUTH_TOKEN_SUCCESS, authTokenSuccessHandler );\n    GameServices.service.authUtil.addEventListener( AuthUtilEvent.AUTH_TOKEN_ERROR, authTokenErrorHandler );\n    \n    GameServices.service.authUtil.getToken();\n}\n")),(0,o.kt)("p",null,"Then your event handlers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-actionscript"},'private function authTokenSuccessHandler( event:AuthUtilEvent ):void\n{\n    trace( "AUTH UTIL TOKEN: " + JSON.stringify( event.data ));\n}\n\nprivate function authTokenErrorHandler( event:AuthUtilEvent ):void\n{\n    trace( "AUTH UTIL ERROR: " + event.data );\n}\n')),(0,o.kt)("h3",{id:"google-play-game-services-1"},"Google Play Game Services"),(0,o.kt)("p",null,"With Google Play Game Services this process will retrieve the current Google user's ",(0,o.kt)("strong",{parentName:"p"},"Server Auth Code")," and the ",(0,o.kt)("strong",{parentName:"p"},"ID Token")," from the ",(0,o.kt)("inlineCode",{parentName:"p"},"GoogleSignInAccount"),"."),(0,o.kt)("p",null,"If available the following will be returned in the ",(0,o.kt)("inlineCode",{parentName:"p"},"event.data")," object:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"authCode"),": A one-time server auth code to send to your web server which can be exchanged for access token and sometimes refresh token if server client id is provided in your service"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"idToken"),": An ID token that you can send to your server if server client id is provided in your service")),(0,o.kt)("p",null,"You will get an error event if you haven't specified the ",(0,o.kt)("inlineCode",{parentName:"p"},"serverClientId")," in your service."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Once you have the auth code you can send the server auth code to your backend server to exchange for access and refresh tokens.\nUse the access token to call the Google Play Games Services API on behalf of the player and, optionally, store the refresh token to acquire a new access token when the access token expires.")),(0,o.kt)("h3",{id:"game-center-1"},"Game Center"),(0,o.kt)("p",null,"For GameCenter this returns the ",(0,o.kt)("strong",{parentName:"p"},"Identity Verification Signature")," from the ",(0,o.kt)("inlineCode",{parentName:"p"},"generateIdentityVerificationSignatureWithCompletionHandler")," function. "),(0,o.kt)("p",null,"The following will be returned in the ",(0,o.kt)("inlineCode",{parentName:"p"},"event.data")," object:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"url"),": The URL for the public encryption key"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"salt"),": A random NSString used to compute the hash and keep it randomized (Base64 encoded)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"signature")," The verification signature data generated (Base64 encoded)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"timestamp"),": The date and time that the signature was created")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"http://developer.apple.com/reference/gamekit/gklocalplayer/1515407-generateidentityverificationsign"},"More information"),"."))}p.isMDXComponent=!0}}]);