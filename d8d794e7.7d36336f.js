(window.webpackJsonp=window.webpackJsonp||[]).push([[706],{762:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(2),r=n(6),l=(n(0),n(896)),i={title:"Key-Value Storage",sidebar_label:"Key-Value Storage"},o={unversionedId:"cloudstorage/key-value-storage",id:"cloudstorage/key-value-storage",isDocsHomePage:!1,title:"Key-Value Storage",description:"The key-value storage system can be broken down into several main concepts:",source:"@site/docs/cloudstorage/key-value-storage.md",slug:"/cloudstorage/key-value-storage",permalink:"/docs/cloudstorage/key-value-storage",version:"current",sidebar_label:"Key-Value Storage",sidebar:"cloudstorage",previous:{title:"Add the Plugin",permalink:"/docs/cloudstorage/add-the-plugin"},next:{title:"Document Store",permalink:"/docs/cloudstorage/document-store"}},c=[{value:"Set Values",id:"set-values",children:[]},{value:"Get Values",id:"get-values",children:[]},{value:"Remove Value",id:"remove-value",children:[]},{value:"Events",id:"events",children:[]},{value:"Example",id:"example",children:[]}],u={rightToc:c};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"The key-value storage system can be broken down into several main concepts:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"setting a value;"),Object(l.b)("li",{parentName:"ul"},"getting a value;"),Object(l.b)("li",{parentName:"ul"},"listen for changes;")),Object(l.b)("p",null,"This represents all the functionality you will need to implement to be able to successfully\nstore values in the cloud. "),Object(l.b)("h3",{id:"set-values"},"Set Values"),Object(l.b)("p",null,"Firstly to set a value, you call ",Object(l.b)("inlineCode",{parentName:"p"},"setString"),", which takes a ",Object(l.b)("inlineCode",{parentName:"p"},"key")," and a ",Object(l.b)("inlineCode",{parentName:"p"},"value")," as parameters. "),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-actionscript",metastring:'title="AIR"',title:'"AIR"'}),'CloudStorage.service.keyValueStore.setString( "KEY_FOR_VALUE", "some_value" );\n')),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp",metastring:'title="Unity"',title:'"Unity"'}),'CloudStorage.Instance.SetString("KEY_FOR_VALUE", "some_value");\n')),Object(l.b)("p",null,"or to set an integer value:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-actionscript",metastring:'title="AIR"',title:'"AIR"'}),'CloudStorage.service.keyValueStore.setInt( "KEY_FOR_VALUE", 5 );\n')),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp",metastring:'title="Unity"',title:'"Unity"'}),'CloudStorage.Instance.SetInt("KEY_FOR_VALUE", 5);\n')),Object(l.b)("h3",{id:"get-values"},"Get Values"),Object(l.b)("p",null,"You can then retrieve the value using ",Object(l.b)("inlineCode",{parentName:"p"},"getString")," providing the same ",Object(l.b)("inlineCode",{parentName:"p"},"key")," as\na parameter which will then return the value set previously."),Object(l.b)("p",null,"For example: "),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-actionscript",metastring:'title="AIR"',title:'"AIR"'}),'var value:String = CloudStorage.service.keyValueStore.getString( "KEY_FOR_VALUE" );\n')),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp",metastring:'title="Unity"',title:'"Unity"'}),'var value = CloudStorage.Instance.GetString("KEY_FOR_VALUE");\n')),Object(l.b)("h3",{id:"remove-value"},"Remove Value"),Object(l.b)("p",null,"To remove a value that you have previously set you can use the ",Object(l.b)("inlineCode",{parentName:"p"},"Remove")," function:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-actionscript",metastring:'title="AIR"',title:'"AIR"'}),'CloudStorage.service.keyValueStore.remove("KEY_FOR_VALUE");\n')),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp",metastring:'title="Unity"',title:'"Unity"'}),'CloudStorage.Instance.Remove("KEY_FOR_VALUE");\n')),Object(l.b)("h3",{id:"events"},"Events"),Object(l.b)("p",null,"The extension will dispatch events when the values are changed (on another device) and when\nother system events occur:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Changed: Indicates a value has changed and the event will contain an array of keys that changed",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"AIR: ",Object(l.b)("inlineCode",{parentName:"li"},"KeyValueStoreEvent.CHANGED")),Object(l.b)("li",{parentName:"ul"},"Unity: ",Object(l.b)("inlineCode",{parentName:"li"},"OnChanged")))),Object(l.b)("li",{parentName:"ul"},"Over Quota: Your app's key-value store has exceeded its space quota on the server",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"AIR: ",Object(l.b)("inlineCode",{parentName:"li"},"KeyValueStoreEvent.OVER_QUOTA")),Object(l.b)("li",{parentName:"ul"},"Unity: ",Object(l.b)("inlineCode",{parentName:"li"},"OnOverQuota")))),Object(l.b)("li",{parentName:"ul"},"Account Changed: The user's account was changed",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"AIR: ",Object(l.b)("inlineCode",{parentName:"li"},"KeyValueStoreEvent.ACCOUNT_CHANGED")),Object(l.b)("li",{parentName:"ul"},"Unity: ",Object(l.b)("inlineCode",{parentName:"li"},"OnAccountChanged")))),Object(l.b)("li",{parentName:"ul"},"Initial Sync: The initial data synchronisation from the server was received",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"AIR: ",Object(l.b)("inlineCode",{parentName:"li"},"KeyValueStoreEvent.INITIAL_SYNC")),Object(l.b)("li",{parentName:"ul"},"Unity: ",Object(l.b)("inlineCode",{parentName:"li"},"OnInitialSync"))))),Object(l.b)("p",null,"More information see the ",Object(l.b)("inlineCode",{parentName:"p"},"KeyValueStoreEvent")," class documentation."),Object(l.b)("h2",{id:"example"},"Example"),Object(l.b)("p",null,"The following example shows the core concepts, setting then retrieving a value and listening\nto the ",Object(l.b)("inlineCode",{parentName:"p"},"KeyValueStoreEvent.CHANGED")," (",Object(l.b)("inlineCode",{parentName:"p"},"OnChanged")," on Unity) event."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-actionscript",metastring:'title="AIR"',title:'"AIR"'}),'CloudStorage.service.keyValueStore.addEventListener( KeyValueStoreEvent.CHANGED, keyStore_changedHandler );\nCloudStorage.service.keyValueStore.synchronise();\n\n// Set a value\nCloudStorage.service.keyValueStore.setString( "KEY_FOR_VALUE", newValue );\n\n// Retrieve the value\nvar value:String = CloudStorage.service.keyValueStore.getString( "KEY_FOR_VALUE" );\n\n\nfunction keyStore_changedHandler( event:KeyValueStoreEvent ):void\n{\n    trace( "KeyStore CHANGED" );\n    // event.changedKeys contains an array of changed keys\n}\n')),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp",metastring:'title="Unity"',title:'"Unity"'}),'CloudStorage.Instance.OnChanged += Instance_OnChanged;\nCloudStorage.Instance.Synchronise();\n\n// Set a value\nCloudStorage.Instance.SetString( "KEY_FOR_VALUE", "some_value" );\n\n// Retrieve the value\nstring value = CloudStorage.Instance.GetString( "KEY_FOR_VALUE" )\n\n\n\nprivate void Instance_OnChanged(KeyValueStoreEvent e)\n{\n    Debug.Log("OnChanged");\n    // e.changedKeys contains an array of changed keys\n    foreach (string key in e.changedKeys)\n    {\n        Debug.Log("OnChanged: " + key);\n    }\n}\n')))}s.isMDXComponent=!0},896:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return g}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=r.a.createContext({}),s=function(e){var t=r.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=s(e.components);return r.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),b=s(n),d=a,g=b["".concat(i,".").concat(d)]||b[d]||p[d]||l;return n?r.a.createElement(g,o(o({ref:t},u),{},{components:n})):r.a.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);